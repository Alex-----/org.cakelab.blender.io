{
  "module": "DNA", 
  "system": "Blender", 
  "source": "Blender Python API", 
  "structs": {
    "NodeSocketInterfaceVectorAcceleration": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "GameIntProperty": {
      "inherits": [
        "GameProperty"
      ], 
      "fields": {
        "value": "Property value"
      }
    }, 
    "WarpModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "texture_coords_object": "Object to set the texture coordinates", 
        "object_to": "Object to transform to", 
        "use_volume_preserve": "Preserve volume when rotations are used", 
        "object_from": "Object to transform from", 
        "falloff_curve": "(read-only)    Custom Lamp Falloff Curve", 
        "uv_layer": "UV map name", 
        "falloff_radius": "Radius to apply", 
        "vertex_group": "Vertex group name for modulating the deform"
      }
    }, 
    "ShaderNodeTexGradient": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "gradient_type": "Style of the color blending", 
        "color_mapping": "(read-only)    Color mapping settings"
      }
    }, 
    "BlendDataWindowManagers": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "UVWarpModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "center": "Center point for rotate/scale", 
        "axis_u": "Pole axis for rotation", 
        "object_to": "Object defining offset", 
        "bone_to": "Bone defining offset", 
        "object_from": "Object defining offset", 
        "uv_layer": "UV Layer name", 
        "bone_from": "Bone defining offset", 
        "vertex_group": "Vertex group name", 
        "axis_v": "Pole axis for rotation"
      }
    }, 
    "CompositorNodeColorMatte": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "color_saturation": "Saturation Tolerance for the color", 
        "color_value": "Value Tolerance for the color", 
        "color_hue": "Hue tolerance for colors to be considered a keying color"
      }
    }, 
    "MarbleTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "noise_scale": "Scaling for noise input", 
        "noise_basis": "Noise basis used for turbulence", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_depth": "Depth of the cloud calculation", 
        "turbulence": "Turbulence of the bandnoise and ringnoise types"
      }
    }, 
    "DynamicPaintBrushSettings": {
      "fields": {
        "velocity_ramp": "(read-only)    Color ramp used to define brush velocity effect", 
        "use_paint_erase": "Erase / remove paint instead of adding it", 
        "use_proximity_ramp_alpha": "Only read color ramp alpha", 
        "paint_color": "Color of the paint", 
        "wave_factor": "Multiplier for wave influence of this brush", 
        "particle_system": "The particle system to paint with", 
        "use_negative_volume": "Negate influence inside the volume", 
        "paint_alpha": "Paint alpha", 
        "wave_clamp": "Maximum level of surface intersection used to influence waves (use 0.0 to disable)", 
        "velocity_max": "Velocity considered as maximum influence (Blender units per frame)", 
        "use_material": "Use object material to define color and influence", 
        "use_particle_radius": "Use radius from particle settings", 
        "paint_distance": "Maximum distance from brush to mesh surface to affect paint", 
        "use_proximity_project": "Brush is projected to canvas from defined direction within brush proximity", 
        "invert_proximity": "Proximity falloff is applied inside the volume", 
        "ray_direction": "Ray direction to use for projection (if brush object is located in that direction it's painted)", 
        "smooth_radius": "Smooth falloff added after solid radius", 
        "proximity_falloff": "Proximity falloff type", 
        "use_absolute_alpha": "Only increase alpha value if paint alpha is higher than existing", 
        "solid_radius": "Radius that will be painted solid", 
        "use_velocity_depth": "Multiply brush intersection depth (displace, waves) by velocity ramp alpha", 
        "smudge_strength": "Smudge effect strength", 
        "material": "Material to use (if not defined, material linked to the mesh is used)", 
        "use_velocity_alpha": "Multiply brush influence by velocity color ramp alpha", 
        "use_velocity_color": "Replace brush color by velocity color ramp", 
        "use_smudge": "Make this brush to smudge existing paint as it moves", 
        "paint_wetness": "Paint wetness, visible in wetmap (some effects only affect wet paint)", 
        "paint_ramp": "(read-only)    Color ramp used to define proximity falloff"
      }
    }, 
    "WorldMistSettings": {
      "fields": {
        "height": "Control how much mist density decreases with height", 
        "start": "Starting distance of the mist, measured from the camera", 
        "falloff": "Type of transition used to fade mist", 
        "intensity": "Overall minimum intensity of the mist effect", 
        "use_mist": "Occlude objects with the environment color as they are further away", 
        "depth": "Distance over which the mist effect fades in"
      }
    }, 
    "PropertyActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "object_property": "Copy this property", 
        "value": "The name of the property or the value to use (use \"\" around strings)", 
        "property": "The name of the property", 
        "object": "Copy from this Object"
      }
    }, 
    "MaskLayers": {
      "fields": {
        "active": "Active layer in this mask"
      }
    }, 
    "ColorMapping": {
      "fields": {
        "contrast": "Adjust the contrast of the texture", 
        "brightness": "Adjust the brightness of the texture", 
        "blend_type": "Mode used to mix with texture output color", 
        "saturation": "Adjust the saturation of colors in the texture", 
        "blend_color": "Blend color to mix with texture output color", 
        "use_color_ramp": "Toggle color ramp operations", 
        "color_ramp": "(read-only)"
      }
    }, 
    "CompositorNodeTrackPos": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "position": "Which marker position to use for output", 
        "frame_relative": "Frame to be used for relative position"
      }
    }, 
    "CompositorNodeMask": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "size_source": "Where to get the mask size from for aspect/size information", 
        "use_antialiasing": "Apply an anti-aliasing filter to the mask", 
        "use_feather": "Use feather information from the mask", 
        "use_motion_blur": "Use feather information from the mask", 
        "motion_blur_shutter": "Exposure for motion blur as a factor of FPS", 
        "motion_blur_samples": "Number of motion blur samples"
      }
    }, 
    "CompositorNodeSwitch": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "check": "Off: first socket, On: second socket"
      }
    }, 
    "NodeSocketInterfaceVector": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "DampedTrackConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "track_axis": "Axis that points to the target object", 
        "target": "Target Object", 
        "head_tail": "Target along length of bone: Head=0, Tail=1"
      }
    }, 
    "MeshFloatPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshTexturePolyLayer": {
      "fields": {
        "name": "Name of UV map", 
        "active_clone": "Set the map as active for cloning", 
        "data": "(read-only)", 
        "active": "Set the map as active for display and editing", 
        "active_render": "Set the map as active for rendering"
      }
    }, 
    "HueCorrectModifier": {
      "inherits": [
        "SequenceModifier"
      ], 
      "fields": {
        "curve_mapping": "(read-only)"
      }
    }, 
    "FileSelectParams": {
      "fields": {
        "use_filter_movie": "Show movie files", 
        "use_filter_folder": "Show folders", 
        "use_filter_script": "Show script files", 
        "use_filter": "Enable filtering of files", 
        "show_hidden": "Show hidden dot files", 
        "title": "(read-only)    Title for the file browser", 
        "use_filter_image": "Show image files", 
        "use_filter_sound": "Show sound files", 
        "use_filter_backup": "Show .blend1, .blend2, etc. files", 
        "directory": "Directory displayed in the file browser", 
        "filename": "Active file in the file browser", 
        "use_filter_text": "Show text files", 
        "use_filter_blender": "Show .blend files", 
        "display_type": "Display mode for the file list", 
        "use_filter_font": "Show font files"
      }
    }, 
    "Armature": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "ghost_size": "Frame step for Ghosts (not for 'On Keyframes' Onion-skinning method)", 
        "layers_protected": "Protected layers in Proxy Instances are restored to Proxy settings on file reload and undo", 
        "show_group_colors": "Draw bone group colors", 
        "show_bone_custom_shapes": "Draw bones with their custom shapes", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "deform_method": "Vertex Deformer Method (Game Engine only)", 
        "layers": "Armature layer visibility", 
        "edit_bones": "(read-only)", 
        "ghost_step": "Number of frame steps on either side of current frame to show as ghosts (only for 'Around Current Frame' Onion-skinning method)", 
        "pose_position": "Show armature in binding pose or final posed state", 
        "show_axes": "Draw bone axes", 
        "use_mirror_x": "Apply changes to matching bone on opposite side of X-Axis", 
        "ghost_frame_end": "End frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "bones": "(read-only)", 
        "use_deform_delay": "Don't deform children when manipulating bones in Pose Mode", 
        "use_auto_ik": "Add temporary IK constraints while grabbing bones in Pose Mode", 
        "ghost_frame_start": "Starting frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "ghost_type": "Method of Onion-skinning for active Action", 
        "show_names": "Draw bone names"
      }
    }, 
    "VertexGroups": {
      "fields": {
        "active_index": "Active index in vertex group array", 
        "active": "(read-only)    Vertex groups of the object"
      }
    }, 
    "LineStyleColorModifier_DistanceFromCamera": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ], 
      "fields": {
        "range_min": "Lower bound of the input range the mapping is applied", 
        "name": "Name of the modifier", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "color_ramp": "(read-only)    Color ramp used to change line color"
      }
    }, 
    "ObjectActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "angular_velocity": "Angular velocity", 
        "use_add_character_location": "Toggle between ADD and SET character location", 
        "force_max_y": "Upper limit for Y force", 
        "force_max_z": "Upper limit for Z force", 
        "offset_location": "Location", 
        "torque": "Torque", 
        "use_add_linear_velocity": "Toggles between ADD and SET linV", 
        "force_max_x": "Upper limit for X force", 
        "mode": "Specify the motion system", 
        "use_local_force": "Force is defined in local coordinates", 
        "use_servo_limit_z": "Set limit to force along the Z axis", 
        "use_local_location": "Location is defined in local coordinates", 
        "offset_rotation": "Rotation", 
        "use_servo_limit_y": "Set limit to force along the Y axis", 
        "use_servo_limit_x": "Set limit to force along the X axis", 
        "reference_object": "Reference object for velocity calculation, leave empty for world reference", 
        "use_local_linear_velocity": "Velocity is defined in local coordinates", 
        "use_character_jump": "Make the character jump using the settings in the physics properties", 
        "derivate_coefficient": "Not required, high values can cause instability", 
        "damping": "Number of frames to reach the target velocity", 
        "linear_velocity": "Linear velocity (in Servo mode it sets the target relative linear velocity, it will be achieved by automatic application of force - Null velocity is a valid target)", 
        "force_min_y": "Lower limit for Y force", 
        "force_min_z": "Lower limit for Z force", 
        "integral_coefficient": "Low value (0.01) for slow response, high value (0.5) for fast response", 
        "force": "Force", 
        "use_local_rotation": "Rotation is defined in local coordinates", 
        "force_min_x": "Lower limit for X force", 
        "use_local_angular_velocity": "Angular velocity is defined in local coordinates", 
        "proportional_coefficient": "Typical value is 60x integral coefficient", 
        "use_local_torque": "Torque is defined in local coordinates"
      }
    }, 
    "AnimViz": {
      "fields": {
        "onion_skin_frames": "(read-only)    Onion Skinning (ghosting) settings for visualization", 
        "motion_path": "(read-only)    Motion Path settings for visualization"
      }
    }, 
    "BlendDataWorlds": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "SceneGameRecastData": {
      "fields": {
        "sample_max_error": "Detail mesh simplification max sample error", 
        "edge_max_error": "Maximum distance error from contour to cells", 
        "climb_max": "Maximum height between grid cells the agent can climb", 
        "cell_height": "Rasterized cell height", 
        "edge_max_len": "Maximum contour edge length", 
        "cell_size": "Rasterized cell size", 
        "agent_height": "Minimum height where the agent can still walk", 
        "slope_max": "Maximum walkable slope angle", 
        "sample_dist": "Detail mesh sample spacing", 
        "region_merge_size": "Minimum regions size (smaller regions will be merged)", 
        "verts_per_poly": "Max number of vertices per polygon", 
        "region_min_size": "Minimum regions size (smaller regions will be deleted)", 
        "agent_radius": "Radius of the agent"
      }
    }, 
    "NodeSocketInterfaceStandard": {
      "inherits": [
        "NodeSocketInterface"
      ], 
      "fields": {
        "type": "(read-only)    Data type"
      }
    }, 
    "GameStringProperty": {
      "inherits": [
        "GameProperty"
      ], 
      "fields": {
        "value": "Property value"
      }
    }, 
    "LineStyleColorModifier_AlongStroke": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ], 
      "fields": {
        "name": "Name of the modifier", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "color_ramp": "(read-only)    Color ramp used to change line color"
      }
    }, 
    "MeshEdge": {
      "fields": {
        "index": "(read-only)    Index of this edge", 
        "use_seam": "Seam edge for UV unwrapping", 
        "use_edge_sharp": "Sharp edge for the EdgeSplit modifier", 
        "vertices": "Vertex indices", 
        "is_loose": "Loose edge", 
        "bevel_weight": "Weight used by the Bevel modifier", 
        "crease": "Weight used by the Subsurf modifier for creasing"
      }
    }, 
    "CompositorNodeRotate": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "filter_type": "Method to use to filter rotation"
      }
    }, 
    "MaterialTextureSlot": {
      "inherits": [
        "TextureSlot"
      ], 
      "fields": {
        "ambient_factor": "Amount texture affects ambient", 
        "use_map_color_emission": "The texture affects the color of emission", 
        "use_map_reflect": "The texture affects the reflected light's brightness", 
        "specular_color_factor": "Amount texture affects specular color", 
        "reflection_factor": "Amount texture affects brightness of out-scattered light", 
        "normal_factor": "Amount texture affects normal values", 
        "use_map_diffuse": "The texture affects the value of diffuse reflectivity", 
        "use_map_hardness": "The texture affects the hardness value", 
        "use_map_emit": "The texture affects the emit value", 
        "use_map_alpha": "The texture affects the alpha value", 
        "use_map_density": "The texture affects the volume's density", 
        "translucency_factor": "Amount texture affects translucency", 
        "specular_factor": "Amount texture affects specular reflectivity", 
        "hardness_factor": "Amount texture affects hardness", 
        "use_map_emission": "The texture affects the volume's emission", 
        "use_map_color_transmission": "The texture affects the result color after other light has been scattered/absorbed", 
        "use_map_scatter": "The texture affects the volume's scattering", 
        "reflection_color_factor": "Amount texture affects color of out-scattered light", 
        "use_map_mirror": "The texture affects the mirror color", 
        "use_from_dupli": "Dupli's instanced from verts, faces or particles, inherit texture coordinate from their parent", 
        "bump_method": "Method to use for bump mapping", 
        "emission_color_factor": "Amount texture affects emission color", 
        "diffuse_factor": "Amount texture affects diffuse reflectivity", 
        "use_map_color_reflection": "The texture affects the color of scattered light", 
        "mirror_factor": "Amount texture affects mirror color", 
        "emit_factor": "Amount texture affects emission", 
        "density_factor": "Amount texture affects density", 
        "scattering_factor": "Amount texture affects scattering", 
        "bump_objectspace": "Space to apply bump mapping in", 
        "uv_layer": "UV map to use for mapping with UV texture coordinates", 
        "use": "Enable this material texture slot", 
        "object": "Object to use for mapping with Object texture coordinates", 
        "use_map_specular": "The texture affects the value of specular reflectivity", 
        "use_map_displacement": "Let the texture displace the surface", 
        "diffuse_color_factor": "Amount texture affects diffuse color", 
        "use_map_to_bounds": "Map coordinates in object bounds", 
        "emission_factor": "Amount texture affects emission", 
        "warp_factor": "Amount texture affects texture coordinates of next channels", 
        "use_map_translucency": "The texture affects the translucency value", 
        "normal_map_space": "Set space of normal map image", 
        "use_map_color_spec": "The texture affects the specularity color", 
        "use_map_ambient": "The texture affects the value of ambient", 
        "displacement_factor": "Amount texture displaces the surface", 
        "use_map_warp": "Let the texture warp texture coordinates of next channels", 
        "use_map_raymir": "The texture affects the ray-mirror value", 
        "alpha_factor": "Amount texture affects alpha", 
        "use_map_normal": "The texture affects the rendered normal", 
        "transmission_color_factor": "Amount texture affects result color after light has been scattered/absorbed", 
        "raymir_factor": "Amount texture affects ray mirror", 
        "use_from_original": "Dupli's derive their object coordinates from the original object's transformation", 
        "use_map_color_diffuse": "The texture affects basic color of the material"
      }
    }, 
    "FModifierGenerator": {
      "inherits": [
        "FModifier"
      ], 
      "fields": {
        "poly_order": "The highest power of 'x' for this polynomial (number of coefficients - 1)", 
        "coefficients": "Coefficients for 'x' (starting from lowest power of x^0)", 
        "use_additive": "Values generated by this modifier are applied on top of the existing values instead of overwriting them", 
        "mode": "Type of generator to use"
      }
    }, 
    "CurveMap": {
      "fields": {
        "extend": "Extrapolate the curve or extend it horizontally", 
        "points": "(read-only)"
      }
    }, 
    "MovieTrackingDopesheet": {
      "fields": {
        "show_only_selected": "Only include channels relating to selected objects and data", 
        "show_hidden": "Include channels from objects/bone that aren't visible", 
        "use_invert_sort": "Invert sort order of dopesheet channels", 
        "sort_method": "Method to be used to sort channels in dopesheet view"
      }
    }, 
    "FModifierEnvelopeControlPoint": {
      "fields": {
        "min": "Lower bound of envelope at this control-point", 
        "max": "Upper bound of envelope at this control-point", 
        "frame": "Frame this control-point occurs on"
      }
    }, 
    "ConstraintTarget": {
      "fields": {
        "target": "Target Object"
      }
    }, 
    "Node": {
      "fields": {
        "use_custom_color": "Use custom color for the node", 
        "bl_static_type": "Node type (deprecated, use with care)", 
        "select": "Node selection state", 
        "width": "Width of the node", 
        "width_hidden": "Width of the node in hidden state", 
        "parent": "Parent this node is attached to", 
        "bl_icon": "The node icon", 
        "label": "Optional custom node label", 
        "type": "(read-only)    Node type (deprecated, use bl_static_type or bl_idname for the actual identifier string)", 
        "height": "Height of the node", 
        "inputs": "(read-only)", 
        "color": "Custom color of the node body", 
        "show_texture": "Draw node in viewport textured draw mode", 
        "name": "Unique node identifier", 
        "bl_label": "The node label", 
        "dimensions": "(read-only)    Absolute bounding box dimensions of the node", 
        "internal_links": "(read-only)    Internal input-to-output connections for muting", 
        "outputs": "(read-only)"
      }
    }, 
    "ExplodeModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "show_dead": "Show mesh when particles are dead", 
        "particle_uv": "UV map to change with particle age", 
        "use_size": "Use particle size for the shrapnel", 
        "use_edge_cut": "Cut face edges for nicer shrapnel", 
        "show_unborn": "Show mesh when particles are unborn", 
        "protect": "Clean vertex group edges", 
        "show_alive": "Show mesh when particles are alive"
      }
    }, 
    "UDKObjListPG": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "bselect": "This will be ignore when exported", 
        "otype": "This will be ignore when exported", 
        "bexport": "This will be ignore when exported"
      }
    }, 
    "CompositorNodeMath": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }
    }, 
    "ParticleSettingsTextureSlot": {
      "inherits": [
        "TextureSlot"
      ], 
      "fields": {
        "texture_coords": "Texture coordinates used to map the texture onto the background", 
        "use_map_gravity": "Affect the particle gravity", 
        "uv_layer": "UV map to use for mapping with UV texture coordinates", 
        "object": "Object to use for mapping with Object texture coordinates", 
        "use_map_damp": "Affect the particle velocity damping", 
        "use_map_field": "Affect the particle force fields", 
        "use_map_density": "Affect the density of the particles", 
        "gravity_factor": "Amount texture affects particle gravity", 
        "use_map_rough": "Affect the child rough", 
        "time_factor": "Amount texture affects particle emission time", 
        "use_map_velocity": "Affect the particle initial velocity", 
        "life_factor": "Amount texture affects particle life time", 
        "use_map_clump": "Affect the child clumping", 
        "use_map_time": "Affect the emission time of the particles", 
        "use_map_length": "Affect the child hair length", 
        "length_factor": "Amount texture affects child hair length", 
        "use_map_kink": "Affect the child kink", 
        "use_map_life": "Affect the life time of the particles", 
        "field_factor": "Amount texture affects particle force fields", 
        "damp_factor": "Amount texture affects particle damping", 
        "rough_factor": "Amount texture affects child roughness", 
        "velocity_factor": "Amount texture affects particle initial velocity", 
        "kink_factor": "Amount texture affects child kink", 
        "use_map_size": "Affect the particle size", 
        "size_factor": "Amount texture affects physical particle size", 
        "density_factor": "Amount texture affects particle density", 
        "clump_factor": "Amount texture affects child clump"
      }
    }, 
    "PoseBoneConstraints": {
      "fields": {
        "active": "Active PoseChannel constraint"
      }
    }, 
    "ColorManagedInputColorspaceSettings": {
      "fields": {
        "name": "Color space of the image or movie on disk"
      }
    }, 
    "SteeringActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "self_terminated": "Terminate when target is reached", 
        "distance": "Relax distance", 
        "facing_axis": "Axis for automatic facing", 
        "target": "Target object", 
        "acceleration": "Max acceleration", 
        "velocity": "Velocity magnitude", 
        "update_period": "Path update period", 
        "turn_speed": "Max turn speed", 
        "normal_up": "Use normal of the navmesh to set \"UP\" vector", 
        "facing": "Enable automatic facing", 
        "show_visualization": "Enable debug visualization for 'Path following'", 
        "navmesh": "Navigation mesh"
      }
    }, 
    "MovieTrackingTrack": {
      "fields": {
        "use_custom_color": "Use custom color instead of theme-defined", 
        "select_pattern": "Track's pattern area is selected", 
        "average_error": "(read-only)    Average error of re-projection", 
        "select": "Track is selected", 
        "markers": "(read-only)    Collection of markers in track", 
        "use_red_channel": "Use red channel from footage for tracking", 
        "lock": "Track is locked and all changes to it are disabled", 
        "has_bundle": "(read-only)    True if track has a valid bundle", 
        "use_mask": "Use a grease pencil datablock as a mask to use only specified areas of pattern when tracking", 
        "use_grayscale_preview": "Display what the tracking algorithm sees in the preview", 
        "select_search": "Track's search area is selected", 
        "select_anchor": "Track's anchor point is selected", 
        "grease_pencil": "Grease pencil data for this track", 
        "pattern_match": "Track pattern from given frame when tracking marker to next frame", 
        "use_green_channel": "Use green channel from footage for tracking", 
        "hide": "Track is hidden", 
        "color": "Color of the track in the Movie Clip Editor and the 3D viewport after a solve", 
        "correlation_min": "Minimal value of correlation between matched pattern and reference that is still treated as successful tracking", 
        "name": "Unique name of track", 
        "bundle": "(read-only)    Position of bundle reconstructed from this track", 
        "frames_limit": "Every tracking cycle, this number of frames are tracked", 
        "margin": "Distance from image boundary at which marker stops tracking", 
        "motion_model": "Default motion model to use for tracking", 
        "use_normalization": "Normalize light intensities while tracking. Slower", 
        "use_brute": "Use a brute-force translation only pre-track before refinement", 
        "use_blue_channel": "Use blue channel from footage for tracking", 
        "use_alpha_preview": "Apply track's mask on displaying preview"
      }
    }, 
    "Constraint": {
      "fields": {
        "error_location": "(read-only)    Amount of residual error in Blender space unit for constraints that work on position", 
        "is_proxy_local": "Constraint was added in this proxy instance (i.e. did not belong to source Armature)", 
        "show_expanded": "Constraint's panel is expanded in UI", 
        "name": "Constraint name", 
        "target_space": "Space that target is evaluated in", 
        "owner_space": "Space that owner is evaluated in", 
        "influence": "Amount of influence constraint will have on the final solution", 
        "active": "Constraint is the one being edited", 
        "error_rotation": "(read-only)    Amount of residual error in radians for constraints that work on orientation", 
        "type": "(read-only)", 
        "mute": "Enable/Disable Constraint", 
        "is_valid": "(read-only)    Constraint has valid settings and can be evaluated"
      }
    }, 
    "BlendDataParticles": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "SpotLamp": {
      "inherits": [
        "ID", 
        "Lamp"
      ], 
      "fields": {
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "use_sphere": "Set light intensity to zero beyond lamp distance", 
        "linear_attenuation": "Linear distance attenuation", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "shadow_ray_samples": "Number of samples taken extra (samples x samples)", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "spot_blend": "The softness of the spotlight edge", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "compression_threshold": "Deep shadow map compression threshold", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "use_halo": "Render spotlight with a volumetric halo", 
        "halo_intensity": "Brightness of the spotlight's halo cone", 
        "quadratic_attenuation": "Quadratic distance attenuation", 
        "use_square": "Cast a square spot light shape", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "halo_step": "Volumetric halo sampling frequency", 
        "falloff_curve": "(read-only)    Custom Lamp Falloff Curve", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "show_cone": "Draw transparent cone in 3D view to visualize which objects are contained in it", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "falloff_type": "Intensity Decay with distance", 
        "spot_size": "Angle of the spotlight beam"
      }
    }, 
    "FluidSimulationModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "settings": "(read-only)    Settings for how this object is used in the fluid simulation"
      }
    }, 
    "MeshTextureFace": {
      "fields": {
        "uv_raw": "Fixed size UV coordinates array"
      }
    }, 
    "TransformConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "map_to_z_from": "The source axis constrained object's Z axis uses", 
        "to_min_x": "Bottom range of X axis destination motion", 
        "from_max_z": "Top range of Z axis source motion", 
        "to_min_z": "Bottom range of Z axis destination motion", 
        "from_max_y": "Top range of Y axis source motion", 
        "to_min_y": "Bottom range of Y axis destination motion", 
        "from_max_x": "Top range of X axis source motion", 
        "map_to_y_from": "The source axis constrained object's Y axis uses", 
        "map_to": "The transformation type to affect of the constrained object", 
        "from_min_z": "Bottom range of Z axis source motion", 
        "target": "Target Object", 
        "to_max_x": "Top range of X axis destination motion", 
        "use_motion_extrapolate": "Extrapolate ranges", 
        "to_max_y": "Top range of Y axis destination motion", 
        "map_to_x_from": "The source axis constrained object's X axis uses", 
        "to_max_z": "Top range of Z axis destination motion", 
        "from_min_y": "Bottom range of Y axis source motion", 
        "from_min_x": "Bottom range of X axis source motion", 
        "map_from": "The transformation type to use from the target"
      }
    }, 
    "ShaderNodeTexCoord": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "from_dupli": "Use the parent of the dupli object if possible"
      }
    }, 
    "SculptToolCapabilities": {
      "fields": {
        "has_accumulate": "(read-only)", 
        "has_secondary_color": "(read-only)", 
        "has_sculpt_plane": "(read-only)", 
        "has_persistence": "(read-only)", 
        "has_jitter": "(read-only)", 
        "has_space_attenuation": "(read-only)", 
        "has_height": "(read-only)", 
        "has_random_texture_angle": "(read-only)", 
        "has_pinch_factor": "(read-only)", 
        "has_smooth_stroke": "(read-only)", 
        "has_strength": "(read-only)", 
        "has_auto_smooth": "(read-only)", 
        "has_plane_offset": "(read-only)", 
        "has_normal_weight": "(read-only)"
      }
    }, 
    "ObjectConstraints": {
      "fields": {
        "active": "Active Object constraint"
      }
    }, 
    "BlendDataCurves": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "ShrinkwrapModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "use_negative_direction": "Allow vertices to move in the negative direction of axis", 
        "subsurf_levels": "Number of subdivisions that must be performed before extracting vertices' positions and normals", 
        "target": "Mesh target to shrink to", 
        "cull_face": "Stop vertices from projecting to a face on the target when facing towards/away", 
        "auxiliary_target": "Additional mesh target to shrink to", 
        "project_limit": "Limit the distance used for projection (zero disables)", 
        "offset": "Distance to keep from the target", 
        "vertex_group": "Vertex group name", 
        "use_positive_direction": "Allow vertices to move in the positive direction of axis"
      }
    }, 
    "GameFloatProperty": {
      "inherits": [
        "GameProperty"
      ], 
      "fields": {
        "value": "Property value"
      }
    }, 
    "Action": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "pose_markers": "(read-only)    Markers specific to this action, for labeling poses", 
        "id_root": "Type of ID block that action can be used on - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING", 
        "fcurves": "(read-only)    The individual F-Curves that make up the action", 
        "frame_range": "(read-only)    The final frame range of all F-Curves within this action", 
        "groups": "(read-only)    Convenient groupings of F-Curves"
      }
    }, 
    "CompositorNodeTree": {
      "inherits": [
        "ID", 
        "NodeTree"
      ], 
      "fields": {
        "edit_quality": "Quality when editing", 
        "chunk_size": "Max size of a tile (smaller values gives better distribution of multiple threads, but more overhead)", 
        "use_opencl": "Enable GPU calculations", 
        "render_quality": "Quality when rendering", 
        "use_viewer_border": "Use boundaries for viewer nodes and composite backdrop", 
        "use_two_pass": "Use two pass execution during editing: first calculate fast nodes, second pass calculate all nodes", 
        "use_groupnode_buffer": "Enable buffering of group nodes"
      }
    }, 
    "MeshDeformModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "precision": "The grid size for binding", 
        "is_bound": "(read-only)    Whether geometry has been bound to control cage", 
        "invert_vertex_group": "Invert vertex group influence", 
        "use_dynamic_bind": "Recompute binding dynamically on top of other deformers (slower and more memory consuming)", 
        "object": "Mesh object to deform with", 
        "vertex_group": "Vertex group name"
      }
    }, 
    "Header": {
      "fields": {
        "bl_idname": "If this is set, the header gets a custom ID, otherwise it takes the name of the class used to define the panel; for example, if the class name is \"OBJECT_HT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_HT_hello\"", 
        "bl_space_type": "The space where the header is going to be used in", 
        "layout": "(read-only)    Structure of the header in the UI"
      }
    }, 
    "WindowManager": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "addon_search": "Search within the selected filter", 
        "addon_filter": "Filter addons by category", 
        "windows": "(read-only)    Open windows", 
        "operators": "(read-only)    Operator registry", 
        "keyconfigs": "(read-only)    Registered key configurations", 
        "addon_support": "Display support level"
      }
    }, 
    "NodeSocketInt": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "BlendDataSounds": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "MovieTrackingPlaneTracks": {
      "fields": {
        "active": "Active plane track in this tracking data object"
      }
    }, 
    "BlendTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "progression": "Style of the color blending", 
        "use_flip_axis": "Flip the texture's X and Y axis"
      }
    }, 
    "NodeSocketInterfaceVectorEuler": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "TextureNodeBricks": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ], 
      "fields": {
        "offset_frequency": "Offset every N rows", 
        "squash_frequency": "Squash every N rows"
      }
    }, 
    "MovieClip": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "use_proxy": "Use a preview proxy and/or timecode index for this clip", 
        "filepath": "Filename of the movie or sequence file", 
        "frame_start": "Global scene frame number at which this movie starts playing (affects all data associated with a clip)", 
        "tracking": "(read-only)", 
        "source": "(read-only)    Where the clip comes from", 
        "proxy": "(read-only)", 
        "frame_duration": "(read-only)    Detected duration of movie clip in frames", 
        "frame_offset": "Offset of footage first frame relative to it's file name (affects only how footage is loading, does not change data associated with a clip)", 
        "display_aspect": "Display Aspect for this clip, does not affect rendering", 
        "use_proxy_custom_directory": "Create proxy images in a custom directory (default is movie location)", 
        "grease_pencil": "Grease pencil data for this movie clip", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "size": "(read-only)    Width and height in pixels, zero when image data cant be loaded"
      }
    }, 
    "CompositorNodeGlare": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "angle_offset": "Streak angle offset", 
        "fade": "Streak fade-out factor", 
        "color_modulation": "Amount of Color Modulation, modulates colors of streaks and ghosts for a spectral dispersion effect", 
        "use_rotate_45": "Simple star filter: add 45 degree rotation offset", 
        "streaks": "Total number of streaks", 
        "quality": "If not set to high quality, the effect will be applied to a low-res copy of the source image", 
        "mix": "-1 is original image only, 0 is exact 50/50 mix, 1 is processed image only", 
        "threshold": "The glare filter will only be applied to pixels brighter than this value", 
        "size": "Glow/glare size (not actual size; relative to initial size of bright area of pixels)"
      }
    }, 
    "FModifierCycles": {
      "inherits": [
        "FModifier"
      ], 
      "fields": {
        "cycles_after": "Maximum number of cycles to allow after last keyframe (0 = infinite)", 
        "cycles_before": "Maximum number of cycles to allow before first keyframe (0 = infinite)", 
        "mode_before": "Cycling mode to use before first keyframe", 
        "mode_after": "Cycling mode to use after last keyframe"
      }
    }, 
    "TimelineMarker": {
      "fields": {
        "frame": "The frame on which the timeline marker appears", 
        "select": "Marker selection state", 
        "camera": "Camera this timeline sets to active"
      }
    }, 
    "NodeSocketInterfaceIntFactor": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "Filter2DActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "motion_blur_factor": "Motion blur factor", 
        "filter_pass": "Set filter order", 
        "use_motion_blur": "Enable/Disable Motion Blur"
      }
    }, 
    "LimitRotationConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "use_limit_z": "Use the minimum Z value", 
        "use_transform_limit": "Transforms are affected by this constraint as well", 
        "use_limit_x": "Use the minimum X value", 
        "use_limit_y": "Use the minimum Y value", 
        "min_x": "Lowest X value to allow", 
        "max_z": "Highest Z value to allow", 
        "max_y": "Highest Y value to allow", 
        "max_x": "Highest X value to allow", 
        "min_z": "Lowest Z value to allow", 
        "min_y": "Lowest Y value to allow"
      }
    }, 
    "CompositorNodeTranslate": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "wrap_axis": "Wrap image on a specific axis", 
        "use_relative": "Use relative (percent) values to define blur radius"
      }
    }, 
    "MetaSequence": {
      "inherits": [
        "Sequence"
      ], 
      "fields": {
        "use_deinterlace": "For video movies to remove fields", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "sequences": "(read-only)", 
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "crop": "(read-only)", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_flip_y": "Flip on the Y axis", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_flip_x": "Flip on the X axis", 
        "use_float": "Convert input to float data", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "proxy": "(read-only)", 
        "use_translation": "Translate image before processing", 
        "use_reverse_frames": "Reverse frame order", 
        "strobe": "Only display every nth frame"
      }
    }, 
    "VertexGroup": {
      "fields": {
        "lock_weight": "Maintain the relative weights for the group", 
        "index": "(read-only)    Index number of the vertex group", 
        "name": "Vertex group name"
      }
    }, 
    "PointerProperty": {
      "inherits": [
        "Property"
      ], 
      "fields": {
        "fixed_type": "(read-only)    Fixed pointer type, empty if variable type"
      }
    }, 
    "SPHFluidSettings": {
      "fields": {
        "use_initial_rest_length": "Use the initial length as spring rest length instead of 2 * particle size", 
        "stiff_viscosity": "Creates viscosity for expanding fluid", 
        "yield_ratio": "How much the spring has to be stretched/compressed in order to change it's rest length", 
        "fluid_radius": "Fluid interaction radius", 
        "factor_rest_length": "Spring rest length is a factor of 2 * particle size", 
        "spring_force": "Spring force", 
        "stiffness": "How incompressible the fluid is (speed of sound)", 
        "use_viscoelastic_springs": "Use viscoelastic springs instead of Hooke's springs", 
        "factor_repulsion": "Repulsion is a factor of stiffness", 
        "spring_frames": "Create springs for this number of frames since particles birth (0 is always)", 
        "linear_viscosity": "Linear viscosity", 
        "buoyancy": "Artificial buoyancy force in negative gravity direction based on pressure differences inside the fluid", 
        "use_factor_density": "Density is calculated as a factor of default density (depends on particle size)", 
        "factor_radius": "Interaction radius is a factor of 4 * particle size", 
        "rest_length": "Spring rest length (factor of particle radius)", 
        "solver": "The code used to calculate internal forces on particles", 
        "factor_stiff_viscosity": "Stiff viscosity is a factor of normal viscosity", 
        "repulsion": "How strongly the fluid tries to keep from clustering (factor of stiffness)", 
        "plasticity": "How much the spring rest length can change after the elastic limit is crossed", 
        "rest_density": "Fluid rest density"
      }
    }, 
    "LineStyleAlphaModifier_AlongStroke": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ], 
      "fields": {
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "name": "Name of the modifier", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "mapping": "Select the mapping type", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded"
      }
    }, 
    "LineStyleGeometryModifier_TipRemover": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "tip_length": "Length of tips to be removed", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded"
      }
    }, 
    "WoodTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "noise_scale": "Scaling for noise input", 
        "noise_basis": "Noise basis used for turbulence", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "turbulence": "Turbulence of the bandnoise and ringnoise types"
      }
    }, 
    "StateActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "operation": "Select the bit operation on object state mask"
      }
    }, 
    "ShrinkwrapConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "project_axis": "Axis constrain to", 
        "distance": "Distance to Target", 
        "target": "Target Object", 
        "project_limit": "Limit the distance used for projection (zero disables)", 
        "project_axis_space": "Space for the projection axis", 
        "shrinkwrap_type": "Select type of shrinkwrap algorithm for target position"
      }
    }, 
    "SceneRenderLayer": {
      "fields": {
        "use_ztransp": "Render Z-Transparent faces in this Layer (on top of Solid and Halos)", 
        "use_pass_glossy_indirect": "Deliver glossy indirect pass", 
        "light_override": "Group to override all other lights in this render layer", 
        "layers": "Scene layers included in this render layer", 
        "use_pass_refraction": "Deliver raytraced refraction pass", 
        "use_pass_combined": "Deliver full combined RGBA buffer", 
        "use_pass_transmission_indirect": "Deliver transmission indirect pass", 
        "exclude_reflection": "Exclude raytraced reflection pass from combined", 
        "use_pass_subsurface_color": "Deliver subsurface color pass", 
        "exclude_refraction": "Exclude raytraced refraction pass from combined", 
        "use_pass_glossy_color": "Deliver glossy color pass", 
        "use_pass_uv": "Deliver texture UV pass", 
        "exclude_ambient_occlusion": "Exclude AO pass from combined", 
        "use_pass_color": "Deliver shade-less color pass", 
        "material_override": "Material to override all other materials in this render layer", 
        "use_pass_normal": "Deliver normal pass", 
        "layers_zmask": "Zmask scene layers for solid faces", 
        "use_pass_shadow": "Deliver shadow pass", 
        "use_pass_ambient_occlusion": "Deliver AO pass", 
        "samples": "Override number of render samples for this render layer, 0 will use the scene setting", 
        "use_freestyle": "Render stylized strokes in this Layer", 
        "exclude_shadow": "Exclude shadow pass from combined", 
        "use_zmask": "Only render what's in front of the solid z values", 
        "exclude_environment": "Exclude environment pass from combined", 
        "layers_exclude": "Exclude scene layers from having any influence", 
        "use_pass_diffuse_direct": "Deliver diffuse direct pass", 
        "use_pass_specular": "Deliver specular pass", 
        "use_pass_diffuse_color": "Deliver diffuse color pass", 
        "use_sky": "Render Sky in this Layer", 
        "use_pass_diffuse_indirect": "Deliver diffuse indirect pass", 
        "use": "Disable or enable the render layer", 
        "exclude_indirect": "Exclude indirect pass from combined", 
        "use_pass_emit": "Deliver emission pass", 
        "use_pass_vector": "Deliver speed vector pass", 
        "use_edge_enhance": "Render Edge-enhance in this Layer (only works for Solid faces)", 
        "name": "Render layer name", 
        "use_pass_reflection": "Deliver raytraced reflection pass", 
        "use_pass_mist": "Deliver mist factor pass (0.0-1.0)", 
        "use_pass_subsurface_indirect": "Deliver subsurface indirect pass", 
        "use_halo": "Render Halos in this Layer (on top of Solid)", 
        "use_pass_glossy_direct": "Deliver glossy direct pass", 
        "use_solid": "Render Solid faces in this Layer", 
        "use_pass_transmission_direct": "Deliver transmission direct pass", 
        "use_pass_indirect": "Deliver indirect lighting pass", 
        "use_pass_z": "Deliver Z values pass", 
        "use_pass_material_index": "Deliver material index pass", 
        "exclude_specular": "Exclude specular pass from combined", 
        "use_all_z": "Fill in Z values for solid faces in invisible layers, for masking", 
        "exclude_emit": "Exclude emission pass from combined", 
        "freestyle_settings": "(read-only)", 
        "use_pass_subsurface_direct": "Deliver subsurface direct pass", 
        "invert_zmask": "For Zmask, only render what is behind solid z values instead of in front", 
        "use_pass_diffuse": "Deliver diffuse pass", 
        "use_strand": "Render Strands in this Layer", 
        "use_pass_object_index": "Deliver object index pass", 
        "use_pass_environment": "Deliver environment lighting pass", 
        "use_pass_transmission_color": "Deliver transmission color pass"
      }
    }, 
    "ThemeFileBrowser": {
      "fields": {
        "space_list": "(read-only)    Settings for space list", 
        "space": "(read-only)    Settings for space"
      }
    }, 
    "NodeSocketInterfaceBool": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "KeyMap": {
      "fields": {
        "is_modal": "(read-only)    Indicates that a keymap is used for translate modal events for an operator", 
        "space_type": "(read-only)    Optional space type keymap is associated with", 
        "is_user_modified": "Keymap is defined by the user", 
        "keymap_items": "(read-only)    Items in the keymap, linking an operator to an input event", 
        "name": "(read-only)    Name of the key map", 
        "show_expanded_items": "Expanded in the user interface", 
        "show_expanded_children": "Children expanded in the user interface", 
        "region_type": "(read-only)    Optional region type keymap is associated with"
      }
    }, 
    "ClothModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "settings": "(read-only)", 
        "collision_settings": "(read-only)", 
        "point_cache": "(read-only)"
      }
    }, 
    "SplinePoint": {
      "fields": {
        "co": "Point coordinates", 
        "weight": "NURBS weight", 
        "hide": "Visibility status", 
        "tilt": "Tilt in 3D View", 
        "select": "Selection status", 
        "weight_softbody": "Softbody goal weight", 
        "radius": "Radius for beveling"
      }
    }, 
    "SpaceView3D": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_camera_path": "Show reconstructed camera path", 
        "layers": "Layers visible in this 3D View", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "show_background_images": "Display reference images behind objects in the 3D View", 
        "grid_subdivisions": "Number of subdivisions between grid lines", 
        "region_quadview": "(read-only)    3D region that defines the quad view settings", 
        "background_images": "(read-only)    List of background images", 
        "tracks_draw_size": "Display size of tracks from reconstructed data", 
        "show_backface_culling": "Use back face culling to hide the back side of faces", 
        "show_bundle_names": "Show names for reconstructed tracks objects", 
        "use_matcap": "Active Objects draw images mapped on normals, enhancing Solid Draw Mode", 
        "current_orientation": "(read-only)    Current transformation orientation", 
        "clip_end": "3D View far clipping distance", 
        "show_floor": "Show the ground plane grid in perspective view", 
        "render_border_max_x": "Maximum X value for the render border", 
        "lock_cursor": "3D View center is locked to the cursor's position", 
        "clip_start": "3D View near clipping distance (perspective view only)", 
        "render_border_max_y": "Maximum Y value for the render border", 
        "show_textured_solid": "Display face-assigned textures in solid view", 
        "local_view": "(read-only)    Display an isolated sub-set of objects, apart from the scene visibility", 
        "show_axis_z": "Show the Z axis line in perspective view", 
        "show_axis_x": "Show the X axis line in perspective view", 
        "show_axis_y": "Show the Y axis line in perspective view", 
        "lens": "Viewport lens angle (mm)", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "show_manipulator": "Use a 3D manipulator widget for controlling transforms", 
        "show_outline_selected": "Show an outline highlight around selected objects in non-wireframe views", 
        "grid_scale": "Distance between 3D View grid lines", 
        "layers_used": "(read-only)    Layers that contain something", 
        "lock_camera": "Enable view navigation within the camera view", 
        "show_occlude_wire": "Use hidden wireframe display", 
        "use_pivot_point_align": "Manipulate center points (object and pose mode only)", 
        "render_border_min_x": "Minimum X value to for the render border", 
        "tracks_draw_type": "Viewport display style for tracks", 
        "render_border_min_y": "Minimum Y value for the render border", 
        "lock_object": "3D View center is locked to this object's position", 
        "show_reconstruction": "Display reconstruction data from active movie clip", 
        "viewport_shade": "Method to display/shade objects in the 3D View", 
        "region_3d": "(read-only)    3D region in this space, in case of quad view the camera region", 
        "use_render_border": "Use a region within the frame size for rendered viewport (when not viewing through the camera)", 
        "camera": "Active camera used in this view (when unlocked from the scene's active camera)", 
        "cursor_location": "3D cursor location for this view (dependent on local view setting)", 
        "grid_lines": "Number of grid lines to display in perspective view", 
        "layers_local_view": "(read-only)    Local view layers visible in this 3D View", 
        "show_relationship_lines": "Show dashed lines indicating parent or constraint relationships", 
        "show_only_render": "Display only objects which will be rendered", 
        "matcap_icon": "Image to use for Material Capture, active objects only", 
        "show_all_objects_origin": "Show the object origin center dot for all (selected and unselected) objects", 
        "transform_orientation": "Transformation orientation", 
        "lock_bone": "3D View center is locked to this bone's position", 
        "use_occlude_geometry": "Limit selection to visible (clipped with depth buffer)", 
        "transform_manipulators": "Transformation manipulators", 
        "lock_camera_and_layers": "Use the scene's active camera and layers in this view, rather than local layers", 
        "grid_scale_unit": "(read-only)    Grid cell size scaled by scene unit system settings"
      }
    }, 
    "ParticleTarget": {
      "fields": {
        "system": "The index of particle system on the target object", 
        "name": "(read-only)    Particle target name", 
        "object": "The object that has the target particle system (empty if same object)", 
        "is_valid": "Keyed particles target is valid"
      }
    }, 
    "TextureNodeCurveTime": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ], 
      "fields": {
        "curve": "(read-only)"
      }
    }, 
    "SpaceFileBrowser": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "params": "(read-only)    Parameters and Settings for the Filebrowser", 
        "active_operator": "(read-only)", 
        "operator": "(read-only)"
      }
    }, 
    "UserSolidLight": {
      "fields": {
        "specular_color": "Color of the light's specular highlight", 
        "diffuse_color": "Diffuse color of the OpenGL light", 
        "direction": "Direction that the OpenGL light is shining", 
        "use": "Enable this OpenGL light in solid draw mode"
      }
    }, 
    "NodeSocketInterfaceFloatTime": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "TransformOrientation": {
      "fields": {
        "name": "Name of the custom transform orientation"
      }
    }, 
    "SpaceProperties": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "texture_context": "Type of texture data to display and edit", 
        "align": "Arrangement of the panels", 
        "context": "Type of active data to display and edit", 
        "use_pin_id": "Use the pinned context", 
        "use_limited_texture_context": "Use the limited version of texture user (for 'old shading' mode)"
      }
    }, 
    "ArmatureActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "weight": "Weight of this constraint", 
        "secondary_target": "Set this object as the secondary target of the constraint (only IK polar target at the moment)", 
        "bone": "Bone on which the constraint is defined", 
        "target": "Set this object as the target of the constraint", 
        "influence": "Influence of this constraint", 
        "constraint": "Name of the constraint to control"
      }
    }, 
    "BoolProperty": {
      "inherits": [
        "Property"
      ], 
      "fields": {
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "default": "(read-only)    Default value for this number", 
        "default_array": "(read-only)    Default value for this array"
      }
    }, 
    "FModifier": {
      "fields": {
        "frame_start": "Frame that modifier's influence starts (if Restrict Frame Range is in use)", 
        "blend_out": "Number of frames from end frame for influence to fade out", 
        "blend_in": "Number of frames from start frame for influence to take effect", 
        "show_expanded": "F-Curve Modifier's panel is expanded in UI", 
        "influence": "Amount of influence F-Curve Modifier will have when not fading in/out", 
        "active": "F-Curve Modifier is the one being edited", 
        "use_influence": "F-Curve Modifier's effects will be tempered by a default factor", 
        "type": "(read-only)    F-Curve Modifier Type", 
        "use_restricted_range": "F-Curve Modifier is only applied for the specified frame range to help mask off effects in order to chain them", 
        "mute": "F-Curve Modifier will not be evaluated", 
        "is_valid": "(read-only)    F-Curve Modifier has invalid settings and will not be evaluated", 
        "frame_end": "Frame that modifier's influence ends (if Restrict Frame Range is in use)"
      }
    }, 
    "BlendDataMaterials": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "ShaderNodeTangent": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "uv_map": "UV Map for tangent generated from UV", 
        "axis": "Axis for radial tangents", 
        "direction_type": "Method to use for the tangent"
      }
    }, 
    "BlendDataActions": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "AreaSpaces": {
      "fields": {
        "active": "(read-only)    Space currently being displayed in this area"
      }
    }, 
    "NodeSocketBool": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "MeshTextureFaceLayer": {
      "fields": {
        "name": "Name of UV map", 
        "active_clone": "Set the map as active for cloning", 
        "data": "(read-only)", 
        "active": "Set the map as active for display and editing", 
        "active_render": "Set the map as active for rendering"
      }
    }, 
    "GameTimerProperty": {
      "inherits": [
        "GameProperty"
      ], 
      "fields": {
        "value": "Property value"
      }
    }, 
    "SpaceNLA": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_seconds": "Show timing in seconds not frames", 
        "auto_snap": "Automatic time snapping settings for transformations", 
        "show_strip_curves": "Show influence F-Curves on strips", 
        "use_realtime_update": "When transforming strips, changes to the animation data are flushed to other views", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "dopesheet": "(read-only)    Settings for filtering animation data"
      }
    }, 
    "Sequence": {
      "fields": {
        "frame_final_duration": "The length of the contents of this strip after the handles are applied", 
        "speed_factor": "Multiply the current speed of the sequence with this number or remap current frame to this frame", 
        "use_linear_modifiers": "Calculate modifiers in linear space instead of sequencer's space", 
        "use_default_fade": "Fade effect using the built-in default (usually make transition as long as effect strip)", 
        "frame_duration": "(read-only)    The length of the contents of this strip before the handles are applied", 
        "lock": "Lock strip so that it can't be transformed", 
        "frame_final_start": "Start frame displayed in the sequence editor after offsets are applied, setting this is equivalent to moving the handle, not the actual start frame", 
        "type": "(read-only)", 
        "modifiers": "(read-only)    Modifiers affecting this strip", 
        "channel": "Y position of the sequence strip", 
        "frame_final_end": "End frame displayed in the sequence editor after offsets are applied"
      }
    }, 
    "BoidRuleAverageSpeed": {
      "inherits": [
        "BoidRule"
      ], 
      "fields": {
        "wander": "How fast velocity's direction is randomized", 
        "level": "How much velocity's z-component is kept constant", 
        "speed": "Percentage of maximum speed"
      }
    }, 
    "KeyingSetPath": {
      "fields": {
        "id": "ID-Block that keyframes for Keying Set should be added to (for Absolute Keying Sets only)", 
        "bl_options": "Keying set options", 
        "group_method": "Method used to define which Group-name to use", 
        "id_type": "Type of ID-block that can be used", 
        "data_path": "Path to property setting", 
        "use_entire_array": "When an 'array/vector' type is chosen (Location, Rotation, Color, etc.), entire array is to be used", 
        "group": "Name of Action Group to assign setting(s) for this path to", 
        "array_index": "Index to the specific setting if applicable"
      }
    }, 
    "Space": {
      "fields": {
        "type": "(read-only)    Space data type"
      }
    }, 
    "NodeSocketInterfaceColor": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "RigidBodyJointConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "pivot_y": "Offset pivot on Y", 
        "use_angular_limit_y": "Use minimum/maximum Y angular limit", 
        "pivot_z": "Offset pivot on Z", 
        "use_angular_limit_z": "Use minimum/maximum Z angular limit", 
        "pivot_x": "Offset pivot on X", 
        "use_limit_z": "Use minimum/maximum z limit", 
        "child": "Child object", 
        "use_limit_x": "Use minimum/maximum X limit", 
        "use_limit_y": "Use minimum/maximum y limit", 
        "use_linked_collision": "Disable collision between linked bodies", 
        "target": "Target Object", 
        "show_pivot": "Display the pivot point and rotation in 3D view", 
        "axis_z": "Rotate pivot on Z axis", 
        "axis_y": "Rotate pivot on Y axis", 
        "axis_x": "Rotate pivot on X axis", 
        "use_angular_limit_x": "Use minimum/maximum X angular limit"
      }
    }, 
    "SubtractSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "input_2": "Second input for the effect strip", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)"
      }
    }, 
    "GreasePencil": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "use_stroke_endpoints": "Only use the first and last parts of the stroke for snapping", 
        "layers": "(read-only)"
      }
    }, 
    "CyclesCurveSettings": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "use_closetip": "Set tip radius to zero", 
        "root_width": "Strand's width at root", 
        "radius_scale": "Multiplier of width properties", 
        "tip_width": "Strand's width at tip", 
        "shape": "Strand shape parameter"
      }
    }, 
    "BoidRuleAvoid": {
      "inherits": [
        "BoidRule"
      ], 
      "fields": {
        "use_predict": "Predict target movement", 
        "object": "Object to avoid", 
        "fear_factor": "Avoid object if danger from it is above this threshold"
      }
    }, 
    "JoystickSensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "use_all_events": "Triggered by all events on this joystick's current type (axis/button/hat)", 
        "hat_direction": "Hat direction", 
        "joystick_index": "Which joystick to use", 
        "button_number": "Which button to use", 
        "axis_threshold": "Precision of the axis", 
        "single_axis_number": "Single axis (vertical/horizontal/other) to detect", 
        "event_type": "The type of event this joystick sensor is triggered on", 
        "hat_number": "Which hat to use", 
        "axis_direction": "The direction of the axis", 
        "axis_number": "Which axis pair to use, 1 is usually the main direction input"
      }
    }, 
    "DomainFluidSettings": {
      "inherits": [
        "FluidSettings"
      ], 
      "fields": {
        "filepath": "Directory (and/or filename prefix) to store baked fluid simulation files in", 
        "simulation_rate": "Fluid motion rate (0 = stationary, 1 = normal speed)", 
        "use_time_override": "Use a custom start and end time (in seconds) instead of the scene's timeline", 
        "viscosity_exponent": "Negative exponent for the viscosity value (to simplify entering small values e.g. 5*10^-6)", 
        "fluid_mesh_vertices": "(read-only)    Vertices of the fluid mesh generated by simulation", 
        "resolution": "Domain resolution in X,Y and Z direction", 
        "viewport_display_mode": "How to display the mesh in the viewport", 
        "preview_resolution": "Preview resolution in X,Y and Z direction", 
        "partial_slip_factor": "Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip", 
        "threads": "Override number of threads for the simulation, 0 is automatic", 
        "frame_offset": "Offset when reading baked cache", 
        "use_reverse_frames": "Reverse fluid frames", 
        "surface_smooth": "Amount of surface smoothing (a value of 0 is off, 1 is normal smoothing and more than 1 is extra smoothing)", 
        "compressibility": "Allowed compressibility due to gravitational force for standing fluid (directly affects simulation step size)", 
        "simulation_scale": "Size of the simulation domain in meters", 
        "generate_particles": "Amount of particles to generate (0=off, 1=normal, >1=more)", 
        "tracer_particles": "Number of tracer particles to generate", 
        "render_display_mode": "How to display the mesh for rendering", 
        "viscosity_base": "Viscosity setting: value that is multiplied by 10 to the power of (exponent*-1)", 
        "use_speed_vectors": "Generate speed vectors for vector blur", 
        "memory_estimate": "(read-only)    Estimated amount of memory needed for baking the domain", 
        "end_time": "Simulation time of the last blender frame (in seconds)", 
        "surface_subdivisions": "Number of isosurface subdivisions (this is necessary for the inclusion of particles into the surface generation - WARNING: can lead to longer computation times !)", 
        "start_time": "Simulation time of the first blender frame (in seconds)", 
        "use_surface_noobs": "Removes the air gap between fluid surface and obstacles - WARNING: Can result in a dissolving surface in other areas", 
        "grid_levels": "Number of coarsened grids to use (-1 for automatic)", 
        "gravity": "Gravity in X, Y and Z direction"
      }
    }, 
    "ParticleDupliWeight": {
      "fields": {
        "count": "The number of times this object is repeated with respect to other objects", 
        "name": "(read-only)    Particle dupliobject name"
      }
    }, 
    "ActionActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "frame_blend_in": "Number of frames of motion blending", 
        "blend_mode": "How this layer is blended with previous layers", 
        "layer": "The animation layer to play the action on", 
        "layer_weight": "How much of the previous layer to blend into this one", 
        "use_additive": "Action is added to the current loc/rot/scale in global or local coordinate according to Local flag", 
        "use_continue_last_frame": "Restore last frame when switching on/off, otherwise play from the start each time", 
        "property": "Use this property to define the Action position", 
        "play_mode": "Action playback type", 
        "priority": "Execution priority - lower numbers will override actions with higher numbers (with 2 or more actions at once, the overriding channels must be lower in the stack)", 
        "frame_property": "Assign the action's current frame number to this property", 
        "use_force": "Apply Action as a global or local force depending on the local option (dynamic objects only)", 
        "use_local": "Let the Action act in local coordinates, used in Force and Add mode", 
        "apply_to_children": "Update Action on all children Objects as well"
      }
    }, 
    "DriverTarget": {
      "fields": {
        "id": "ID-block that the specific property used can be found from (id_type property must be set first)", 
        "bone_target": "Name of PoseBone to use as target", 
        "transform_space": "Space in which transforms are used", 
        "id_type": "Type of ID-block that can be used", 
        "transform_type": "Driver variable type", 
        "data_path": "RNA Path (from ID-block) to property used"
      }
    }, 
    "GameSoftBodySettings": {
      "fields": {
        "use_shape_match": "Enable soft body shape matching goal", 
        "shape_threshold": "Shape matching threshold", 
        "use_cluster_rigid_to_softbody": "Enable cluster collision between soft and rigid body", 
        "use_cluster_soft_to_softbody": "Enable cluster collision between soft and soft body", 
        "linear_stiffness": "Linear stiffness of the soft body links", 
        "dynamic_friction": "Dynamic Friction", 
        "cluster_iterations": "Number of cluster iterations", 
        "location_iterations": "Position solver iterations", 
        "weld_threshold": "Welding threshold: distance between nearby vertices to be considered equal => set to 0.0 to disable welding test and speed up scene loading (ok if the mesh has no duplicates)", 
        "use_bending_constraints": "Enable bending constraints", 
        "collision_margin": "Collision margin for soft body. Small value makes the algorithm unstable"
      }
    }, 
    "MusgraveTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "noise_intensity": "Intensity of the noise", 
        "dimension_max": "Highest fractal dimension", 
        "musgrave_type": "Fractal noise algorithm", 
        "noise_scale": "Scaling for noise input", 
        "noise_basis": "Noise basis used for turbulence", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "lacunarity": "Gap between successive frequencies", 
        "octaves": "Number of frequencies used", 
        "offset": "The fractal offset", 
        "gain": "The gain multiplier"
      }
    }, 
    "NodeSocketFloat": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "SmokeFlowSettings": {
      "fields": {
        "use_absolute": "Only allow given density value in emitter area", 
        "use_texture": "Use a texture to control emission strength", 
        "texture_size": "Size of texture mapping", 
        "smoke_flow_source": "Change how smoke is emitted", 
        "texture_map_type": "Texture mapping type", 
        "texture_offset": "Z-offset of texture mapping", 
        "uv_layer": "UV map name", 
        "noise_texture": "Texture that controls emission strength", 
        "surface_distance": "Maximum distance from mesh surface to emit smoke", 
        "density_vertex_group": "Name of vertex group which determines surface emission rate", 
        "velocity_random": "Amount of random velocity", 
        "use_particle_size": "Set particle size in simulation cells or use nearest cell", 
        "temperature": "Temperature difference to ambient temperature", 
        "particle_system": "Particle systems emitted from the object", 
        "volume_density": "Factor for smoke emitted from inside the mesh volume", 
        "velocity_factor": "Multiplier of source velocity passed to smoke", 
        "smoke_color": "Color of smoke", 
        "subframes": "Number of additional samples to take between frames to improve quality of fast moving flows", 
        "velocity_normal": "Amount of normal directional velocity", 
        "use_initial_velocity": "Smoke has some initial velocity when it is emitted", 
        "smoke_flow_type": "Change how flow affects the simulation", 
        "particle_size": "Particle size in simulation cells"
      }
    }, 
    "ClothSettings": {
      "fields": {
        "vel_damping": "Damp velocity to help cloth reach the resting position faster (1.0 = no damping, 0.0 = fully dampened)", 
        "pre_roll": "Start simulation a number of frames earlier to let the cloth settle in", 
        "goal_min": "Goal minimum, vertex group weights are scaled to match this range", 
        "vertex_group_structural_stiffness": "Vertex group for fine control over structural stiffness", 
        "goal_spring": "Goal (vertex target position) spring stiffness", 
        "use_stiffness_scale": "If enabled, stiffness can be scaled along a weight painted vertex group", 
        "spring_damping": "Damping of cloth velocity (higher = more smooth, less jiggling)", 
        "bending_stiffness_max": "Maximum bending stiffness value", 
        "goal_max": "Goal maximum, vertex group weights are scaled to match this range", 
        "air_damping": "Air has normally some thickness which slows falling things down", 
        "mass": "Mass of cloth material", 
        "vertex_group_bending": "Vertex group for fine control over bending stiffness", 
        "rest_shape_key": "Shape key to use the rest spring lengths from", 
        "vertex_group_mass": "Vertex Group for pinning of vertices", 
        "goal_friction": "Goal (vertex target position) friction", 
        "pin_stiffness": "Pin (vertex target position) spring stiffness", 
        "goal_default": "Default Goal (vertex target position) value, when no Vertex Group used", 
        "use_pin_cloth": "Enable pinning of cloth vertices to other objects/positions", 
        "bending_stiffness": "Wrinkle coefficient (higher = less smaller but more big wrinkles)", 
        "quality": "Quality of the simulation in steps per frame (higher is better quality but slower)", 
        "structural_stiffness": "Overall stiffness of structure", 
        "structural_stiffness_max": "Maximum structural stiffness value", 
        "effector_weights": "(read-only)", 
        "gravity": "Gravity or external force vector"
      }
    }, 
    "BlendDataMetaBalls": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "CrossSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "input_2": "Second input for the effect strip", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)"
      }
    }, 
    "GreasePencilLayers": {
      "fields": {
        "active": "Active grease pencil layer"
      }
    }, 
    "Sensor": {
      "fields": {
        "invert": "Invert the level(output) of this sensor", 
        "use_level": "Level detector, trigger controllers of new states (only applicable upon logic state transition)", 
        "controllers": "(read-only)    The list containing the controllers connected to the sensor", 
        "use_tap": "Trigger controllers only for an instant, even while the sensor remains true", 
        "pin": "Display when not linked to a visible states controller", 
        "show_expanded": "Set sensor expanded in the user interface", 
        "name": "Sensor name", 
        "frequency": "Delay between repeated pulses(in logic tics, 0=no delay)", 
        "use_pulse_false_level": "Activate FALSE level triggering (pulse mode)", 
        "use_pulse_true_level": "Activate TRUE level triggering (pulse mode)"
      }
    }, 
    "CompositorNodeDilateErode": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "distance": "Distance to grow/shrink (number of iterations)", 
        "edge": "Edge to inset", 
        "falloff": "Falloff type the feather", 
        "mode": "Growing/shrinking mode"
      }
    }, 
    "CompositorNodeViewer": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_alpha": "Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)", 
        "tile_order": "Tile order"
      }
    }, 
    "Struct": {
      "fields": {
        "functions": "(read-only)", 
        "nested": "(read-only)    Struct in which this struct is always nested, and to which it logically belongs", 
        "description": "(read-only)    Description of the Struct's purpose", 
        "name": "(read-only)    Human readable name", 
        "name_property": "(read-only)    Property that gives the name of the struct", 
        "base": "(read-only)    Struct definition this is derived from", 
        "translation_context": "(read-only)    Translation context of the struct's name", 
        "properties": "(read-only)    Properties in the struct", 
        "identifier": "(read-only)    Unique name used in the code and scripting"
      }
    }, 
    "CyclesVisibilitySettings": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "glossy": "Object visibility for glossy reflection rays", 
        "shadow": "Object visibility for shadow rays", 
        "camera": "Object visibility for camera rays", 
        "diffuse": "Object visibility for diffuse reflection rays", 
        "transmission": "Object visibility for transmission rays"
      }
    }, 
    "SubsurfModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "levels": "Number of subdivisions to perform", 
        "show_only_control_edges": "Skip drawing/rendering of interior subdivided edges", 
        "subdivision_type": "Select type of subdivision algorithm", 
        "render_levels": "Number of subdivisions to perform when rendering", 
        "use_subsurf_uv": "Use subsurf to subdivide UVs"
      }
    }, 
    "LineStyleAlphaModifier_DistanceFromObject": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ], 
      "fields": {
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "name": "Name of the modifier", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "target": "Target object from which the distance is measured", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "mapping": "Select the mapping type", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "range_max": "Upper bound of the input range the mapping is applied"
      }
    }, 
    "TextureNodeTexture": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ], 
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }
    }, 
    "SoftBodyModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "settings": "(read-only)", 
        "point_cache": "(read-only)"
      }
    }, 
    "ArmatureEditBones": {
      "fields": {
        "active": "Armatures active edit bone"
      }
    }, 
    "OceanTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "ocean": "(read-only)    The ocean data associated with this texture"
      }
    }, 
    "ShaderNodeTexBrick": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }
    }, 
    "CyclesWorldSettings": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "sample_map_resolution": "Importance map size is resolution x resolution; higher values potentially produce less noise, at the cost of memory and speed", 
        "samples": "Number of light samples to render for each AA sample", 
        "sample_as_light": "Use multiple importance sampling for the environment, enabling for non-solid colors is recommended"
      }
    }, 
    "GPencilFrame": {
      "fields": {
        "select": "Frame is selected for editing in the Dope Sheet", 
        "frame_number": "The frame on which this sketch appears", 
        "is_edited": "Frame is being edited (painted on)", 
        "strokes": "(read-only)    Freehand curves defining the sketch on this frame"
      }
    }, 
    "ThemeInfo": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "SequenceElement": {
      "fields": {
        "orig_width": "(read-only)    Original image width", 
        "orig_height": "(read-only)    Original image height"
      }
    }, 
    "ArmatureModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "use_deform_preserve_volume": "Deform rotation interpolation with quaternions", 
        "use_multi_modifier": "Use same input as previous modifier, and mix results using overall vgroup", 
        "use_bone_envelopes": "Bind Bone envelopes to armature modifier", 
        "invert_vertex_group": "Invert vertex group influence", 
        "use_vertex_groups": "Bind vertex groups to armature modifier", 
        "object": "Armature object to deform with", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }
    }, 
    "Brush": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "curve": "(read-only)    Editable falloff curve", 
        "use_space_attenuation": "Automatically adjust strength to give consistent results for different spacings", 
        "plane_trim": "If a vertex is further away from offset plane than this, then it is not affected", 
        "use_accumulate": "Accumulate stroke daubs on top of each other", 
        "use_offset_pressure": "Enable tablet pressure sensitivity for offset", 
        "use_rake": "Rotate the brush texture to match the stroke direction", 
        "sculpt_capabilities": "(read-only)    Brush's capabilities in sculpt mode", 
        "use_relative_jitter": "Jittering happens in screen space, not relative to brush size", 
        "use_plane_trim": "Enable Plane Trim", 
        "use_edge_to_edge": "Drag anchor brush from edge-to-edge", 
        "use_inverse_smooth_pressure": "Lighter pressure causes more smoothing to be applied", 
        "texture_sample_bias": "Value added to texture samples", 
        "crease_pinch_factor": "How much the crease brush pinches", 
        "use_pressure_spacing": "Enable tablet pressure sensitivity for spacing", 
        "brush_capabilities": "(read-only)    Brush's capabilities", 
        "height": "Affectable height of brush (layer height for layer tool, i.e.)", 
        "texture_slot": "(read-only)", 
        "use_secondary_overlay": "Show texture in viewport", 
        "normal_weight": "How much grab will pull vertexes out of surface during a grab", 
        "stencil_pos": "Position of stencil in viewport", 
        "blend": "Brush blending mode", 
        "use_persistent": "Sculpt on a persistent layer of the mesh", 
        "use_smooth_stroke": "Brush lags behind mouse and follows a smoother path", 
        "use_airbrush": "Keep applying paint effect while holding mouse (spray)", 
        "use_space": "Limit brush application to the distance specified by spacing", 
        "use_cursor_overlay_override": "Don't show overlay during a stroke", 
        "use_wrap": "Enable torus wrapping while painting", 
        "cursor_color_subtract": "Color of cursor when subtracting", 
        "use_custom_icon": "Set the brush icon from an image file", 
        "use_paint_image": "Use this brush in texture paint mode", 
        "jitter_absolute": "Jitter the position of the brush in pixels while painting", 
        "mask_stencil_pos": "Position of mask stencil in viewport", 
        "size": "Radius of the brush in pixels", 
        "cursor_color_add": "Color of cursor when adding", 
        "use_random_rotation": "Rotate the brush texture at random", 
        "use_primary_overlay": "Show texture in viewport", 
        "jitter": "Jitter the position of the brush while painting", 
        "mask_texture_slot": "(read-only)", 
        "icon_filepath": "File path to brush icon", 
        "weight": "Vertex weight when brush is applied", 
        "stencil_dimension": "Dimensions of stencil in viewport", 
        "unprojected_radius": "Radius of brush in Blender units", 
        "use_original_normal": "When locked keep using normal of surface where stroke was initiated", 
        "spacing": "Spacing between brush daubs as a percentage of brush diameter", 
        "use_alpha": "When this is disabled, lock alpha while painting", 
        "use_adaptive_space": "Space daubs according to surface orientation instead of screen space", 
        "smooth_stroke_factor": "Higher values give a smoother stroke", 
        "rate": "Interval between paints for Airbrush", 
        "plane_offset": "Adjust plane on which the brush acts towards or away from the object surface", 
        "clone_image": "Image for clone tool", 
        "use_secondary_overlay_override": "Don't show overlay during a stroke", 
        "clone_alpha": "Opacity of clone image display", 
        "auto_smooth_factor": "Amount of smoothing to automatically apply to each stroke", 
        "use_pressure_jitter": "Enable tablet pressure sensitivity for jitter", 
        "use_anchor": "Keep the brush anchored to the initial location", 
        "use_paint_sculpt": "Use this brush in sculpt mode", 
        "use_paint_vertex": "Use this brush in vertex paint mode", 
        "use_cursor_overlay": "Show cursor in viewport", 
        "use_pressure_strength": "Enable tablet pressure sensitivity for strength", 
        "strength": "How powerful the effect of the brush is when applied", 
        "use_frontface": "Brush only affects vertexes that face the viewer", 
        "use_locked_size": "When locked brush stays same size relative to object; when unlocked brush size is given in pixels", 
        "use_restore_mesh": "Allow a single dot to be carefully positioned", 
        "use_pressure_size": "Enable tablet pressure sensitivity for size", 
        "vertex_tool": "Brush blending mode", 
        "mask_stencil_dimension": "Dimensions of mask stencil in viewport", 
        "smooth_stroke_radius": "Minimum distance from last point before stroke continues", 
        "use_primary_overlay_override": "Don't show overlay during a stroke", 
        "use_paint_weight": "Use this brush in weight paint mode"
      }
    }, 
    "LineStyleAlphaModifier_DistanceFromCamera": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ], 
      "fields": {
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "name": "Name of the modifier", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "mapping": "Select the mapping type", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "range_max": "Upper bound of the input range the mapping is applied"
      }
    }, 
    "SceneBases": {
      "fields": {
        "active": "Active object base in the scene"
      }
    }, 
    "MaskSplinePoint": {
      "fields": {
        "feather_points": "(read-only)    Points defining feather", 
        "co": "Coordinates of the control point", 
        "select": "Selection status", 
        "parent": "(read-only)", 
        "handle_left": "Coordinates of the first handle", 
        "handle_type": "Handle type", 
        "handle_right": "Coordinates of the second handle"
      }
    }, 
    "Region": {
      "fields": {
        "id": "(read-only)    Unique ID for this region", 
        "height": "(read-only)    Region height", 
        "view2d": "(read-only)    2D view of the region", 
        "width": "(read-only)    Region width", 
        "type": "(read-only)    Type of this region", 
        "y": "(read-only)    The window relative horizontal location of the region", 
        "x": "(read-only)    The window relative vertical location of the region"
      }
    }, 
    "ThemeImageEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ShaderNodeRGBCurve": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "mapping": "(read-only)"
      }
    }, 
    "ShaderNodeTexEnvironment": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "color_space": "Image file color space", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "projection": "Projection of the input image", 
        "color_mapping": "(read-only)    Color mapping settings"
      }
    }, 
    "BuildModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "frame_start": "Start frame of the effect", 
        "seed": "Seed for random if used", 
        "frame_duration": "Total time the build effect requires", 
        "use_random_order": "Randomize the faces or edges during build"
      }
    }, 
    "ParticleBrush": {
      "fields": {
        "curve": "(read-only)", 
        "count": "Particle count", 
        "use_puff_volume": "Apply puff to unselected end-points (helps maintain hair volume when puffing root)", 
        "strength": "Brush strength", 
        "steps": "Brush steps", 
        "size": "Radius of the brush in pixels"
      }
    }, 
    "MeshTessFace": {
      "fields": {
        "index": "(read-only)    Index of this face", 
        "area": "(read-only)    Read only area of this face", 
        "vertices_raw": "Fixed size vertex indices array", 
        "vertices": "Vertex indices", 
        "normal": "(read-only)    Local space unit length normal vector for this face"
      }
    }, 
    "CompositorNodeOutputFile": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "base_path": "Base output path for the image", 
        "file_slots": "(read-only)", 
        "active_input_index": "Active input index in details view list", 
        "format": "(read-only)", 
        "layer_slots": "(read-only)"
      }
    }, 
    "ThemeProperties": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "NodeSocketInterfaceVectorTranslation": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "CompositorNodeMovieDistortion": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "distortion_type": "Distortion to use to filter image"
      }
    }, 
    "GameActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "filename": "Load this blend file, use the \"//\" prefix for a path relative to the current blend file"
      }
    }, 
    "SceneGameData": {
      "fields": {
        "use_glsl_shaders": "Use shaders for GLSL rendering", 
        "frame_type": "Select the type of Framing you want", 
        "show_framerate_profile": "Show framerate and profiling information while the game runs", 
        "use_activity_culling": "Activity culling is enabled", 
        "obstacle_simulation": "Simulation used for obstacle avoidance in the game engine", 
        "dome_text": "Custom Warp Mesh data file", 
        "deactivation_angular_threshold": "Angular velocity that an object must be below before the deactivation timer can start", 
        "use_frame_rate": "Respect the frame rate rather than rendering as many frames as possible", 
        "activity_culling_box_radius": "Radius of the activity bubble, in Manhattan length (objects outside the box are activity-culled)", 
        "use_glsl_lights": "Use lights for GLSL rendering", 
        "use_auto_start": "Automatically start game at load time", 
        "use_restrict_animation_updates": "Restrict the number of animation updates to the animation FPS (this is better for performance, but can cause issues with smooth playback)", 
        "fps": "Nominal number of game frames per second (physics fixed timestep = 1/fps, independently of actual frame rate)", 
        "use_occlusion_culling": "Use optimized Bullet DBVT tree for view frustum and occlusion culling (more efficient, but it can waste unnecessary CPU if the scene doesn't have occluder objects)", 
        "recast_data": "(read-only)", 
        "resolution_x": "Number of horizontal pixels in the screen", 
        "physics_engine": "Physics engine used for physics simulation in the game engine", 
        "depth": "Display bit depth of full screen display", 
        "resolution_y": "Number of vertical pixels in the screen", 
        "samples": "The number of AA Samples to use for MSAA", 
        "dome_tessellation": "Tessellation level - check the generated mesh in wireframe mode", 
        "vsync": "Change vsync settings", 
        "raster_storage": "Set the storage mode used by the rasterizer", 
        "show_physics_visualization": "Show a visualization of physics bounds and interactions", 
        "deactivation_time": "Amount of time (in seconds) after which objects with a velocity less than the given threshold will deactivate (0.0 means no deactivation)", 
        "show_debug_properties": "Show properties marked for debugging while the game runs", 
        "use_display_lists": "Use display lists to speed up rendering by keeping geometry on the GPU", 
        "show_mouse": "Start player with a visible mouse cursor", 
        "show_fullscreen": "Start player in a new fullscreen display", 
        "stereo_mode": "Stereographic techniques", 
        "use_deprecation_warnings": "Print warnings when using deprecated features in the python API", 
        "use_animation_record": "Record animation to F-Curves", 
        "use_glsl_extra_textures": "Use extra textures like normal or specular maps for GLSL rendering", 
        "use_glsl_nodes": "Use nodes for GLSL rendering", 
        "show_obstacle_simulation": "Enable debug visualization for obstacle simulation", 
        "frequency": "Display clock frequency of fullscreen display", 
        "physics_step_max": "Maximum number of physics step per game frame if graphics slows down the game, higher value allows physics to keep up with realtime", 
        "frame_color": "Set color of the bars", 
        "logic_step_max": "Maximum number of logic frame per game frame if graphics slows down the game, higher value allows better synchronization with physics", 
        "occlusion_culling_resolution": "Size of the occlusion buffer in pixel, use higher value for better precision (slower)", 
        "level_height": "Max difference in heights of obstacles to enable their interaction", 
        "material_mode": "Material mode to use for rendering", 
        "use_glsl_ramps": "Use ramps for GLSL rendering", 
        "physics_step_sub": "Number of simulation substep per physic timestep, higher value give better physics precision", 
        "use_glsl_color_management": "Use color management for GLSL rendering", 
        "use_glsl_shadows": "Use shadows for GLSL rendering", 
        "physics_gravity": "Gravitational constant used for physics simulation in the game engine", 
        "stereo_eye_separation": "Set the distance between the eyes - the camera focal distance/30 should be fine", 
        "use_desktop": "Use the current desktop resolution in fullscreen mode", 
        "deactivation_linear_threshold": "Linear velocity that an object must be below before the deactivation timer can start", 
        "dome_tilt": "Camera rotation in horizontal axis", 
        "dome_mode": "Dome physical configurations", 
        "dome_angle": "Field of View of the Dome - it only works in mode Fisheye and Truncated", 
        "exit_key": "The key that exits the Game Engine", 
        "dome_buffer_resolution": "Buffer Resolution - decrease it to increase speed", 
        "use_material_caching": "Cache materials in the converter (this is faster, but can cause problems with older Singletexture and Multitexture games)"
      }
    }, 
    "IKParam": {
      "fields": {
        "ik_solver": "(read-only)    IK solver for which these parameters are defined"
      }
    }, 
    "MotionPathVert": {
      "fields": {
        "select": "Path point is selected for editing"
      }
    }, 
    "SpaceGraphEditor": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_seconds": "Show timing in seconds not frames", 
        "show_group_colors": "Draw groups and channels with colors matching their corresponding groups", 
        "use_only_selected_keyframe_handles": "Only show and edit handles of selected keyframes", 
        "show_handles": "Show handles of Bezier control points", 
        "use_auto_merge_keyframes": "Automatically merge nearby keyframes", 
        "show_sliders": "Show sliders beside F-Curve channels", 
        "show_cursor": "Show 2D cursor", 
        "use_realtime_update": "When transforming keyframes, changes to the animation data are flushed to other views", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "mode": "Editing context being displayed", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "use_beauty_drawing": "Draw F-Curves using Anti-Aliasing and other fancy effects (disable for better performance)", 
        "auto_snap": "Automatic time snapping settings for transformations", 
        "cursor_position_y": "Graph Editor 2D-Value cursor - Y-Value component", 
        "use_only_selected_curves_handles": "Only keyframes of selected F-Curves are visible and editable", 
        "has_ghost_curves": "Graph Editor instance has some ghost curves stored", 
        "dopesheet": "(read-only)    Settings for filtering animation data"
      }
    }, 
    "BlendDataImages": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "MaterialRaytraceTransparency": {
      "fields": {
        "fresnel_factor": "Blending factor for Fresnel", 
        "ior": "Angular index of refraction for raytraced refraction", 
        "gloss_factor": "The clarity of the refraction. Values < 1.0 give diffuse, blurry refractions", 
        "gloss_threshold": "Threshold for adaptive sampling. If a sample contributes less than this amount (as a percentage), sampling is stopped", 
        "falloff": "Falloff power for transmissivity filter effect (1.0 is linear)", 
        "depth_max": "Maximum depth for light to travel through the transparent material before becoming fully filtered (0.0 is disabled)", 
        "fresnel": "Power of Fresnel for transparency (Ray or ZTransp)", 
        "gloss_samples": "Number of cone samples averaged for blurry refractions", 
        "filter": "Amount to blend in the material's diffuse color in raytraced transparency (simulating absorption)", 
        "depth": "Maximum allowed number of light inter-refractions"
      }
    }, 
    "RenderLayers": {
      "fields": {
        "active_index": "Active index in render layer array", 
        "active": "Active Render Layer"
      }
    }, 
    "EnumProperty": {
      "inherits": [
        "Property"
      ], 
      "fields": {
        "default": "(read-only)    Default value for this enum", 
        "enum_items": "(read-only)    Possible values for the property", 
        "default_flag": "(read-only)    Default value for this enum"
      }
    }, 
    "ShaderNodeMapping": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "min": "Minimum value for clipping", 
        "use_max": "Whether to use maximum clipping value", 
        "max": "Maximum value for clipping", 
        "use_min": "Whether to use minimum clipping value", 
        "vector_type": "Type of vector that the mapping transforms"
      }
    }, 
    "LimitScaleConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "use_transform_limit": "Transforms are affected by this constraint as well", 
        "use_max_z": "Use the maximum Z value", 
        "use_max_y": "Use the maximum Y value", 
        "use_max_x": "Use the maximum X value", 
        "use_min_x": "Use the minimum X value", 
        "min_x": "Lowest X value to allow", 
        "max_z": "Highest Z value to allow", 
        "max_y": "Highest Y value to allow", 
        "max_x": "Highest X value to allow", 
        "use_min_z": "Use the minimum Z value", 
        "min_z": "Lowest Z value to allow", 
        "use_min_y": "Use the minimum Y value", 
        "min_y": "Lowest Y value to allow"
      }
    }, 
    "CompositorNodeBokehBlur": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_variable_size": "Support variable blur per-pixel when using an image for size input", 
        "blur_max": "Blur limit, maximum CoC radius"
      }
    }, 
    "OceanModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "filepath": "Path to a folder to store external baked images", 
        "use_normals": "Output normals for bump mapping - disabling can speed up performance if its not needed", 
        "frame_start": "Start frame of the ocean baking", 
        "bake_foam_fade": "How much foam accumulates over time (baked ocean only)", 
        "wind_velocity": "Wind speed", 
        "resolution": "Resolution of the generated surface", 
        "wave_scale": "Scale of the displacement effect", 
        "time": "Current time of the simulation", 
        "repeat_x": "Repetitions of the generated surface in X", 
        "repeat_y": "Repetitions of the generated surface in Y", 
        "random_seed": "Seed of the random generator", 
        "use_foam": "Generate foam mask as a vertex color channel", 
        "wave_alignment": "How much the waves are aligned to each other", 
        "choppiness": "Choppiness of the wave's crest (adds some horizontal component to the displacement)", 
        "is_cached": "(read-only)    Whether the ocean is using cached data or simulating", 
        "damping": "Damp reflected waves going in opposite direction to the wind", 
        "foam_layer_name": "Name of the vertex color layer used for foam", 
        "depth": "Depth of the solid ground below the water surface", 
        "frame_end": "End frame of the ocean baking", 
        "size": "Surface scale factor (does not affect the height of the waves)", 
        "foam_coverage": "Amount of generated foam", 
        "geometry_mode": "Method of modifying geometry", 
        "spatial_size": "Size of the simulation domain (in meters), and of the generated geometry (in BU)", 
        "wave_scale_min": "Shortest allowed wavelength", 
        "wave_direction": "Main direction of the waves when they are (partially) aligned"
      }
    }, 
    "NodeSocketInterface": {
      "fields": {
        "name": "Socket name", 
        "in_out": "(read-only)    Input or Output type", 
        "identifier": "(read-only)    Unique identifier for mapping sockets"
      }
    }, 
    "GPencilStrokePoint": {
      "fields": {
        "pressure": "Pressure of tablet at point when drawing it"
      }
    }, 
    "UserPreferencesSystem": {
      "fields": {
        "use_translate_new_dataname": "Translate new data names (when adding/creating some)", 
        "window_draw_method": "Drawing method used by the window manager", 
        "use_translate_tooltips": "Translate tooltips", 
        "audio_sample_format": "Audio sample format", 
        "screencast_fps": "Frame rate for the screencast to be played back", 
        "audio_channels": "Audio channel count", 
        "screencast_wait_time": "Time in milliseconds between each frame recorded for screencast", 
        "gl_texture_limit": "Limit the texture size to save graphics memory", 
        "use_translate_interface": "Translate interface", 
        "author": "Name that will be used in exported files when format supports such feature", 
        "use_international_fonts": "Use international fonts", 
        "use_text_antialiasing": "Draw user interface text anti-aliased", 
        "image_draw_method": "Method used for displaying images on the screen", 
        "use_scripts_auto_execute": "Allow any .blend file to run scripts automatically (unsafe with blend files from an untrusted source)", 
        "compute_device_type": "Device to use for computation (rendering with Cycles)", 
        "weight_color_range": "(read-only)    Color range used for weight visualization in weight painting mode", 
        "dpi": "Font size and resolution for display", 
        "use_textured_fonts": "Use textures for drawing international fonts", 
        "audio_mixing_buffer": "Number of samples used by the audio mixing buffer", 
        "multi_sample": "Enable OpenGL multi-sampling, only for systems that support it, requires restart", 
        "prefetch_frames": "Number of frames to render ahead during playback (sequencer only)", 
        "use_weight_color_range": "Enable color range used for weight visualization in weight painting mode", 
        "texture_collection_rate": "Number of seconds between each run of the GL texture garbage collector", 
        "audio_device": "Audio output device", 
        "use_mipmaps": "Scale textures for the 3D View (looks nicer but uses more memory and slows image reloading)", 
        "texture_time_out": "Time since last access of a GL texture in seconds after which it is freed (set to 0 to keep textures allocated)", 
        "color_picker_type": "Different styles of displaying the color picker widget", 
        "gl_clip_alpha": "Clip alpha below this threshold in the 3D textured view", 
        "audio_sample_rate": "Audio sample rate", 
        "use_16bit_textures": "Use 16 bit per component texture for float images", 
        "frame_server_port": "Frameserver Port for Frameserver Rendering", 
        "anisotropic_filter": "Quality of the anisotropic filtering (values greater than 1.0 enable anisotropic filtering)", 
        "memory_cache_limit": "Memory cache limit (in megabytes)", 
        "use_tabs_as_spaces": "Automatically convert all new tabs into spaces for new and loaded text files", 
        "language": "Language used for translation", 
        "use_preview_images": "Allow user to choose any codec (Windows only, might generate instability)", 
        "scrollback": "Maximum number of lines to store for the console buffer", 
        "use_vertex_buffer_objects": "Use Vertex Buffer Objects (or Vertex Arrays, if unsupported) for viewport rendering", 
        "use_gpu_mipmap": "Generate Image Mipmaps on the GPU", 
        "use_region_overlap": "Draw tool/property regions over the main region, when using Triple Buffer", 
        "compute_device": "Device to use for computation", 
        "solid_lights": "(read-only)    Lights user to display objects in solid draw mode"
      }
    }, 
    "UnifiedPaintSettings": {
      "fields": {
        "use_locked_size": "When locked brush stays same size relative to object; when unlocked brush size is given in pixels", 
        "weight": "Weight to assign in vertex groups", 
        "use_pressure_strength": "Enable tablet pressure sensitivity for strength", 
        "unprojected_radius": "Radius of brush in Blender units", 
        "use_pressure_size": "Enable tablet pressure sensitivity for size", 
        "strength": "How powerful the effect of the brush is when applied", 
        "use_unified_size": "Instead of per-brush radius, the radius is shared across brushes", 
        "use_unified_strength": "Instead of per-brush strength, the strength is shared across brushes", 
        "use_unified_weight": "Instead of per-brush weight, the weight is shared across brushes", 
        "size": "Radius of the brush in pixels"
      }
    }, 
    "SpeedControlSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "multiply_speed": "Multiply the resulting speed after the speed factor", 
        "input_1": "First input for the effect strip", 
        "use_as_speed": "Interpret the value as speed instead of a frame number", 
        "scale_to_length": "Scale values from 0.0 to 1.0 to target sequence length", 
        "input_count": "(read-only)"
      }
    }, 
    "Operator": {
      "fields": {
        "bl_options": "Options for this operator type", 
        "has_reports": "(read-only)    Operator has a set of reports (warnings and errors) from last execution", 
        "name": "(read-only)", 
        "layout": "(read-only)", 
        "properties": "(read-only)"
      }
    }, 
    "BoidRuleFight": {
      "inherits": [
        "BoidRule"
      ], 
      "fields": {
        "distance": "Attack boids at max this distance", 
        "flee_distance": "Flee to this distance"
      }
    }, 
    "NodeSocketString": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "ThemeLogicEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "CompositorNodeStabilize": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "filter_type": "Method to use to filter stabilization"
      }
    }, 
    "ThemeStyle": {
      "fields": {
        "panel_title": "(read-only)", 
        "widget": "(read-only)", 
        "widget_label": "(read-only)"
      }
    }, 
    "CompositorNodeMixRGB": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range", 
        "use_alpha": "Include alpha of second input in this operation"
      }
    }, 
    "CollisionSensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "use_pulse": "Change to the set of colliding objects generates pulse", 
        "property": "Only look for objects with this property (blank = all objects)", 
        "use_material": "Toggle collision on material or property", 
        "material": "Only look for objects with this material (blank = all objects)"
      }
    }, 
    "DynamicPaintSurface": {
      "fields": {
        "displace_factor": "Strength of displace when applied to the mesh", 
        "use_output_b": "Save this output layer", 
        "frame_start": "Simulation start frame", 
        "wave_smoothness": "Limit maximum steepness of wave slope between simulation points (use higher values for smoother waves at expense of reduced detail)", 
        "shrink_speed": "How fast shrink effect moves on the canvas surface", 
        "use_output_a": "Save this output layer", 
        "wave_damping": "Wave damping factor", 
        "uv_layer": "UV map name", 
        "use_wave_open_border": "Pass waves through mesh edges", 
        "use_color_preview": "(read-only)    Whether this surface has some color preview for 3D view", 
        "use_incremental_displace": "New displace is added cumulatively on top of existing", 
        "show_preview": "Display surface preview in 3D-views", 
        "drip_acceleration": "How much surface acceleration affects dripping", 
        "use_dry_log": "Use logarithmic drying (makes high values to dry faster than low values)", 
        "brush_influence_scale": "Adjust influence brush objects have on this surface", 
        "wave_timescale": "Wave time scaling factor", 
        "use_spread": "Process spread effect (spread wet paint around surface)", 
        "dry_speed": "Approximately in how many frames should drying happen", 
        "name": "Surface name", 
        "use_antialiasing": "Use 5x multisampling to smooth paint edges", 
        "image_output_path": "Directory to save the textures", 
        "use_shrink": "Process shrink effect (shrink paint areas)", 
        "use_dissolve_log": "Use logarithmic dissolve (makes high values to fade faster than low values)", 
        "surface_type": "Surface Type", 
        "image_resolution": "Output image resolution", 
        "use_premultiply": "Multiply color by alpha (recommended for Blender input)", 
        "drip_velocity": "How much surface velocity affects dripping", 
        "brush_group": "Only use brush objects from this group", 
        "wave_spring": "Spring force that pulls water level back to zero", 
        "is_active": "Toggle whether surface is processed or ignored", 
        "use_drip": "Process drip effect (drip wet paint to gravity direction)", 
        "frame_substeps": "Do extra frames between scene frames to ensure smooth motion", 
        "is_cache_user": "(read-only)", 
        "use_dissolve": "Enable to make surface changes disappear over time", 
        "spread_speed": "How fast spread effect moves on the canvas surface", 
        "color_spread_speed": "How fast colors get mixed within wet paint", 
        "brush_radius_scale": "Adjust radius of proximity brushes or particles for this surface", 
        "wave_speed": "Wave propagation speed", 
        "frame_end": "Simulation end frame", 
        "surface_format": "Surface Format", 
        "output_name_b": "Name used to save output from this surface", 
        "output_name_a": "Name used to save output from this surface", 
        "dissolve_speed": "Approximately in how many frames should dissolve happen", 
        "init_color": "Initial color of the surface", 
        "use_drying": "Enable to make surface wetness dry over time", 
        "effector_weights": "(read-only)", 
        "depth_clamp": "Maximum level of depth intersection in object space (use 0.0 to disable)", 
        "color_dry_threshold": "The wetness level when colors start to shift to the background", 
        "point_cache": "(read-only)"
      }
    }, 
    "Driver": {
      "fields": {
        "expression": "Expression to use for Scripted Expression", 
        "type": "Driver type", 
        "variables": "(read-only)    Properties acting as inputs for this driver", 
        "show_debug_info": "Show intermediate values for the driver calculations to allow debugging of drivers", 
        "is_valid": "Driver could not be evaluated in past, so should be skipped"
      }
    }, 
    "UserPreferencesEdit": {
      "fields": {
        "use_enter_edit_mode": "Enter Edit Mode automatically after adding a new object", 
        "use_global_undo": "Global undo works by keeping a full copy of the file itself in memory, so takes extra memory", 
        "use_keyframe_insert_needed": "Keyframe insertion only when keyframe needed", 
        "grease_pencil_euclidean_distance": "Distance moved by mouse when drawing stroke (in pixels) to include", 
        "object_align": "When adding objects from a 3D View menu, either align them with that view or with the world", 
        "use_duplicate_action": "Causes actions to be duplicated with the object", 
        "use_duplicate_curve": "Causes curve data to be duplicated with the object", 
        "use_drag_immediately": "Moving things with a mouse drag confirms when releasing the button", 
        "undo_steps": "Number of undo steps available (smaller values conserve memory)", 
        "use_duplicate_texture": "Causes texture data to be duplicated with the object", 
        "grease_pencil_eraser_radius": "Radius of eraser 'brush'", 
        "use_auto_keying_warning": "Show warning indicators when transforming objects and bones if auto keying is enabled", 
        "keyframe_new_handle_type": "Handle type for handles of new keyframes", 
        "use_duplicate_fcurve": "Causes F-curve data to be duplicated with the object", 
        "use_grease_pencil_simplify_stroke": "Simplify the final stroke", 
        "use_duplicate_text": "Causes text data to be duplicated with the object", 
        "use_auto_keying": "Automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)", 
        "use_insertkey_xyz_to_rgb": "Color for newly added transformation F-Curves (Location, Rotation, Scale) and also Color is based on the transform axis", 
        "use_duplicate_lamp": "Causes lamp data to be duplicated with the object", 
        "use_visual_keying": "Use Visual keying automatically for constrained objects", 
        "use_duplicate_material": "Causes material data to be duplicated with the object", 
        "sculpt_paint_overlay_color": "Color of texture overlay", 
        "use_duplicate_mesh": "Causes mesh data to be duplicated with the object", 
        "undo_memory_limit": "Maximum memory usage in megabytes (0 means unlimited)", 
        "keyframe_new_interpolation_type": "Interpolation mode used for first keyframe on newly added F-Curves (subsequent keyframes take interpolation from preceding keyframe)", 
        "use_duplicate_metaball": "Causes metaball data to be duplicated with the object", 
        "grease_pencil_manhattan_distance": "Pixels moved by mouse per axis when drawing stroke", 
        "material_link": "Toggle whether the material is linked to object data or the object block", 
        "use_duplicate_particle": "Causes particle systems to be duplicated with the object", 
        "use_negative_frames": "Current frame number can be manually set to a negative value", 
        "use_duplicate_surface": "Causes surface data to be duplicated with the object", 
        "auto_keying_mode": "Mode of automatic keyframe insertion for Objects and Bones (default setting used for new Scenes)", 
        "use_duplicate_armature": "Causes armature data to be duplicated with the object", 
        "use_keyframe_insert_available": "Automatic keyframe insertion in available F-Curves", 
        "fcurve_unselected_alpha": "Amount that unselected F-Curves stand out from the background (Graph Editor)", 
        "use_grease_pencil_smooth_stroke": "Smooth the final stroke"
      }
    }, 
    "LineStyleGeometryModifier_2DTransform": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "pivot": "Pivot of scaling and rotation operations", 
        "pivot_y": "2D Y coordinate of the absolute pivot", 
        "pivot_x": "2D X coordinate of the absolute pivot", 
        "pivot_u": "Pivot in terms of the stroke point parameter u (0 <= u <= 1)", 
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "scale_y": "Scaling factor that is applied along the Y axis", 
        "type": "(read-only)    Type of the modifier", 
        "scale_x": "Scaling factor that is applied along the X axis", 
        "expanded": "True if the modifier tab is expanded", 
        "angle": "Rotation angle"
      }
    }, 
    "LineStyleThicknessModifier_AlongStroke": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ], 
      "fields": {
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping", 
        "name": "Name of the modifier", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "mapping": "Select the mapping type", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded"
      }
    }, 
    "BoidSettings": {
      "fields": {
        "use_climb": "Allow boids to climb goal objects", 
        "air_speed_max": "Maximum speed in air", 
        "air_speed_min": "Minimum speed in air (relative to maximum speed)", 
        "range": "Maximum distance from which a boid can attack", 
        "use_land": "Allow boids to move on land", 
        "states": "(read-only)", 
        "use_flight": "Allow boids to move in air", 
        "aggression": "Boid will fight this times stronger enemy", 
        "height": "Boid height relative to particle size", 
        "land_acc_max": "Maximum acceleration on land (relative to maximum speed)", 
        "air_personal_space": "Radius of boids personal space in air (% of particle size)", 
        "bank": "Amount of rotation around velocity vector on turns", 
        "land_ave_max": "Maximum angular velocity on land (relative to 180 degrees)", 
        "land_personal_space": "Radius of boids personal space on land (% of particle size)", 
        "air_ave_max": "Maximum angular velocity in air (relative to 180 degrees)", 
        "land_smooth": "How smoothly the boids land", 
        "land_stick_force": "How strong a force must be to start effecting a boid on land", 
        "strength": "Maximum caused damage on attack per second", 
        "air_acc_max": "Maximum acceleration in air (relative to maximum speed)", 
        "health": "Initial boid health when born", 
        "land_speed_max": "Maximum speed on land", 
        "land_jump_speed": "Maximum speed for jumping", 
        "active_boid_state": "(read-only)", 
        "accuracy": "Accuracy of attack", 
        "pitch": "Amount of rotation around side vector"
      }
    }, 
    "ThemeOutliner": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "SoundActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "gain_3d_min": "The minimum gain of the sound, no matter how far it is away", 
        "distance_3d_reference": "The distance where the sound has a gain of 1.0", 
        "cone_outer_angle_3d": "The angle of the outer cone", 
        "rolloff_factor_3d": "The influence factor on volume depending on distance", 
        "distance_3d_max": "The maximum distance at which you can hear the sound", 
        "use_sound_3d": "Enable/Disable 3D Sound", 
        "volume": "Initial volume of the sound", 
        "cone_outer_gain_3d": "The gain outside the outer cone (the gain in the outer cone will be interpolated between this value and the normal gain in the inner cone)", 
        "cone_inner_angle_3d": "The angle of the inner cone", 
        "gain_3d_max": "The maximum gain of the sound, no matter how near it is", 
        "pitch": "Pitch of the sound"
      }
    }, 
    "PropertySensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "value_max": "Maximum value in Interval type", 
        "value_min": "Minimum value in Interval type", 
        "value": "Check for this value in types in Equal or Not Equal types", 
        "evaluation_type": "Type of property evaluation"
      }
    }, 
    "CurveMapPoint": {
      "fields": {
        "location": "X/Y coordinates of the curve point", 
        "select": "Selection state of the curve point", 
        "handle_type": "Curve interpolation at this point: Bezier or vector"
      }
    }, 
    "MeshLoopColorLayer": {
      "fields": {
        "name": "Name of Vertex color layer", 
        "data": "(read-only)", 
        "active": "Sets the layer as active for display and editing", 
        "active_render": "Sets the layer as active for rendering"
      }
    }, 
    "ShaderNodeTexChecker": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }
    }, 
    "WorldStarsSettings": {
      "fields": {
        "use_stars": "Enable starfield generation", 
        "distance_min": "Minimum distance to the camera for stars", 
        "average_separation": "Average distance between any two stars", 
        "color_random": "Randomize star colors", 
        "size": "Average screen dimension of stars"
      }
    }, 
    "FModifierLimits": {
      "inherits": [
        "FModifier"
      ], 
      "fields": {
        "use_max_y": "Use the maximum Y value", 
        "use_max_x": "Use the maximum X value", 
        "use_min_x": "Use the minimum X value", 
        "min_x": "Lowest X value to allow", 
        "max_y": "Highest Y value to allow", 
        "max_x": "Highest X value to allow", 
        "use_min_y": "Use the minimum Y value", 
        "min_y": "Lowest Y value to allow"
      }
    }, 
    "FModifierEnvelope": {
      "inherits": [
        "FModifier"
      ], 
      "fields": {
        "control_points": "(read-only)    Control points defining the shape of the envelope", 
        "reference_value": "Value that envelope's influence is centered around / based on", 
        "default_min": "Lower distance from Reference Value for 1:1 default influence", 
        "default_max": "Upper distance from Reference Value for 1:1 default influence"
      }
    }, 
    "ShaderNodeExtendedMaterial": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "use_diffuse": "Material Node outputs Diffuse", 
        "use_specular": "Material Node outputs Specular", 
        "invert_normal": "Material Node uses inverted normal"
      }
    }, 
    "TessfaceUVTextures": {
      "fields": {
        "active_index": "Active UV Map index", 
        "active": "(read-only)    Active UV Map"
      }
    }, 
    "SpaceLogicEditor": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_sensors_active_states": "Show only sensors connected to active states", 
        "show_sensors_active_object": "Show sensors of active object", 
        "show_controllers_linked_controller": "Show linked objects to sensor/actuator", 
        "show_actuators_active_object": "Show actuators of active object", 
        "show_sensors_selected_objects": "Show sensors of all selected objects", 
        "show_controllers_selected_objects": "Show controllers of all selected objects", 
        "show_actuators_selected_objects": "Show actuators of all selected objects", 
        "show_actuators_active_states": "Show only actuators connected to active states", 
        "show_controllers_active_object": "Show controllers of active object", 
        "show_sensors_linked_controller": "Show linked objects to the controller", 
        "show_actuators_linked_controller": "Show linked objects to the actuator"
      }
    }, 
    "AddSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "input_2": "Second input for the effect strip", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)"
      }
    }, 
    "BoidRuleGoal": {
      "inherits": [
        "BoidRule"
      ], 
      "fields": {
        "use_predict": "Predict target movement", 
        "object": "Goal object"
      }
    }, 
    "MovieSequence": {
      "inherits": [
        "Sequence"
      ], 
      "fields": {
        "stream_index": "For files with several movie streams, use the stream with the given index", 
        "use_deinterlace": "For video movies to remove fields", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "crop": "(read-only)", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_flip_y": "Flip on the Y axis", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from", 
        "use_flip_x": "Flip on the X axis", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_float": "Convert input to float data", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "proxy": "(read-only)", 
        "use_translation": "Translate image before processing", 
        "use_reverse_frames": "Reverse frame order", 
        "elements": "(read-only)", 
        "mpeg_preseek": "For MPEG movies, preseek this many frames", 
        "strobe": "Only display every nth frame"
      }
    }, 
    "SequenceEditor": {
      "fields": {
        "sequences": "(read-only)", 
        "active_strip": "Sequencer's active strip", 
        "sequences_all": "(read-only)", 
        "show_overlay": "Partial overlay on top of the sequencer", 
        "meta_stack": "(read-only)    Meta strip stack, last is currently edited meta strip"
      }
    }, 
    "BevelModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "segments": "Number of segments for round edges/verts", 
        "angle_limit": "Angle above which to bevel edges", 
        "edge_weight_method": "What edge weight to use for weighting a vertex", 
        "width": "Bevel value/amount", 
        "use_only_vertices": "Bevel verts/corners, not edges", 
        "vertex_group": "Vertex group name", 
        "use_clamp_overlap": "Clamp the width to avoid overlap"
      }
    }, 
    "MovieTrackingObjectPlaneTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "ShaderNodeTexNoise": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }
    }, 
    "BackgroundImage": {
      "fields": {
        "clip": "Movie clip displayed and edited in this space", 
        "show_expanded": "Show the expanded in the user interface", 
        "clip_user": "(read-only)    Parameters defining which frame of the movie clip is displayed", 
        "image": "Image displayed and edited in this space", 
        "use_camera_clip": "Use movie clip from active scene camera", 
        "view_axis": "The axis to display the image on", 
        "size": "Scaling factor for the background image", 
        "show_background_image": "Show this image as background", 
        "draw_depth": "Draw under or over everything", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "source": "Data source used for background", 
        "opacity": "Image opacity to blend the image against the background color", 
        "show_on_foreground": "Show this image in front of objects in viewport", 
        "frame_method": "How the image fits in the camera frame", 
        "offset_y": "Offset image vertically from the world origin", 
        "offset_x": "Offset image horizontally from the world origin"
      }
    }, 
    "DelaySensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "duration": "If >0, delay in number of logic tics before the negative trigger following the positive trigger", 
        "delay": "Delay in number of logic tics before the positive trigger (default 60 per second)", 
        "use_repeat": "Toggle repeat option (if selected, the sensor restarts after Delay+Duration logic tics)"
      }
    }, 
    "PythonController": {
      "inherits": [
        "Controller"
      ], 
      "fields": {
        "text": "Text datablock with the python script", 
        "module": "Module name and function to run, e.g. \"someModule.main\" (internal texts and external python files can be used)", 
        "use_debug": "Continuously reload the module from disk for editing external modules without restarting", 
        "mode": "Python script type (textblock or module - faster)"
      }
    }, 
    "KeyingSets": {
      "fields": {
        "active_index": "Current Keying Set index (negative for 'builtin' and positive for 'absolute')", 
        "active": "Active Keying Set used to insert/delete keyframes"
      }
    }, 
    "NodeSetting": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "value": "Python expression to be evaluated as the initial node setting"
      }
    }, 
    "GPencilStroke": {
      "fields": {
        "points": "(read-only)    Stroke data points"
      }
    }, 
    "NodeSocketInterfaceIntPercentage": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "ScrewModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "axis": "Screw axis", 
        "use_normal_flip": "Flip normals of lathed faces", 
        "screw_offset": "Offset the revolution along its axis", 
        "use_normal_calculate": "Calculate the order of edges (needed for meshes, but not curves)", 
        "use_object_screw_offset": "Use the distance between the objects to make a screw", 
        "iterations": "Number of times to apply the screw operation", 
        "render_steps": "Number of steps in the revolution", 
        "steps": "Number of steps in the revolution", 
        "object": "Object to define the screw axis", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded", 
        "angle": "Angle of revolution"
      }
    }, 
    "LineStyleGeometryModifier_Sampling": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "sampling": "New sampling value to be used for subsequent modifiers", 
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded"
      }
    }, 
    "ColorManagedSequencerColorspaceSettings": {
      "fields": {
        "name": "Color space that the sequencer operates in"
      }
    }, 
    "MetaBallElements": {
      "fields": {
        "active": "(read-only)    Last selected element"
      }
    }, 
    "MaterialStrand": {
      "fields": {
        "width_fade": "Transparency along the width of the strand", 
        "use_tangent_shading": "Use direction of strands as normal for tangent-shading", 
        "uv_layer": "Name of UV map to override", 
        "root_size": "Start size of strands in pixels or Blender units", 
        "blend_distance": "Worldspace distance over which to blend in the surface normal", 
        "use_surface_diffuse": "(read-only)    Make diffuse shading more similar to shading the surface", 
        "tip_size": "End size of strands in pixels or Blender units", 
        "shape": "Positive values make strands rounder, negative ones make strands spiky", 
        "use_blender_units": "Use Blender units for widths instead of pixels", 
        "size_min": "Minimum size of strands in pixels"
      }
    }, 
    "SmokeCollSettings": {
      "fields": {
        "collision_type": "Collision type"
      }
    }, 
    "UDKActionSetListPG": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "bmatch": "This check against bone names and action group names matches and override boolean if true.", 
        "bexport": "Check this to export the animation"
      }
    }, 
    "NodeSocketVectorXYZ": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "SunLamp": {
      "inherits": [
        "ID", 
        "Lamp"
      ], 
      "fields": {
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "shadow_frustum_size": "Size of the frustum used for creating the shadow map", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "shadow_ray_samples": "Number of samples taken extra (samples x samples)", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "sky": "(read-only)    Sky related settings for sun lamps", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "compression_threshold": "Deep shadow map compression threshold"
      }
    }, 
    "LineStyleColorModifier_DistanceFromObject": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ], 
      "fields": {
        "range_min": "Lower bound of the input range the mapping is applied", 
        "name": "Name of the modifier", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "target": "Target object from which the distance is measured", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "range_max": "Upper bound of the input range the mapping is applied", 
        "color_ramp": "(read-only)    Color ramp used to change line color"
      }
    }, 
    "BlendDataNodeTrees": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "BlenderRNA": {
      "fields": {
        "structs": "(read-only)"
      }
    }, 
    "Itasc": {
      "inherits": [
        "IKParam"
      ], 
      "fields": {
        "feedback": "Feedback coefficient for error correction, average response time is 1/feedback (default=20)", 
        "solver": "Solving method selection: automatic damping or manual damping", 
        "precision": "Precision of convergence in case of reiteration", 
        "use_auto_step": "Automatically determine the optimal number of steps for best performance/accuracy trade off", 
        "iterations": "Maximum number of iterations for convergence in case of reiteration", 
        "step_max": "Higher bound for timestep in second in case of automatic substeps", 
        "velocity_max": "Maximum joint velocity in rad/s (default=50)", 
        "damping_max": "Maximum damping coefficient when singular value is nearly 0 (higher values=more stability, less reactivity - default=0.5)", 
        "damping_epsilon": "Singular value under which damping is progressively applied (higher values=more stability, less reactivity - default=0.1)", 
        "step_count": "Divide the frame interval into this many steps", 
        "step_min": "Lower bound for timestep in second in case of automatic substeps", 
        "reiteration_method": "Defines if the solver is allowed to reiterate (converge until precision is met) on none, first or all frames"
      }
    }, 
    "PathCompare": {
      "fields": {
        "use_glob": "Enable wildcard globbing"
      }
    }, 
    "KeyConfig": {
      "fields": {
        "keymaps": "(read-only)    Key maps configured as part of this configuration", 
        "name": "Name of the key configuration", 
        "is_user_defined": "(read-only)    Indicates that a keyconfig was defined by the user"
      }
    }, 
    "CyclesLampSettings": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "use_multiple_importance_sampling": "Use multiple importance sampling for the lamp, reduces noise for area lamps and sharp glossy materials", 
        "cast_shadow": "Lamp casts shadows", 
        "samples": "Number of light samples to render for each AA sample"
      }
    }, 
    "CompositorNodeTime": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "curve": "(read-only)"
      }
    }, 
    "RenderLayer": {
      "fields": {
        "use_ztransp": "(read-only)    Render Z-Transparent faces in this Layer (on top of Solid and Halos)", 
        "use_pass_glossy_indirect": "(read-only)    Deliver glossy indirect pass", 
        "light_override": "(read-only)    Group to override all other lights in this render layer", 
        "layers": "(read-only)    Scene layers included in this render layer", 
        "use_pass_refraction": "(read-only)    Deliver raytraced refraction pass", 
        "use_pass_combined": "(read-only)    Deliver full combined RGBA buffer", 
        "passes": "(read-only)", 
        "exclude_reflection": "(read-only)    Exclude raytraced reflection pass from combined", 
        "use_pass_transmission_indirect": "(read-only)    Deliver transmission indirect pass", 
        "use_pass_subsurface_color": "(read-only)    Deliver subsurface color pass", 
        "exclude_refraction": "(read-only)    Exclude raytraced refraction pass from combined", 
        "use_pass_glossy_color": "(read-only)    Deliver glossy color pass", 
        "use_pass_uv": "(read-only)    Deliver texture UV pass", 
        "exclude_ambient_occlusion": "(read-only)    Exclude AO pass from combined", 
        "use_pass_color": "(read-only)    Deliver shade-less color pass", 
        "material_override": "(read-only)    Material to override all other materials in this render layer", 
        "use_pass_normal": "(read-only)    Deliver normal pass", 
        "layers_zmask": "(read-only)    Zmask scene layers for solid faces", 
        "use_pass_shadow": "(read-only)    Deliver shadow pass", 
        "use_pass_ambient_occlusion": "(read-only)    Deliver AO pass", 
        "use_freestyle": "(read-only)    Render stylized strokes in this Layer", 
        "exclude_shadow": "(read-only)    Exclude shadow pass from combined", 
        "use_zmask": "(read-only)    Only render what's in front of the solid z values", 
        "exclude_environment": "(read-only)    Exclude environment pass from combined", 
        "layers_exclude": "(read-only)    Exclude scene layers from having any influence", 
        "use_pass_diffuse_direct": "(read-only)    Deliver diffuse direct pass", 
        "use_pass_specular": "(read-only)    Deliver specular pass", 
        "use_pass_diffuse_color": "(read-only)    Deliver diffuse color pass", 
        "use_sky": "(read-only)    Render Sky in this Layer", 
        "use_pass_diffuse_indirect": "(read-only)    Deliver diffuse indirect pass", 
        "use": "(read-only)    Disable or enable the render layer", 
        "exclude_indirect": "(read-only)    Exclude indirect pass from combined", 
        "use_pass_emit": "(read-only)    Deliver emission pass", 
        "use_pass_vector": "(read-only)    Deliver speed vector pass", 
        "use_edge_enhance": "(read-only)    Render Edge-enhance in this Layer (only works for Solid faces)", 
        "name": "(read-only)    Render layer name", 
        "use_pass_reflection": "(read-only)    Deliver raytraced reflection pass", 
        "use_pass_mist": "(read-only)    Deliver mist factor pass (0.0-1.0)", 
        "use_pass_subsurface_indirect": "(read-only)    Deliver subsurface indirect pass", 
        "use_halo": "(read-only)    Render Halos in this Layer (on top of Solid)", 
        "use_pass_glossy_direct": "(read-only)    Deliver glossy direct pass", 
        "use_solid": "(read-only)    Render Solid faces in this Layer", 
        "use_pass_transmission_direct": "(read-only)    Deliver transmission direct pass", 
        "use_pass_indirect": "(read-only)    Deliver indirect lighting pass", 
        "use_pass_z": "(read-only)    Deliver Z values pass", 
        "use_pass_material_index": "(read-only)    Deliver material index pass", 
        "exclude_specular": "(read-only)    Exclude specular pass from combined", 
        "use_all_z": "(read-only)    Fill in Z values for solid faces in invisible layers, for masking", 
        "exclude_emit": "(read-only)    Exclude emission pass from combined", 
        "use_pass_subsurface_direct": "(read-only)    Deliver subsurface direct pass", 
        "invert_zmask": "(read-only)    For Zmask, only render what is behind solid z values instead of in front", 
        "use_pass_diffuse": "(read-only)    Deliver diffuse pass", 
        "use_strand": "(read-only)    Render Strands in this Layer", 
        "use_pass_object_index": "(read-only)    Deliver object index pass", 
        "use_pass_environment": "(read-only)    Deliver environment lighting pass", 
        "use_pass_transmission_color": "(read-only)    Deliver transmission color pass"
      }
    }, 
    "FreestyleSettings": {
      "fields": {
        "crease_angle": "Angular threshold for detecting crease edges", 
        "linesets": "(read-only)", 
        "use_smoothness": "Take face smoothness into account in view map calculation", 
        "use_advanced_options": "Enable advanced edge detection options (sphere radius and Kr derivative epsilon)", 
        "use_culling": "If enabled, out-of-view edges are ignored", 
        "use_ridges_and_valleys": "Enable ridges and valleys", 
        "mode": "Select the Freestyle control mode", 
        "use_material_boundaries": "Enable material boundaries", 
        "use_suggestive_contours": "Enable suggestive contours", 
        "raycasting_algorithm": "Select the Freestyle raycasting algorithm", 
        "modules": "(read-only)    A list of style modules (to be applied from top to bottom)", 
        "kr_derivative_epsilon": "Kr derivative epsilon for computing suggestive contours", 
        "sphere_radius": "Sphere radius for computing curvatures"
      }
    }, 
    "GameObjectSettings": {
      "fields": {
        "use_all_states": "Set all state bits", 
        "step_height": "Maximum height of steps the character can run over", 
        "use_activity_culling": "Disable simulation of angular motion along the Z axis", 
        "use_obstacle_create": "Create representation for obstacle simulation", 
        "used_states": "(read-only)    States which are being used by controllers", 
        "use_material_physics_fh": "React to force field physics settings in materials", 
        "collision_group": "The collision group of the object", 
        "states_initial": "Initial state when the game starts", 
        "jump_speed": "Upward velocity applied to the character when jumping", 
        "mass": "Mass of the object", 
        "collision_bounds_type": "Select the collision type", 
        "use_actor": "Object is detected by the Near and Radar sensor", 
        "soft_body": "(read-only)    Settings for Bullet soft body simulation", 
        "show_debug_state": "Print state debug info in the game engine", 
        "show_controllers": "Shows controllers for this object in the user interface", 
        "velocity_max": "Clamp velocity to this maximum speed", 
        "use_rotate_from_normal": "Use face normal to rotate object, so that it points away from the surface", 
        "fall_speed": "Maximum speed at which the character will fall", 
        "lock_location_z": "Disable simulation of linear motion along the Z axis", 
        "form_factor": "Form factor scales the inertia tensor", 
        "show_sensors": "Shows sensors for this object in the user interface", 
        "lock_location_y": "Disable simulation of linear motion along the Y axis", 
        "lock_location_x": "Disable simulation of linear motion along the X axis", 
        "collision_margin": "Extra margin around object for collision detection, small amount required for stability", 
        "use_sleep": "Disable auto (de)activation in physics simulation", 
        "lock_rotation_x": "Disable simulation of angular motion along the X axis", 
        "velocity_min": "Clamp velocity to this minimum speed (except when totally still)", 
        "lock_rotation_y": "Disable simulation of angular motion along the Y axis", 
        "lock_rotation_z": "Disable simulation of angular motion along the Z axis", 
        "friction_coefficients": "Relative friction coefficients in the in the X, Y and Z directions, when anisotropic friction is enabled", 
        "damping": "General movement damping", 
        "use_collision_compound": "Add children to form a compound collision object", 
        "use_collision_bounds": "Specify a collision bounds type other than the default", 
        "properties": "(read-only)    Game engine properties", 
        "states_visible": "State determining which controllers are displayed", 
        "actuators": "(read-only)    Game engine actuators to act on events", 
        "show_actuators": "Shows actuators for this object in the user interface", 
        "physics_type": "Select the type of physical representation", 
        "sensors": "(read-only)    Game engine sensor to detect events", 
        "use_anisotropic_friction": "Enable anisotropic friction", 
        "controllers": "(read-only)    Game engine controllers to process events, connecting sensors to actuators", 
        "obstacle_radius": "Radius of object representation in obstacle simulation", 
        "rotation_damping": "General rotation damping", 
        "use_ghost": "Object does not react to collisions, like a ghost", 
        "radius": "Radius of bounding sphere and material physics", 
        "show_state_panel": "Show state panel", 
        "collision_mask": "The groups this object can collide with"
      }
    }, 
    "DistortedNoiseTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "distortion": "Amount of distortion", 
        "noise_scale": "Scaling for noise input", 
        "noise_distortion": "Noise basis for the distortion", 
        "noise_basis": "Noise basis used for turbulence", 
        "nabla": "Size of derivative offset used for calculating normal"
      }
    }, 
    "Spline": {
      "fields": {
        "radius_interpolation": "The type of radius interpolation for Bezier curves", 
        "resolution_u": "Curve or Surface subdivisions per segment", 
        "resolution_v": "Surface subdivisions per segment", 
        "type": "The interpolation type for this curve element", 
        "use_smooth": "Smooth the normals of the surface or beveled curve", 
        "character_index": "(read-only)    Location of this character in the text data (only for text curves)", 
        "use_endpoint_v": "Make this nurbs surface meet the endpoints in the V direction (Cyclic V must be disabled)", 
        "bezier_points": "(read-only)    Collection of points for Bezier curves only", 
        "use_bezier_u": "Make this nurbs curve or surface act like a Bezier spline in the U direction (Order U must be 3 or 4, Cyclic U must be disabled)", 
        "hide": "Hide this curve in Edit mode", 
        "use_endpoint_u": "Make this nurbs curve or surface meet the endpoints in the U direction (Cyclic U must be disabled)", 
        "use_cyclic_v": "Make this surface a closed loop in the V direction", 
        "tilt_interpolation": "The type of tilt interpolation for 3D, Bezier curves", 
        "use_bezier_v": "Make this nurbs surface act like a Bezier spline in the V direction (Order V must be 3 or 4, Cyclic V must be disabled)", 
        "point_count_u": "(read-only)    Total number points for the curve or surface in the U direction", 
        "point_count_v": "(read-only)    Total number points for the surface on the V direction", 
        "use_cyclic_u": "Make this curve or surface a closed loop in the U direction", 
        "order_u": "NURBS order in the U direction (for splines and surfaces, higher values let points influence a greater area)", 
        "order_v": "NURBS order in the V direction (for surfaces only, higher values let points influence a greater area)", 
        "points": "(read-only)    Collection of points that make up this poly or nurbs spline"
      }
    }, 
    "EffectSequence": {
      "inherits": [
        "Sequence"
      ], 
      "fields": {
        "use_deinterlace": "For video movies to remove fields", 
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "crop": "(read-only)", 
        "use_flip_y": "Flip on the Y axis", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_flip_x": "Flip on the X axis", 
        "use_float": "Convert input to float data", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "proxy": "(read-only)", 
        "use_translation": "Translate image before processing", 
        "use_reverse_frames": "Reverse frame order", 
        "strobe": "Only display every nth frame"
      }
    }, 
    "RegionView3D": {
      "fields": {
        "view_camera_offset": "View shift in camera view", 
        "perspective_matrix": "(read-only)    Current perspective matrix of the 3D region", 
        "view_camera_zoom": "Zoom factor in camera view", 
        "use_box_clip": "Clip objects based on what's visible in other side views", 
        "view_rotation": "Rotation in quaternions (keep normalized)", 
        "view_location": "View pivot location", 
        "view_perspective": "View Perspective", 
        "view_matrix": "Current view matrix of the 3D region", 
        "lock_rotation": "Lock view rotation in side views", 
        "view_distance": "Distance to the view location", 
        "show_sync_view": "Sync view position between side views"
      }
    }, 
    "BoidRuleAvoidCollision": {
      "inherits": [
        "BoidRule"
      ], 
      "fields": {
        "use_avoid_collision": "Avoid collision with deflector objects", 
        "look_ahead": "Time to look ahead in seconds", 
        "use_avoid": "Avoid collision with other boids"
      }
    }, 
    "SkinModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "use_y_symmetry": "Avoid making unsymmetrical quads across the Y axis", 
        "use_x_symmetry": "Avoid making unsymmetrical quads across the X axis", 
        "branch_smoothing": "Smooth complex geometry around branches", 
        "use_z_symmetry": "Avoid making unsymmetrical quads across the Z axis", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded"
      }
    }, 
    "ParticleInstanceModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "position": "Position along path", 
        "axis": "Pole axis for rotation", 
        "use_path": "Create instances along particle paths", 
        "show_dead": "Show instances when particles are dead", 
        "use_preserve_shape": "Don't stretch the object", 
        "use_normal": "Create instances from normal particles", 
        "use_size": "Use particle size to scale the instances", 
        "use_children": "Create instances from child particles", 
        "object": "Object that has the particle system", 
        "show_unborn": "Show instances when particles are unborn", 
        "random_position": "Randomize position along path", 
        "show_alive": "Show instances when particles are alive"
      }
    }, 
    "Timer": {
      "fields": {
        "time_step": "(read-only)", 
        "time_duration": "(read-only)    Time since last step in seconds", 
        "time_delta": "(read-only)    Time since last step in seconds"
      }
    }, 
    "MagicTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "noise_depth": "Depth of the noise", 
        "turbulence": "Turbulence of the noise"
      }
    }, 
    "ImagePaint": {
      "inherits": [
        "Paint"
      ], 
      "fields": {
        "normal_angle": "Paint most on faces pointing towards the view according to this angle", 
        "invert_stencil": "Invert the stencil layer", 
        "use_backface_culling": "Ignore faces pointing away from the view (faster)", 
        "screen_grab_size": "Size to capture the image for re-projecting", 
        "seam_bleed": "Extend paint beyond the faces UVs to reduce seams (in pixels, slower)", 
        "use_occlude": "Only paint onto the faces directly under the brush (slower)", 
        "use_clone_layer": "Use another UV map as clone source, otherwise use the 3D cursor as the source", 
        "use_stencil_layer": "Set the mask layer from the UV map buttons", 
        "use_normal_falloff": "Paint most on faces pointing towards the view"
      }
    }, 
    "BlendDataArmatures": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "CurvesModifier": {
      "inherits": [
        "SequenceModifier"
      ], 
      "fields": {
        "curve_mapping": "(read-only)"
      }
    }, 
    "PropertyGroup": {
      "fields": {
        "name": "Unique name used in the code and scripting"
      }
    }, 
    "ImageFormatSettings": {
      "fields": {
        "jpeg2k_codec": "Codec settings for Jpek2000", 
        "use_cineon_log": "Convert to logarithmic color space", 
        "cineon_white": "Log conversion reference whitepoint", 
        "cineon_black": "Log conversion reference blackpoint", 
        "use_jpeg2k_ycc": "Save luminance-chrominance-chrominance channels instead of RGB colors", 
        "use_preview": "When rendering animations, save JPG preview images in same directory", 
        "file_format": "File format to save the rendered images as", 
        "display_settings": "(read-only)    Settings of device saved image would be displayed on", 
        "use_jpeg2k_cinema_48": "Use Openjpeg Cinema Preset (48fps)", 
        "color_mode": "Choose BW for saving grayscale images, RGB for saving red, green and blue channels, and RGBA for saving red, green, blue and alpha channels", 
        "view_settings": "(read-only)    Color management settings applied on image before saving", 
        "quality": "Quality for image formats that support lossy compression", 
        "exr_codec": "Codec settings for OpenEXR", 
        "use_zbuffer": "Save the z-depth per pixel (32 bit unsigned int z-buffer)", 
        "cineon_gamma": "Log conversion gamma", 
        "compression": "Compression level for formats that support lossless compression", 
        "use_jpeg2k_cinema_preset": "Use Openjpeg Cinema Preset", 
        "color_depth": "Bit depth per channel"
      }
    }, 
    "PythonConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "text": "The text object that contains the Python script", 
        "has_script_error": "(read-only)    The linked Python script has thrown an error", 
        "use_targets": "Use the targets indicated in the constraint panel", 
        "target_count": "Usually only 1-3 are needed", 
        "targets": "(read-only)    Target Objects"
      }
    }, 
    "VisibilityActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "use_occlusion": "Set the object to occlude objects behind it (initialized from the object type in physics button)", 
        "use_visible": "Set the objects visible (initialized from the object render restriction toggle in physics button)", 
        "apply_to_children": "Set all the children of this object to the same visibility/occlusion recursively"
      }
    }, 
    "BrushTextureSlot": {
      "inherits": [
        "TextureSlot"
      ], 
      "fields": {
        "angle": "Brush texture rotation"
      }
    }, 
    "UDKArmListPG": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "bselect": "This will be ignore when exported", 
        "otype": "This will be ignore when exported", 
        "bexport": "This will be ignore when exported"
      }
    }, 
    "ColorSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "input_count": "(read-only)"
      }
    }, 
    "OperatorMacro": {
      "fields": {
        "properties": "(read-only)"
      }
    }, 
    "MirrorModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "use_mirror_vertex_groups": "Mirror vertex groups (e.g. .R->.L)", 
        "use_mirror_merge": "Merge vertices within the merge threshold", 
        "use_clip": "Prevent vertices from going through the mirror during transform", 
        "mirror_object": "Object to use as mirror", 
        "merge_threshold": "Distance from axis within which mirrored vertices are merged", 
        "use_y": "Enable Y axis mirror", 
        "use_mirror_v": "Mirror the V texture coordinate around the 0.5 point", 
        "use_x": "Enable X axis mirror", 
        "use_z": "Enable Z axis mirror", 
        "use_mirror_u": "Mirror the U texture coordinate around the 0.5 point"
      }
    }, 
    "ThemeNLAEditor": {
      "fields": {
        "space_list": "(read-only)    Settings for space list", 
        "sound_strips": "Sound Strip - Unselected (for timing speaker sounds)", 
        "active_action_unset": "Animation data block doesn't have active action", 
        "tweak_duplicate": "Warning/error indicator color for strips referencing the strip being tweaked", 
        "strips_selected": "Action-Clip Strip - Selected", 
        "transition_strips": "Transition Strip - Unselected", 
        "sound_strips_selected": "Sound Strip - Selected (for timing speaker sounds)", 
        "strips": "Action-Clip Strip - Unselected", 
        "meta_strips": "Meta Strip - Unselected (for grouping related strips)", 
        "active_action": "Animation data block has active action", 
        "tweak": "Color for strip/action being 'tweaked' or edited", 
        "space": "(read-only)    Settings for space", 
        "meta_strips_selected": "Meta Strip - Selected (for grouping related strips)", 
        "transition_strips_selected": "Transition Strip - Selected"
      }
    }, 
    "RigidBodyObject": {
      "fields": {
        "angular_damping": "Amount of angular velocity that is lost over time", 
        "enabled": "Rigid Body actively participates to the simulation", 
        "collision_groups": "Collision Groups Rigid Body belongs to", 
        "friction": "Resistance of object to movement", 
        "type": "Role of object in Rigid Body Simulations", 
        "deactivate_angular_velocity": "Angular Velocity below which simulation stops simulating object", 
        "restitution": "Tendency of object to bounce after colliding with another (0 = stays still, 1 = perfectly elastic)", 
        "use_start_deactivated": "Deactivate rigid body at the start of the simulation", 
        "deactivate_linear_velocity": "Linear Velocity below which simulation stops simulating object", 
        "mass": "How much the object 'weighs' irrespective of gravity", 
        "collision_shape": "Collision Shape of object in Rigid Body Simulations", 
        "kinematic": "Allow rigid body to be controlled by the animation system", 
        "use_deactivation": "Enable deactivation of resting rigid bodies (increases performance and stability but can cause glitches)", 
        "linear_damping": "Amount of linear velocity that is lost over time", 
        "use_margin": "Use custom collision margin (some shapes will have a visible gap around them)", 
        "collision_margin": "Threshold of distance near surface where collisions are still considered (best results when non-zero)"
      }
    }, 
    "LineStyleGeometryModifier_Blueprint": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "rounds": "Number of rounds in contour strokes", 
        "random_backbone": "Randomness of the backbone stretching", 
        "backbone_length": "Amount of backbone stretching", 
        "shape": "Select the shape of blueprint contour strokes", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "random_center": "Randomness of the center", 
        "random_radius": "Randomness of the radius"
      }
    }, 
    "IntProperty": {
      "inherits": [
        "Property"
      ], 
      "fields": {
        "soft_min": "(read-only)    Minimum value used by buttons", 
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "default": "(read-only)    Default value for this number", 
        "hard_min": "(read-only)    Minimum value used by buttons", 
        "soft_max": "(read-only)    Maximum value used by buttons", 
        "hard_max": "(read-only)    Maximum value used by buttons", 
        "default_array": "(read-only)    Default value for this array", 
        "step": "(read-only)    Step size used by number buttons, for floats 1/100th of the step size"
      }
    }, 
    "Lattice": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "shape_keys": "(read-only)", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "use_outside": "Only draw, and take into account, the outer vertices", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "points": "(read-only)    Points of the lattice", 
        "points_w": "Point in W direction (can't be changed when there are shape keys)", 
        "vertex_group": "Vertex group to apply the influence of the lattice", 
        "points_v": "Point in V direction (can't be changed when there are shape keys)", 
        "points_u": "Point in U direction (can't be changed when there are shape keys)"
      }
    }, 
    "SimpleDeformModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "lock_y": "Do not allow deformation along the Y axis", 
        "limits": "Lower/Upper limits for deform", 
        "lock_x": "Do not allow deformation along the X axis", 
        "origin": "Origin of modifier space coordinates", 
        "factor": "Amount to deform object", 
        "vertex_group": "Vertex group name", 
        "angle": "Angle of deformation"
      }
    }, 
    "NodeOutputFileSlotFile": {
      "fields": {
        "path": "Subpath used for this slot", 
        "format": "(read-only)"
      }
    }, 
    "ParticleSystems": {
      "fields": {
        "active_index": "Index of active particle system slot", 
        "active": "(read-only)    Active particle system being displayed"
      }
    }, 
    "NodeCustomGroup": {
      "inherits": [
        "Node"
      ], 
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }
    }, 
    "MessageActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "to_property": "Optional, send message to objects with this name only, or empty to broadcast", 
        "body_type": "Toggle message type: either Text or a PropertyName", 
        "subject": "Optional, message subject (this is what can be filtered on)", 
        "body_property": "The message body will be set by the Property Value", 
        "body_message": "Optional, message body Text"
      }
    }, 
    "UIList": {
      "fields": {
        "bl_idname": "If this is set, the uilist gets a custom ID, otherwise it takes the name of the class used to define the uilist (for example, if the class name is \"OBJECT_UL_vgroups\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_UL_vgroups\")", 
        "use_filter_sort_alpha": "Sort items by their name", 
        "layout_type": "(read-only)", 
        "bitflag_filter_item": "(read-only)    The value of the reserved bitflag 'FILTER_ITEM' (in filter_flags values)", 
        "filter_name": "Only show items matching this name (use '*' as wildcard)", 
        "use_filter_sort_reverse": "Invert the order of shown items", 
        "use_filter_show": "Show filtering options", 
        "use_filter_invert": "Invert filtering (show hidden items, and vice-versa)"
      }
    }, 
    "AnimVizMotionPaths": {
      "fields": {
        "frame_after": "Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "frame_start": "Starting frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)", 
        "show_keyframe_highlight": "Emphasize position of keyframes on Motion Paths", 
        "bake_location": "When calculating Bone Paths, use Head or Tips", 
        "show_keyframe_numbers": "Show frame numbers of Keyframes on Motion Paths", 
        "frame_step": "Number of frames between paths shown (not for 'On Keyframes' Onion-skinning method)", 
        "type": "Type of range to show for Motion Paths", 
        "show_keyframe_action_all": "For bone motion paths, search whole Action for keyframes instead of in group with matching name only (is slower)", 
        "show_frame_numbers": "Show frame numbers on Motion Paths", 
        "frame_end": "End frame of range of paths to display/calculate (not for 'Around Current Frame' Onion-skinning method)", 
        "frame_before": "Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)"
      }
    }, 
    "NodeSocketInterfaceString": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "NodeGroupInput": {
      "inherits": [
        "Node", 
        "NodeInternal"
      ], 
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }
    }, 
    "MeshColorLayer": {
      "fields": {
        "name": "Name of Vertex color layer", 
        "data": "(read-only)", 
        "active": "Sets the layer as active for display and editing", 
        "active_render": "Sets the layer as active for rendering"
      }
    }, 
    "UVProjector": {
      "fields": {
        "object": "Object to use as projector transform"
      }
    }, 
    "Context": {
      "fields": {
        "tool_settings": "(read-only)", 
        "region": "(read-only)", 
        "screen": "(read-only)", 
        "area": "(read-only)", 
        "window": "(read-only)", 
        "region_data": "(read-only)", 
        "space_data": "(read-only)", 
        "window_manager": "(read-only)", 
        "scene": "(read-only)", 
        "user_preferences": "(read-only)", 
        "blend_data": "(read-only)", 
        "mode": "(read-only)"
      }
    }, 
    "CyclesCurveRenderSettings": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "use_curves": "Activate Cycles hair rendering for particle system", 
        "cull_backfacing": "Do not test the back-face of each strand", 
        "shape": "Form of hair", 
        "resolution": "Resolution of generated mesh", 
        "maximum_width": "Maximum extension that strand radius can be increased by", 
        "subdivisions": "Number of subdivisions used in Cardinal curve intersection (power of 2)", 
        "primitive": "Type of primitive used for hair rendering", 
        "minimum_width": "Minimal pixel width for strands (0 - deactivated)"
      }
    }, 
    "ID": {
      "fields": {
        "users": "(read-only)    Number of times this datablock is referenced", 
        "tag": "Tools can use this to tag data (initial state is undefined)", 
        "name": "Unique datablock ID name", 
        "use_fake_user": "Save this datablock even if it has no users", 
        "library": "(read-only)    Library file the datablock is linked from", 
        "is_library_indirect": "(read-only)    Is this ID block linked indirectly", 
        "is_updated_data": "(read-only)    Datablock data is tagged for recalculation", 
        "is_updated": "(read-only)    Datablock is tagged for recalculation"
      }
    }, 
    "StringProperty": {
      "inherits": [
        "Property"
      ], 
      "fields": {
        "default": "(read-only)    string default value", 
        "length_max": "(read-only)    Maximum length of the string, 0 means unlimited"
      }
    }, 
    "CurveMapping": {
      "fields": {
        "white_level": "For RGB curves, the color that white is mapped to", 
        "black_level": "For RGB curves, the color that black is mapped to", 
        "use_clip": "Force the curve view to fit a defined boundary", 
        "curves": "(read-only)"
      }
    }, 
    "EditBone": {
      "fields": {
        "show_wire": "Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)", 
        "use_inherit_rotation": "Bone inherits rotation or scale from parent bone", 
        "layers": "Layers bone exists in", 
        "envelope_weight": "Bone deformation weight (for Envelope deform only)", 
        "bbone_in": "Length of first Bezier Handle (for B-Bones only)", 
        "envelope_distance": "Bone deformation distance (for Envelope deform only)", 
        "tail_radius": "Radius of tail of bone (for Envelope deform only)", 
        "hide_select": "Bone is able to be selected", 
        "roll": "Bone rotation around head-tail axis", 
        "use_inherit_scale": "Bone inherits scaling from parent bone", 
        "hide": "Bone is not visible when in Edit Mode", 
        "use_connect": "When bone has a parent, bone's head is stuck to the parent's tail", 
        "bbone_x": "B-Bone X size", 
        "use_cyclic_offset": "When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)", 
        "use_local_location": "Bone location is set in local space", 
        "head": "Location of head end of the bone", 
        "head_radius": "Radius of head of bone (for Envelope deform only)", 
        "use_envelope_multiply": "When deforming bone, multiply effects of Vertex Group weights with Envelope influence", 
        "bbone_z": "B-Bone Z size", 
        "matrix": "(read-only)    Read-only matrix calculated from the roll (armature space)", 
        "lock": "Bone is not able to be transformed when in Edit Mode", 
        "use_deform": "Enable Bone to deform geometry", 
        "parent": "Parent edit bone (in same Armature)", 
        "tail": "Location of tail end of the bone", 
        "use_relative_parent": "Object children will use relative transform, like deform", 
        "bbone_out": "Length of second Bezier Handle (for B-Bones only)", 
        "bbone_segments": "Number of subdivisions of bone (for B-Bones only)"
      }
    }, 
    "DynamicPaintCanvasSettings": {
      "fields": {
        "canvas_surfaces": "(read-only)    Paint surface list"
      }
    }, 
    "ShaderNodeScript": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "use_auto_update": "Automatically update the shader when the .osl file changes (external scripts only)", 
        "filepath": "Shader script path", 
        "bytecode": "Compile bytecode for shader script node", 
        "script": "Internal shader script to define the shader", 
        "bytecode_hash": "Hash of compile bytecode, for quick equality checking"
      }
    }, 
    "Event": {
      "fields": {
        "mouse_y": "(read-only)    The window relative vertical location of the mouse", 
        "mouse_x": "(read-only)    The window relative horizontal location of the mouse", 
        "unicode": "(read-only)    Single unicode character for this event", 
        "ctrl": "(read-only)    True when the Ctrl key is held", 
        "type": "(read-only)", 
        "ascii": "(read-only)    Single ASCII character for this event", 
        "mouse_region_x": "(read-only)    The region relative horizontal location of the mouse", 
        "oskey": "(read-only)    True when the Cmd key is held", 
        "alt": "(read-only)    True when the Alt/Option key is held", 
        "mouse_prev_x": "(read-only)    The window relative horizontal location of the mouse", 
        "mouse_prev_y": "(read-only)    The window relative vertical location of the mouse", 
        "value": "(read-only)    The type of event, only applies to some", 
        "mouse_region_y": "(read-only)    The region relative vertical location of the mouse", 
        "shift": "(read-only)    True when the Shift key is held"
      }
    }, 
    "SpaceNodeEditorPath": {
      "fields": {
        "to_string": "(read-only)"
      }
    }, 
    "ShaderNodeTexMagic": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings", 
        "turbulence_depth": "Level of detail in the added turbulent noise"
      }
    }, 
    "SceneActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "camera": "Set this Camera (leave empty to refer to self object)", 
        "scene": "Scene to be added/removed/paused/resumed"
      }
    }, 
    "ShaderNodeTexVoronoi": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }
    }, 
    "RenderEngine": {
      "fields": {
        "camera_override": "(read-only)", 
        "resolution_x": "(read-only)", 
        "resolution_y": "(read-only)", 
        "render": "(read-only)"
      }
    }, 
    "WorldTextureSlot": {
      "inherits": [
        "TextureSlot"
      ], 
      "fields": {
        "texture_coords": "Texture coordinates used to map the texture onto the background", 
        "blend_factor": "Amount texture affects color progression of the background", 
        "zenith_up_factor": "Amount texture affects color of the zenith above", 
        "use_map_blend": "Affect the color progression of the background", 
        "use_map_zenith_up": "Affect the color of the zenith above", 
        "use_map_horizon": "Affect the color of the horizon", 
        "horizon_factor": "Amount texture affects color of the horizon", 
        "zenith_down_factor": "Amount texture affects color of the zenith below", 
        "use_map_zenith_down": "Affect the color of the zenith below", 
        "object": "Object to use for mapping with Object texture coordinates"
      }
    }, 
    "DynamicPaintModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "canvas_settings": "(read-only)", 
        "brush_settings": "(read-only)"
      }
    }, 
    "NodeSocketInterfaceIntUnsigned": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "ThemeView3D": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "TextureNodeGroup": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ], 
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }
    }, 
    "Nodes": {
      "fields": {
        "active": "Active node in this tree"
      }
    }, 
    "MeshCacheModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "filepath": "Path to external displacements file", 
        "frame_start": "Add this to the start frame", 
        "frame_scale": "Evaluation time in seconds", 
        "time_mode": "Method to control playback time", 
        "factor": "Influence of the deformation", 
        "eval_factor": "Evaluation time in seconds", 
        "eval_time": "Evaluation time in seconds", 
        "eval_frame": "The frame to evaluate (starting at 0)"
      }
    }, 
    "CameraActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "axis": "Axis the Camera will try to get behind", 
        "damping": "Strength of the constraint that drives the camera behind the target", 
        "object": "Look at this Object"
      }
    }, 
    "SpaceInfo": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_report_operator": "Display the operator log", 
        "show_report_debug": "Display debug reporting info", 
        "show_report_warning": "Display warnings", 
        "show_report_info": "Display general information", 
        "show_report_error": "Display error text"
      }
    }, 
    "CompositorNodeHueCorrect": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "mapping": "(read-only)"
      }
    }, 
    "TextLine": {
      "fields": {
        "body": "Text in the line"
      }
    }, 
    "UVLoopLayers": {
      "fields": {
        "active_index": "Active UV loop layer index", 
        "active": "Active UV loop layer"
      }
    }, 
    "CyclesCameraSettings": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "panorama_type": "Distortion to use for the calculation", 
        "fisheye_fov": "Field of view for the fisheye lens", 
        "fisheye_lens": "Lens focal length (mm)", 
        "aperture_rotation": "Rotation of blades in aperture", 
        "aperture_fstop": "F/stop ratio (lower numbers give more defocus, higher numbers give a sharper image)", 
        "aperture_size": "Radius of the aperture for depth of field (higher values give more defocus)", 
        "aperture_type": "Use F/stop number or aperture radius", 
        "aperture_blades": "Number of blades in aperture for polygonal bokeh (at least 3)"
      }
    }, 
    "ThemeClipEditor": {
      "fields": {
        "space_list": "(read-only)    Settings for space list", 
        "path_before": "Color of path before current frame", 
        "marker": "Color of marker", 
        "disabled_marker": "Color of disabled marker", 
        "locked_marker": "Color of locked marker", 
        "active_marker": "Color of active marker", 
        "selected_marker": "Color of selected marker", 
        "path_after": "Color of path after current frame", 
        "space": "(read-only)    Settings for space", 
        "marker_outline": "Color of marker's outline"
      }
    }, 
    "ShaderNodeMath": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }
    }, 
    "RenderSettings": {
      "fields": {
        "filepath": "Directory/name to save animations, # characters defines the position and length of frame numbers", 
        "bake_distance": "Maximum distance from active object to other object (in blender units)", 
        "layers": "(read-only)", 
        "use_stamp_lens": "Include the active camera's lens in image metadata", 
        "use_bake_multires": "Bake directly from multires object", 
        "use_compositing": "Process the render result through the compositing pipeline, if compositing nodes are enabled", 
        "filter_size": "Pixel width over which the reconstruction filter combines samples", 
        "edge_threshold": "Threshold for drawing outlines on geometry edges", 
        "simplify_subdivision": "Global maximum subdivision level", 
        "sequencer_gl_preview": "Method to draw in the sequencer view", 
        "bake_bias": "Bias towards faces further away from the object (in blender units)", 
        "simplify_shadow_samples": "Global maximum shadow samples", 
        "threads": "Number of CPU threads to use simultaneously while rendering (for multi-core/CPU systems)", 
        "border_max_y": "Maximum Y value for the render border", 
        "line_thickness": "Line thickness in pixels", 
        "border_max_x": "Maximum X value for the render border", 
        "use_overwrite": "Overwrite existing files while rendering", 
        "use_persistent_data": "Keep render data around for faster re-renders", 
        "use_stamp": "Render the stamp info text in the rendered image", 
        "use_antialiasing": "Render and combine multiple samples per pixel to prevent jagged edges", 
        "frame_map_old": "Old mapping value in frames", 
        "use_stamp_note": "Include a custom note in image metadata", 
        "simplify_ao_sss": "Global approximate AO and SSS quality factor", 
        "motion_blur_samples": "Number of scene samples to take with motion blur", 
        "edge_color": "Edge color", 
        "has_multiple_engines": "(read-only)    More than one rendering engine is available", 
        "use_stamp_render_time": "Include the render time in image metadata", 
        "bake_samples": "Number of samples used for ambient occlusion baking from multires", 
        "engine": "Engine to use for rendering", 
        "fps": "Framerate, expressed in frames per second", 
        "use_full_sample": "Save for every anti-aliasing sample the entire RenderLayer results (this solves anti-aliasing issues with compositing)", 
        "use_shadows": "Calculate shadows while rendering", 
        "image_settings": "(read-only)", 
        "use_freestyle": "Draw stylized strokes using Freestyle", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "resolution_percentage": "Percentage scale for render resolution", 
        "dither_intensity": "Amount of dithering noise added to the rendered image to break up banding", 
        "line_thickness_mode": "Line thickness mode for Freestyle line drawing", 
        "fps_base": "Framerate base", 
        "bake_margin": "Amount of pixels to extend the baked result with, as post process filter", 
        "use_bake_normalize": "With displacement normalize to the distance, with ambient occlusion normalize without using material settings", 
        "use_sequencer_gl_textured_solid": "Draw face-assigned textures in solid draw method", 
        "display_mode": "Select where rendered images will be displayed", 
        "use_edge_enhance": "Create a toon outline around the edges of geometry", 
        "use_free_unused_nodes": "Free Nodes that are not used while compositing, to save memory", 
        "use_bake_antialiasing": "Enables Anti-aliasing", 
        "use_sss": "Calculate sub-surface scattering in materials rendering", 
        "use_fields": "Render image to two fields per frame, for interlaced TV output", 
        "raytrace_method": "Type of raytrace accelerator structure", 
        "use_stamp_filename": "Include the .blend filename in image metadata", 
        "simplify_child_particles": "Global child particles percentage", 
        "use_crop_to_border": "Crop the rendered frame to the defined border size", 
        "bake_quad_split": "Choose the method used to split a quad into 2 triangles for baking", 
        "border_min_x": "Minimum X value to for the render border", 
        "border_min_y": "Minimum Y value for the render border", 
        "tile_y": "Vertical tile size to use while rendering", 
        "use_instances": "Instance support leads to effective memory reduction when using duplicates", 
        "tile_x": "Horizontal tile size to use while rendering", 
        "use_stamp_scene": "Include the name of the active scene in image metadata", 
        "use_simplify": "Enable simplification of scene for quicker preview renders", 
        "pixel_aspect_y": "Vertical aspect ratio - for anamorphic or non-square pixel output", 
        "use_motion_blur": "Use multi-sampled 3D scene motion blur", 
        "use_stamp_frame": "Include the frame number in image metadata", 
        "pixel_aspect_x": "Horizontal aspect ratio - for anamorphic or non-square pixel output", 
        "bake_type": "Choose shading information to bake into the image", 
        "use_stamp_camera": "Include the name of the active camera in image metadata", 
        "is_movie_format": "(read-only)    When true the format is a movie", 
        "stamp_background": "Color to use behind stamp text", 
        "use_bake_to_vertex_color": "Bake to vertex colors instead of to a UV-mapped image", 
        "stamp_font_size": "Size of the font used when rendering stamp text", 
        "octree_resolution": "Resolution of raytrace accelerator, use higher resolutions for larger scenes", 
        "use_stamp_marker": "Include the name of the last marker in image metadata", 
        "threads_mode": "Determine the amount of render threads used", 
        "use_placeholder": "Create empty placeholder files while rendering frames (similar to Unix 'touch')", 
        "use_bake_clear": "Clear Images before baking", 
        "use_raytrace": "Pre-calculate the raytrace accelerator and render raytracing effects", 
        "use_game_engine": "(read-only)    Current rendering engine is a game engine", 
        "use_sequencer": "Process the render (and composited) result through the video sequence editor pipeline, if sequencer strips exist", 
        "use_stamp_sequencer_strip": "Include the name of the foreground sequence strip in image metadata", 
        "use_border": "Render a user-defined border region, within the frame size (note that this disables save_buffers and full_sample)", 
        "use_free_image_textures": "Free all image textures from memory after render, to save memory before compositing", 
        "resolution_x": "Number of horizontal pixels in the rendered image", 
        "resolution_y": "Number of vertical pixels in the rendered image", 
        "file_extension": "(read-only)    The file extension used for saving renders", 
        "use_bake_lores_mesh": "Calculate heights against unsubdivided low resolution mesh", 
        "use_file_extension": "Add the file format extensions to the rendered file name (eg: filename + .jpg)", 
        "field_order": "Order of video fields (select which lines get rendered first, to create smooth motion for TV output)", 
        "use_fields_still": "Disable the time difference between fields", 
        "frame_map_new": "How many frames the Map Old will last", 
        "stamp_note_text": "Custom text to appear in the stamp note", 
        "use_single_layer": "Only render the active layer", 
        "use_local_coords": "Vertex coordinates are stored locally on each primitive (increases memory usage, but may have impact on speed)", 
        "use_envmaps": "Calculate environment maps while rendering", 
        "use_save_buffers": "Save tiles for all RenderLayers and SceneNodes to files in the temp directory (saves memory, required for Full Sample)", 
        "use_simplify_triangulate": "Disable non-planar quads being triangulated", 
        "use_shading_nodes": "(read-only)    Active render engine uses new shading nodes system", 
        "stamp_foreground": "Color to use for stamp text", 
        "antialiasing_samples": "Amount of anti-aliasing samples per pixel", 
        "bake_normal_space": "Choose normal space for baking", 
        "use_stamp_time": "Include the rendered frame timecode as HH:MM:SS.FF in image metadata", 
        "ffmpeg": "(read-only)    FFmpeg related settings for the scene", 
        "motion_blur_shutter": "Time taken in frames between shutter open and close", 
        "use_bake_selected_to_active": "Bake shading on the surface of selected objects to the active object", 
        "pixel_filter_type": "Reconstruction filter used for combining anti-aliasing samples", 
        "use_textures": "Use textures to affect material properties", 
        "sequencer_gl_render": "Method to draw in the sequencer view", 
        "use_stamp_date": "Include the current date in image metadata"
      }
    }, 
    "Scopes": {
      "fields": {
        "use_full_resolution": "Sample every pixel of the image", 
        "histogram": "(read-only)    Histogram for viewing image statistics", 
        "waveform_alpha": "Opacity of the points", 
        "accuracy": "Proportion of original image source pixel lines to sample", 
        "vectorscope_alpha": "Opacity of the points"
      }
    }, 
    "InflowFluidSettings": {
      "inherits": [
        "FluidSettings"
      ], 
      "fields": {
        "volume_initialization": "Volume initialization type", 
        "inflow_velocity": "Initial velocity of fluid", 
        "use_local_coords": "Use local coordinates for inflow (e.g. for rotating objects)", 
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)"
      }
    }, 
    "LampTextureSlot": {
      "inherits": [
        "TextureSlot"
      ], 
      "fields": {
        "use_map_color": "Let the texture affect the basic color of the lamp", 
        "use_map_shadow": "Let the texture affect the shadow color of the lamp", 
        "shadow_factor": "Amount texture affects shadow", 
        "color_factor": "Amount texture affects color values", 
        "object": "Object to use for mapping with Object texture coordinates"
      }
    }, 
    "ShaderNodeBump": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "invert": "Invert the bump mapping direction to push into the surface instead of out"
      }
    }, 
    "FluidSettings": {
      "fields": {
        "type": "Type of participation in the fluid simulation"
      }
    }, 
    "MeshStatVis": {
      "fields": {
        "distort_min": "Minimum angle to display", 
        "thickness_samples": "Number of samples to test per face", 
        "thickness_max": "Maximum for measuring thickness", 
        "sharp_max": "Maximum angle to display", 
        "overhang_max": "Maximum angle to display", 
        "sharp_min": "Minimum angle to display", 
        "overhang_min": "Minimum angle to display", 
        "type": "XXX", 
        "thickness_min": "Minimum for measuring thickness", 
        "distort_max": "Maximum angle to display"
      }
    }, 
    "ThemeConsole": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "Actuator": {
      "fields": {
        "pin": "Display when not linked to a visible states controller", 
        "show_expanded": "Set actuator expanded in the user interface"
      }
    }, 
    "Mesh": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "cycles": "(read-only)    Cycles mesh settings", 
        "use_paint_mask_vertex": "Vertex selection masking for painting (weight paint only)", 
        "vertices": "(read-only)    Vertices of the mesh", 
        "tessfaces": "(read-only)    Tessellated faces of the mesh (derived from polygons)", 
        "total_edge_sel": "(read-only)    Selected edge count in editmode", 
        "uv_texture_stencil_index": "Mask UV map index", 
        "show_extra_indices": "Display the index numbers of selected vertices, edges, and faces", 
        "materials": "(read-only)", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "tessface_vertex_colors": "(read-only)    All tessellated face colors (read-only, for use by renderers)", 
        "uv_texture_clone": "UV map to be used as cloning source", 
        "auto_smooth_angle": "Maximum angle between face normals that 'Auto Smooth' will operate on", 
        "use_auto_smooth": "Treat all set-smoothed faces with angles less than the specified angle as 'smooth' during render", 
        "use_paint_mask": "Face selection masking for painting", 
        "show_edge_crease": "Display creases created for subsurf weighting", 
        "show_extra_face_area": "Display the area of selected faces, using global values when set in the transform panel", 
        "shape_keys": "(read-only)", 
        "uv_layer_stencil_index": "Mask UV loop layer index", 
        "show_extra_face_angle": "Display the angles in the selected edges, using global values when set in the transform panel", 
        "uv_layer_clone_index": "Clone UV loop layer index", 
        "show_extra_edge_length": "Display selected edge lengths, using global values when set in the transform panel", 
        "uv_textures": "(read-only)    All UV maps", 
        "show_faces": "Display all faces as shades in the 3D view and UV editor", 
        "use_mirror_x": "X Axis mirror editing", 
        "show_freestyle_edge_marks": "Display Freestyle edge marks, used with the Freestyle renderer", 
        "uv_layer_clone": "UV loop layer to be used as cloning source", 
        "show_freestyle_face_marks": "Display Freestyle face marks, used with the Freestyle renderer", 
        "use_mirror_topology": "Use topology based mirroring (for when both sides of mesh have matching, unique topology)", 
        "tessface_uv_textures": "(read-only)    All UV maps for tessellated faces (read-only, for use by renderers)", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "polygon_layers_int": "(read-only)", 
        "uv_layers": "(read-only)    All UV loop layers", 
        "texspace_location": "Texture space location", 
        "auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "show_statvis": "Display statistical information about the mesh", 
        "show_weight": "Draw weights in editmode", 
        "total_vert_sel": "(read-only)    Selected vertex count in editmode", 
        "uv_texture_clone_index": "Clone UV map index", 
        "show_edge_sharp": "Display sharp edges, used with the EdgeSplit modifier", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "texspace_size": "Texture space size", 
        "loops": "(read-only)    Loops of the mesh (polygon corners)", 
        "edges": "(read-only)    Edges of the mesh", 
        "uv_texture_stencil": "UV map to mask the painted area", 
        "show_double_sided": "Render/display the mesh with double or single sided lighting", 
        "texco_mesh": "Derive texture coordinates from another mesh", 
        "polygons": "(read-only)    Polygons of the mesh", 
        "show_extra_edge_angle": "Display selected edge angle, using global values when set in the transform panel", 
        "show_edge_seams": "Display UV unwrapping seams", 
        "texture_mesh": "Use another mesh for texture indices (vertex indices must be aligned)", 
        "vertex_colors": "(read-only)    All vertex colors", 
        "show_edges": "Display selected edges using highlights in the 3D view and UV editor", 
        "show_normal_face": "Display face normals as lines", 
        "polygon_layers_float": "(read-only)", 
        "total_face_sel": "(read-only)    Selected face count in editmode", 
        "skin_vertices": "(read-only)    All skin vertices", 
        "show_edge_bevel_weight": "Display weights created for the Bevel modifier", 
        "show_normal_vertex": "Display vertex normals as lines", 
        "uv_layer_stencil": "UV loop layer to mask the painted area", 
        "polygon_layers_string": "(read-only)"
      }
    }, 
    "NlaTracks": {
      "fields": {
        "active": "Active Object constraint"
      }
    }, 
    "MessageSensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "subject": "Optional subject filter: only accept messages with this subject, or empty to accept all"
      }
    }, 
    "ShaderNodeTexImage": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "color_space": "Image file color space", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "projection": "Method to project 2D image on object with a 3D texture vector", 
        "projection_blend": "For box projection, amount of blend to use between sides", 
        "color_mapping": "(read-only)    Color mapping settings"
      }
    }, 
    "SpaceUserPreferences": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "filter_text": "Search term for filtering in the UI", 
        "filter_type": "Filter method"
      }
    }, 
    "FModifierFunctionGenerator": {
      "inherits": [
        "FModifier"
      ], 
      "fields": {
        "value_offset": "Constant factor to offset values by", 
        "phase_multiplier": "Scale factor determining the 'speed' of the function", 
        "function_type": "Type of built-in function to use", 
        "use_additive": "Values generated by this modifier are applied on top of the existing values instead of overwriting them", 
        "phase_offset": "Constant factor to offset time by for function", 
        "amplitude": "Scale factor determining the maximum/minimum values"
      }
    }, 
    "BlendDataObjects": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "VoxelDataTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "voxel_data": "(read-only)    The voxel data associated with this texture"
      }
    }, 
    "NodeSocketInterfaceFloatUnsigned": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "NodeSocketFloatPercentage": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "ParticleSystem": {
      "fields": {
        "billboard_split_uv": "UV map to control billboard splitting", 
        "is_global_hair": "(read-only)    Hair keys are in global coordinate space", 
        "vertex_group_velocity": "Vertex group to control velocity", 
        "billboard_normal_uv": "UV map to control billboard normals", 
        "invert_vertex_group_size": "Negate the effect of the size vertex group", 
        "settings": "Particle system settings", 
        "invert_vertex_group_density": "Negate the effect of the density vertex group", 
        "is_edited": "(read-only)    Particle system has been edited in particle mode", 
        "dt_frac": "(read-only)    The current simulation time step size, as a fraction of a frame", 
        "invert_vertex_group_rotation": "Negate the effect of the rotation vertex group", 
        "reactor_target_object": "For reactor systems, the object that has the target particle system (empty if same object)", 
        "vertex_group_rotation": "Vertex group to control rotation", 
        "cloth": "(read-only)    Cloth dynamics for hair", 
        "vertex_group_density": "Vertex group to control density", 
        "child_seed": "Offset in the random number table for child particles, to get a different randomized result", 
        "name": "Particle system name", 
        "has_multiple_caches": "(read-only)    Particle system has multiple point caches", 
        "child_particles": "(read-only)    Child particles generated by the particle system", 
        "invert_vertex_group_roughness_end": "Negate the effect of the roughness end vertex group", 
        "vertex_group_field": "Vertex group to control field", 
        "invert_vertex_group_clump": "Negate the effect of the clump vertex group", 
        "targets": "(read-only)    Target particle systems", 
        "active_particle_target": "(read-only)", 
        "billboard_time_index_uv": "UV map to control billboard time index (X-Y)", 
        "invert_vertex_group_length": "Negate the effect of the length vertex group", 
        "vertex_group_roughness_2": "Vertex group to control roughness 2", 
        "vertex_group_length": "Vertex group to control length", 
        "vertex_group_clump": "Vertex group to control clump", 
        "use_keyed_timing": "Use key times", 
        "seed": "Offset in the random number table, to get a different randomized result", 
        "vertex_group_tangent": "Vertex group to control tangent", 
        "parent": "Use this object's coordinate system instead of global coordinate system", 
        "invert_vertex_group_tangent": "Negate the effect of the tangent vertex group", 
        "vertex_group_roughness_1": "Vertex group to control roughness 1", 
        "invert_vertex_group_field": "Negate the effect of the field vertex group", 
        "vertex_group_roughness_end": "Vertex group to control roughness end", 
        "invert_vertex_group_velocity": "Negate the effect of the velocity vertex group", 
        "vertex_group_kink": "Vertex group to control kink", 
        "reactor_target_particle_system": "For reactor systems, index of particle system on the target object", 
        "vertex_group_size": "Vertex group to control size", 
        "invert_vertex_group_kink": "Negate the effect of the kink vertex group", 
        "invert_vertex_group_roughness_1": "Negate the effect of the roughness 1 vertex group", 
        "is_editable": "(read-only)    Particle system can be edited in particle mode", 
        "use_hair_dynamics": "Enable hair dynamics using cloth simulation", 
        "invert_vertex_group_roughness_2": "Negate the effect of the roughness 2 vertex group", 
        "point_cache": "(read-only)", 
        "particles": "(read-only)    Particles generated by the particle system"
      }
    }, 
    "CompositorNodeLensdist": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_projector": "Enable/disable projector mode (the effect is applied in horizontal direction only)", 
        "use_jitter": "Enable/disable jittering (faster, but also noisier)", 
        "use_fit": "For positive distortion factor only: scale image such that black areas are not visible"
      }
    }, 
    "SurfaceCurve": {
      "inherits": [
        "ID", 
        "Curve"
      ], 
      "fields": {
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates"
      }
    }, 
    "ShaderNodeVectorCurve": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "mapping": "(read-only)"
      }
    }, 
    "ThemeTextEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeGraphEditor": {
      "fields": {
        "space_list": "(read-only)    Settings for space list", 
        "space": "(read-only)    Settings for space"
      }
    }, 
    "SequenceModifier": {
      "fields": {
        "input_mask_type": "Type of input data used for mask", 
        "show_expanded": "Mute expanded settings for the modifier", 
        "input_mask_strip": "Strip used as mask input for the modifier", 
        "input_mask_id": "Mask ID used as mask input for the modifier", 
        "type": "(read-only)", 
        "mute": "Mute this modifier"
      }
    }, 
    "ActionGroup": {
      "fields": {
        "show_expanded": "Action group is expanded", 
        "select": "Action group is selected", 
        "colors": "(read-only)    Copy of the colors associated with the group's color set", 
        "lock": "Action group is locked", 
        "channels": "(read-only)    F-Curves in this group", 
        "color_set": "Custom color set to use"
      }
    }, 
    "CompositorNodeTonemap": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "contrast": "Set to 0 to use estimate from input image", 
        "gamma": "If not used, set to 1", 
        "intensity": "If less than zero, darkens image; otherwise, makes it brighter", 
        "correction": "If 0, same for all channels; if 1, each independent", 
        "offset": "Normally always 1, but can be used as an extra control to alter the brightness curve", 
        "key": "The value the average luminance is mapped to", 
        "adaptation": "If 0, global; if 1, based on pixel intensity"
      }
    }, 
    "Theme": {
      "fields": {
        "node_editor": "(read-only)", 
        "text_editor": "(read-only)", 
        "timeline": "(read-only)", 
        "dopesheet_editor": "(read-only)", 
        "logic_editor": "(read-only)", 
        "properties": "(read-only)", 
        "nla_editor": "(read-only)", 
        "file_browser": "(read-only)", 
        "graph_editor": "(read-only)", 
        "info": "(read-only)", 
        "console": "(read-only)", 
        "outliner": "(read-only)", 
        "bone_color_sets": "(read-only)", 
        "clip_editor": "(read-only)", 
        "image_editor": "(read-only)", 
        "name": "Name of the theme", 
        "user_interface": "(read-only)", 
        "user_preferences": "(read-only)", 
        "view_3d": "(read-only)", 
        "sequence_editor": "(read-only)"
      }
    }, 
    "ObstacleFluidSettings": {
      "inherits": [
        "FluidSettings"
      ], 
      "fields": {
        "volume_initialization": "Volume initialization type", 
        "partial_slip_factor": "Amount of mixing between no- and free-slip, 0 is no slip and 1 is free slip", 
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "impact_factor": "This is an unphysical value for moving objects - it controls the impact an obstacle has on the fluid, =0 behaves a bit like outflow (deleting fluid), =1 is default, while >1 results in high forces (can be used to tweak total mass)"
      }
    }, 
    "DisplaceModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "texture_coords_object": "Object to set the texture coordinates", 
        "strength": "Amount to displace geometry", 
        "uv_layer": "UV map name", 
        "mid_level": "Material value that gives no displacement", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }
    }, 
    "MaterialRaytraceMirror": {
      "fields": {
        "fade_to": "The color that rays with no intersection within the Max Distance take (material color can be best for indoor scenes, sky color for outdoor)", 
        "reflect_factor": "Amount of mirror reflection for raytrace", 
        "fresnel_factor": "Blending factor for Fresnel", 
        "distance": "Maximum distance of reflected rays (reflections further than this range fade to sky color or material color)", 
        "gloss_factor": "The shininess of the reflection (values < 1.0 give diffuse, blurry reflections)", 
        "gloss_threshold": "Threshold for adaptive sampling (if a sample contributes less than this amount [as a percentage], sampling is stopped)", 
        "gloss_anisotropic": "The shape of the reflection, from 0.0 (circular) to 1.0 (fully stretched along the tangent", 
        "use": "Enable raytraced reflections", 
        "fresnel": "Power of Fresnel for mirror reflection", 
        "gloss_samples": "Number of cone samples averaged for blurry reflections", 
        "depth": "Maximum allowed number of light inter-reflections"
      }
    }, 
    "ThemeNodeEditor": {
      "fields": {
        "space_list": "(read-only)    Settings for space list", 
        "space": "(read-only)    Settings for space", 
        "noodle_curving": "Curving of the noodle"
      }
    }, 
    "FCurveModifiers": {
      "fields": {
        "active": "Active F-Curve Modifier"
      }
    }, 
    "ArmatureSensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "bone": "Identify the bone to check value from", 
        "value": "Value to be used in comparison", 
        "constraint": "Identify the bone constraint to check value from", 
        "test_type": "Type of value and test"
      }
    }, 
    "ShaderNodeValToRGB": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "color_ramp": "(read-only)"
      }
    }, 
    "NodeSocketIntPercentage": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "Speaker": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "distance_max": "Maximum distance for volume calculation, no matter how far away the object is", 
        "attenuation": "How strong the distance affects volume, depending on distance model", 
        "volume_min": "Minimum volume, no matter how far away the object is", 
        "volume_max": "Maximum volume, no matter how near the object is", 
        "muted": "Mute the speaker", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "sound": "Sound datablock used by this speaker", 
        "cone_angle_inner": "Angle of the inner cone, in degrees, inside the cone the volume is 100 %", 
        "volume": "How loud the sound is", 
        "cone_volume_outer": "Volume outside the outer cone", 
        "cone_angle_outer": "Angle of the outer cone, in degrees, outside this cone the volume is the outer cone volume, between inner and outer cone the volume is interpolated", 
        "distance_reference": "Reference distance at which volume is 100 %", 
        "pitch": "Playback pitch of the sound"
      }
    }, 
    "CompositorNodeAlphaOver": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "premul": "Mix Factor"
      }
    }, 
    "LineStyleColorModifier_Material": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleColorModifier"
      ], 
      "fields": {
        "use_ramp": "Use color ramp to map the BW average into an RGB color", 
        "name": "Name of the modifier", 
        "material_attribute": "Specify which material attribute is used", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "color_ramp": "(read-only)    Color ramp used to change line color"
      }
    }, 
    "SmoothModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "factor": "Strength of modifier effect", 
        "use_y": "Smooth object along Y axis", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point", 
        "use_x": "Smooth object along X axis", 
        "use_z": "Smooth object along Z axis"
      }
    }, 
    "MovieTrackingPlaneTrack": {
      "fields": {
        "use_auto_keying": "Automatic keyframe insertion when moving plane corners", 
        "select": "Plane track is selected", 
        "markers": "(read-only)    Collection of markers in track", 
        "name": "Unique name of track"
      }
    }, 
    "Key": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "animation_data": "(read-only)    Animation data for this datablock", 
        "key_blocks": "(read-only)    Shape keys", 
        "slurph": "Create a delay (in frames) in applying key positions, first vertex goes first", 
        "use_relative": "Make shape keys relative, otherwise play through shapes as a sequence using the evaluation time", 
        "reference_key": "(read-only)", 
        "user": "(read-only)    Datablock using these shape keys", 
        "eval_time": "Evaluation time for absolute shape keys"
      }
    }, 
    "DopeSheet": {
      "fields": {
        "show_expanded_summary": "Collapse summary when shown, so all other channels get hidden (Dope Sheet editors only)", 
        "show_nodes": "Include visualization of node related animation data", 
        "show_shapekeys": "Include visualization of shape key related animation data", 
        "show_armatures": "Include visualization of armature related animation data", 
        "filter_group": "Group that included object should be a member of", 
        "show_worlds": "Include visualization of world related animation data", 
        "show_linestyles": "Include visualization of Line Style related Animation data", 
        "show_metaballs": "Include visualization of metaball related animation data", 
        "show_hidden": "Include channels from objects/bone that are not visible", 
        "show_lamps": "Include visualization of lamp related animation data", 
        "show_meshes": "Include visualization of mesh related animation data", 
        "show_only_errors": "Only include F-Curves and drivers that are disabled or have errors", 
        "show_only_matching_fcurves": "Only include F-Curves with names containing search text", 
        "show_scenes": "Include visualization of scene related animation data", 
        "show_only_selected": "Only include channels relating to selected objects and data", 
        "show_materials": "Include visualization of material related animation data", 
        "show_modifiers": "Include visualization of animation data related to datablocks linked to modifiers", 
        "show_lattices": "Include visualization of lattice related animation data", 
        "show_only_group_objects": "Only include channels from objects in the specified group", 
        "show_transforms": "Include visualization of object-level animation data (mostly transforms)", 
        "filter_fcurve_name": "F-Curve live filtering string", 
        "show_missing_nla": "Include animation data blocks with no NLA data (NLA editor only)", 
        "show_particles": "Include visualization of particle related animation data", 
        "source": "(read-only)    ID-Block representing source data, usually ID_SCE (i.e. Scene)", 
        "show_speakers": "Include visualization of speaker related animation data", 
        "show_textures": "Include visualization of texture related animation data", 
        "show_curves": "Include visualization of curve related animation data", 
        "show_summary": "Display an additional 'summary' line (Dope Sheet editors only)", 
        "show_cameras": "Include visualization of camera related animation data", 
        "show_datablock_filters": "Show options for whether channels related to certain types of data are included"
      }
    }, 
    "MeshVertex": {
      "fields": {
        "index": "(read-only)    Index of this vertex", 
        "normal": "Vertex Normal", 
        "bevel_weight": "Weight used by the Bevel modifier 'Only Vertices' option", 
        "undeformed_co": "(read-only)    For meshes with modifiers applied, the coordinate of the vertex with no deforming modifiers applied, as used for generated texture coordinates", 
        "groups": "(read-only)    Weights for the vertex groups this vertex is member of"
      }
    }, 
    "BlendDataTexts": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "MetaElement": {
      "fields": {
        "use_negative": "Set metaball as negative one", 
        "hide": "Hide element", 
        "rotation": "Normalized quaternion rotation", 
        "stiffness": "Stiffness defines how much of the element to fill", 
        "size_x": "Size of element, use of components depends on element type", 
        "size_y": "Size of element, use of components depends on element type", 
        "type": "Metaball types", 
        "size_z": "Size of element, use of components depends on element type"
      }
    }, 
    "MaintainVolumeConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "free_axis": "The free scaling axis of the object", 
        "volume": "Volume of the bone at rest"
      }
    }, 
    "ColorManagedDisplaySettings": {
      "fields": {
        "display_device": "Display device name"
      }
    }, 
    "OperatorFileListElement": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "name": "Name of a file or directory within a file list"
      }
    }, 
    "CompositorNodeChromaMatte": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "shadow_adjust": "Adjusts the brightness of any shadows captured", 
        "tolerance": "Tolerance for a color to be considered a keying color", 
        "lift": "Alpha lift", 
        "threshold": "Tolerance below which colors will be considered as exact matches", 
        "gain": "Alpha falloff"
      }
    }, 
    "KeyMapItem": {
      "fields": {
        "is_user_modified": "(read-only)    Is this keymap item modified by the user", 
        "idname": "Identifier of operator to call on input event", 
        "show_expanded": "Show key map event and property details in the user interface", 
        "is_user_defined": "(read-only)    Is this keymap item user defined (doesn't just replace a builtin item)", 
        "key_modifier": "Regular key pressed as a modifier", 
        "properties": "(read-only)    Properties to set when the operator is called", 
        "type": "Type of event", 
        "ctrl": "Control key pressed", 
        "id": "(read-only)    ID of the item", 
        "propvalue": "The value this event translates to in a modal keymap", 
        "oskey": "Operating system key pressed", 
        "alt": "Alt key pressed", 
        "any": "Any modifier keys pressed", 
        "map_type": "Type of event mapping", 
        "name": "(read-only)    Name of operator (translated) to call on input event", 
        "active": "Activate or deactivate item", 
        "shift": "Shift key pressed"
      }
    }, 
    "Property": {
      "fields": {
        "is_skip_save": "(read-only)    True when the property is not saved in presets", 
        "icon": "(read-only)    Icon of the item", 
        "srna": "(read-only)    Struct definition used for properties assigned to this item", 
        "is_registered": "(read-only)    Property is registered as part of type registration", 
        "translation_context": "(read-only)    Translation context of the property's name", 
        "is_output": "(read-only)    True when this property is an output value from an RNA function", 
        "type": "(read-only)    Data type of the property", 
        "is_registered_optional": "(read-only)    Property is optionally registered as part of type registration", 
        "is_never_none": "(read-only)    True when this value can't be set to None", 
        "is_argument_optional": "(read-only)    True when the property is optional in a Python function implementing an RNA function", 
        "unit": "(read-only)    Type of units for this property", 
        "is_animatable": "(read-only)    Property is animatable through RNA", 
        "is_library_editable": "(read-only)    Property is editable from linked instances (changes not saved)", 
        "is_required": "(read-only)    False when this property is an optional argument in an RNA function", 
        "is_readonly": "(read-only)    Property is editable through RNA", 
        "description": "(read-only)    Description of the property for tooltips", 
        "subtype": "(read-only)    Semantic interpretation of the property", 
        "name": "(read-only)    Human readable name", 
        "is_hidden": "(read-only)    True when the property is hidden", 
        "is_enum_flag": "(read-only)    True when multiple enums", 
        "is_runtime": "(read-only)    Property has been dynamically created at runtime", 
        "identifier": "(read-only)    Unique name used in the code and scripting"
      }
    }, 
    "HookModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "subtarget": "Name of Parent Bone for hook (if applicable), also recalculates and clears offset", 
        "falloff": "If not zero, the distance from the hook where influence ends", 
        "object": "Parent Object for hook, also recalculates and clears offset", 
        "force": "Relative force of the hook", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }
    }, 
    "Texture": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "contrast": "Adjust the contrast of the texture", 
        "saturation": "Adjust the saturation of colors in the texture", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "intensity": "Adjust the brightness of the texture", 
        "use_nodes": "Make this a node-based texture", 
        "use_preview_alpha": "Show Alpha in Preview Render", 
        "use_color_ramp": "Toggle color ramp operations", 
        "node_tree": "(read-only)    Node tree for node-based textures", 
        "color_ramp": "(read-only)"
      }
    }, 
    "UserPreferences": {
      "fields": {
        "filepaths": "(read-only)    Default paths for external files", 
        "active_section": "Active section of the user preferences shown in the user interface", 
        "system": "(read-only)    Graphics driver and operating system settings", 
        "autoexec_paths": "(read-only)", 
        "ui_styles": "(read-only)", 
        "inputs": "(read-only)    Settings for input devices", 
        "addons": "(read-only)", 
        "edit": "(read-only)    Settings for interacting with Blender data", 
        "themes": "(read-only)", 
        "view": "(read-only)    Preferences related to viewing data"
      }
    }, 
    "EnumPropertyItem": {
      "fields": {
        "icon": "(read-only)    Icon of the item", 
        "description": "(read-only)    Description of the item's purpose", 
        "name": "(read-only)    Human readable name", 
        "value": "(read-only)    Value of the item", 
        "identifier": "(read-only)    Unique name used in the code and scripting"
      }
    }, 
    "ClothCollisionSettings": {
      "fields": {
        "distance_min": "Minimum distance between collision objects before collision response takes in", 
        "use_self_collision": "Enable self collisions", 
        "self_friction": "Friction/damping with self contact", 
        "distance_repel": "Maximum distance to apply repulsion force, must be greater than minimum distance", 
        "collision_quality": "How many collision iterations should be done. (higher is better quality but slower)", 
        "self_distance_min": "0.5 means no distance at all, 1.0 is maximum distance", 
        "repel_force": "Repulsion force to apply on cloth when close to colliding", 
        "friction": "Friction force if a collision happened (higher = less movement)", 
        "group": "Limit colliders to this Group", 
        "use_collision": "Enable collisions with other objects", 
        "self_collision_quality": "How many self collision iterations should be done (higher is better quality but slower)", 
        "vertex_group_self_collisions": "Vertex group to define vertices which are not used during self collisions"
      }
    }, 
    "SoftBodySettings": {
      "fields": {
        "use_diagnose": "Turn on SB diagnose console prints", 
        "use_estimate_matrix": "Estimate matrix... split to COM, ROT, SCALE", 
        "goal_min": "Goal minimum, vertex weights are scaled to match this range", 
        "plastic": "Permanent deform", 
        "ball_damp": "Blending to inelastic collision", 
        "aero": "Make edges 'sail'", 
        "use_auto_step": "Use velocities for automagic step sizes", 
        "pull": "Edge spring stiffness when longer than rest length", 
        "bend": "Bending Stiffness", 
        "use_face_collision": "Faces collide too, can be very slow", 
        "use_edges": "Use Edges as springs", 
        "collision_type": "Choose Collision Type", 
        "goal_spring": "Goal (vertex target position) spring stiffness", 
        "push": "Edge spring stiffness when shorter than rest length", 
        "goal_max": "Goal maximum, vertex weights are scaled to match this range", 
        "mass": "General Mass value", 
        "vertex_group_goal": "Control point weight values", 
        "error_threshold": "The Runge-Kutta ODE solver error limit, low value gives more precision, high values speed", 
        "goal_friction": "Goal (vertex target position) friction", 
        "fuzzy": "Fuzziness while on collision, high values make collision handling faster but less stable", 
        "location_mass_center": "Location of Center of mass", 
        "use_edge_collision": "Edges collide too", 
        "use_stiff_quads": "Add diagonal springs on 4-gons", 
        "rotation_estimate": "Estimated rotation matrix", 
        "ball_stiff": "Ball inflating pressure", 
        "choke": "'Viscosity' inside collision target", 
        "speed": "Tweak timing for physics to control frequency and speed", 
        "step_max": "Maximal # solver steps/frame", 
        "friction": "General media friction for point movements", 
        "damping": "Edge spring friction", 
        "vertex_group_spring": "Control point spring strength values", 
        "use_goal": "Define forces for vertices to stick to animated position", 
        "spring_length": "Alter spring length to shrink/blow up (unit %) 0 to disable", 
        "aerodynamics_type": "Method of calculating aerodynamic interaction", 
        "vertex_group_mass": "Control point mass values", 
        "use_self_collision": "Enable naive vertex ball self collision", 
        "scale_estimate": "Estimated scale matrix", 
        "ball_size": "Absolute ball size or factor if not manually adjusted", 
        "goal_default": "Default Goal (vertex target position) value, when no Vertex Group used", 
        "shear": "Shear Stiffness", 
        "step_min": "Minimal # solver steps/frame", 
        "effector_weights": "(read-only)", 
        "gravity": "Apply gravitation to point movement"
      }
    }, 
    "Library": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "filepath": "Path to the library .blend file", 
        "parent": "(read-only)"
      }
    }, 
    "GPencilLayer": {
      "fields": {
        "show_x_ray": "Make the layer draw in front of objects", 
        "select": "Layer is selected for editing in the Dope Sheet", 
        "lock": "Protect layer from further editing and/or frame changes", 
        "ghost_range_max": "Maximum number of frames on either side of the active frame to show (0 = show the 'first' available sketch on either side)", 
        "use_onion_skinning": "Ghost frames on either side of frame", 
        "info": "Layer name", 
        "show_points": "Draw the points which make up the strokes (for debugging purposes)", 
        "lock_frame": "Lock current frame displayed by layer", 
        "hide": "Set layer Visibility", 
        "color": "Color for all strokes in this layer", 
        "frames": "(read-only)    Sketches for this layer on different frames", 
        "alpha": "Layer Opacity", 
        "line_width": "Thickness of strokes (in pixels)", 
        "active_frame": "(read-only)    Frame currently being displayed for this layer"
      }
    }, 
    "NodeSocketVectorDirection": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "LimitDistanceConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "use_transform_limit": "Transforms are affected by this constraint as well", 
        "distance": "Radius of limiting sphere", 
        "limit_mode": "Distances in relation to sphere of influence to allow", 
        "target": "Target Object", 
        "head_tail": "Target along length of bone: Head=0, Tail=1"
      }
    }, 
    "BlendDataScenes": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "Window": {
      "fields": {
        "screen": "Active screen showing in the window", 
        "height": "(read-only)    Window height", 
        "width": "(read-only)    Window width", 
        "y": "(read-only)    Vertical location of the window", 
        "x": "(read-only)    Horizontal location of the window"
      }
    }, 
    "CyclesMaterialSettings": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "homogeneous_volume": "When using volume rendering, assume volume has the same density everywhere, for faster rendering", 
        "use_transparent_shadow": "Use transparent shadows for this material if it contains a Transparent BSDF, disabling will render faster but not give accurate shadows", 
        "sample_as_light": "Use multiple importance sampling for this material, disabling may reduce overall noise for large objects that emit little light compared to other light sources"
      }
    }, 
    "ShaderNodeTexture": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }
    }, 
    "LockedTrackConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "track_axis": "Axis that points to the target object", 
        "target": "Target Object", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "lock_axis": "Axis that points upward"
      }
    }, 
    "VertexWeightEditModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "add_threshold": "Lower bound for a vertex's weight to be added to the vgroup", 
        "mask_constant": "Global influence of current modifications on vgroup", 
        "remove_threshold": "Upper bound for a vertex's weight to be removed from the vgroup", 
        "mask_texture": "Masking texture", 
        "vertex_group": "Vertex group name", 
        "map_curve": "(read-only)    Custom mapping curve", 
        "mask_vertex_group": "Masking vertex group name", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "mask_tex_uv_layer": "UV map name", 
        "default_weight": "Default weight a vertex will have if it is not in the vgroup", 
        "use_remove": "Remove vertices with weight below threshold from vgroup", 
        "falloff_type": "How weights are mapped to their new values", 
        "use_add": "Add vertices with weight over threshold to vgroup", 
        "mask_tex_map_object": "Which object to take texture coordinates from"
      }
    }, 
    "Pose": {
      "fields": {
        "ik_param": "(read-only)    Parameters for IK solver", 
        "ik_solver": "Selection of IK solver for IK chain", 
        "bone_groups": "(read-only)    Groups of the bones", 
        "animation_visualization": "(read-only)    Animation data for this datablock", 
        "bones": "(read-only)    Individual pose bones for the armature"
      }
    }, 
    "UserPreferencesInput": {
      "fields": {
        "drag_threshold": "Amount of pixels you have to drag before dragging UI items happens", 
        "ndof_panz_invert_axis": "Invert z axis", 
        "ndof_tilt_invert_axis": "Invert tilt axis", 
        "use_mouse_emulate_3_button": "Emulate Middle Mouse with Alt+Left Mouse (doesn't work with Left Mouse Select option)", 
        "ndof_sensitivity": "Overall sensitivity of the 3D Mouse for panning", 
        "ndof_panx_invert_axis": "Invert x axis", 
        "active_keyconfig": "The name of the active key configuration", 
        "ndof_rotate_invert_axis": "Invert rotation axis", 
        "wheel_scroll_lines": "Number of lines scrolled at a time with the mouse wheel", 
        "view_zoom_method": "Which style to use for viewport scaling", 
        "use_trackpad_natural": "If your system uses 'natural' scrolling, this option keeps consistent trackpad usage throughout the UI", 
        "invert_mouse_zoom": "Invert the axis of mouse movement for zooming", 
        "ndof_zoom_invert": "Zoom using opposite direction", 
        "tweak_threshold": "Number of pixels you have to drag before tweak event is triggered", 
        "view_zoom_axis": "Axis of mouse movement to zoom in or out on", 
        "ndof_zoom_updown": "Zoom using up/down on the device (otherwise forward/backward)", 
        "ndof_lock_horizon": "Keep horizon level while flying with 3D Mouse", 
        "mouse_double_click_time": "Time/delay (in ms) for a double click", 
        "use_emulate_numpad": "Main 1 to 0 keys act as the numpad ones (useful for laptops)", 
        "use_mouse_mmb_paste": "In text window, paste with middle mouse button instead of panning", 
        "ndof_view_rotate_method": "Rotation style in the viewport", 
        "select_mouse": "Mouse button used for selection", 
        "use_mouse_continuous": "Allow moving the mouse outside the view on some manipulations (transform, ui control drag)", 
        "ndof_orbit_sensitivity": "Overall sensitivity of the 3D Mouse for orbiting", 
        "view_rotate_method": "Rotation style in the viewport", 
        "invert_zoom_wheel": "Swap the Mouse Wheel zoom direction", 
        "ndof_show_guide": "Display the center and axis during rotation", 
        "ndof_roll_invert_axis": "Invert roll axis", 
        "ndof_fly_helicopter": "Device up/down directly controls your Z position", 
        "ndof_pany_invert_axis": "Invert y axis"
      }
    }, 
    "FreestyleLineStyle": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "panel": "Select the property panel to be shown", 
        "dash1": "Length of the 1st dash for dashed lines", 
        "use_split_pattern": "Enable chain splitting by dashed line patterns", 
        "chaining": "Select the way how feature edges are jointed to form chains", 
        "length_min": "Minimum curvilinear 2D length for the selection of chains", 
        "rounds": "Number of rounds in a sketchy multiple touch", 
        "angle_max": "Maximum 2D angle for splitting chains", 
        "split_length": "Curvilinear 2D length for chain splitting", 
        "geometry_modifiers": "(read-only)    List of stroke geometry modifiers", 
        "use_length_min": "Enable the selection of chains by a minimum 2D length", 
        "color_modifiers": "(read-only)    List of line color modifiers", 
        "use_angle_min": "Split chains at points with angles smaller than the minimum 2D angle", 
        "alpha": "Base alpha transparency, possibly modified by alpha transparency modifiers", 
        "split_gap1": "Length of the 1st gap for splitting", 
        "thickness": "Base line thickness, possibly modified by line thickness modifiers", 
        "split_gap2": "Length of the 2nd gap for splitting", 
        "split_gap3": "Length of the 3rd gap for splitting", 
        "thickness_modifiers": "(read-only)    List of line thickness modifiers", 
        "thickness_position": "Select the position of stroke thickness", 
        "alpha_modifiers": "(read-only)    List of alpha transparency modifiers", 
        "length_max": "Maximum curvilinear 2D length for the selection of chains", 
        "thickness_ratio": "A number between 0 (inside) and 1 (outside) specifying the relative position of stroke thickness", 
        "material_boundary": "If true, chains of feature edges are split at material boundaries", 
        "angle_min": "Minimum 2D angle for splitting chains", 
        "use_angle_max": "Split chains at points with angles larger than the maximum 2D angle", 
        "use_length_max": "Enable the selection of chains by a maximum 2D length", 
        "gap1": "Length of the 1st gap for dashed lines", 
        "caps": "Select the shape of both ends of strokes", 
        "gap2": "Length of the 2nd gap for dashed lines", 
        "color": "Base line color, possibly modified by line color modifiers", 
        "gap3": "Length of the 3rd gap for dashed lines", 
        "use_same_object": "If true, only feature edges of the same object are joined", 
        "use_split_length": "Enable chain splitting by curvilinear 2D length", 
        "split_dash1": "Length of the 1st dash for splitting", 
        "use_dashed_line": "Enable or disable dashed line", 
        "use_chaining": "Enable chaining of feature edges", 
        "split_dash2": "Length of the 2nd dash for splitting", 
        "split_dash3": "Length of the 3rd dash for splitting", 
        "dash2": "Length of the 2nd dash for dashed lines", 
        "dash3": "Length of the 3rd dash for dashed lines"
      }
    }, 
    "BoidRule": {
      "fields": {
        "name": "Boid rule name", 
        "use_in_air": "Use rule when boid is flying", 
        "type": "(read-only)", 
        "use_on_land": "Use rule when boid is on land"
      }
    }, 
    "GlowSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "clamp": "Brightness limit of intensity", 
        "quality": "Accuracy of the blur effect", 
        "use_only_boost": "Show the glow buffer only", 
        "boost_factor": "Brightness multiplier", 
        "blur_radius": "Radius of glow effect", 
        "input_1": "First input for the effect strip", 
        "threshold": "Minimum intensity to trigger a glow", 
        "input_count": "(read-only)"
      }
    }, 
    "RadarSensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "axis": "Along which axis the radar cone is cast", 
        "distance": "Depth of the radar cone", 
        "property": "Only look for objects with this property (blank = all objects)", 
        "angle": "Opening angle of the radar cone (in degrees)"
      }
    }, 
    "Mask": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "frame_start": "First frame of the mask (used for sequencer)", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "layers": "(read-only)    Collection of layers which defines this mask", 
        "active_layer_index": "Index of active layer in list of all mask's layers", 
        "frame_end": "Final frame of the mask (used for sequencer)"
      }
    }, 
    "MaterialVolume": {
      "fields": {
        "cache_resolution": "Resolution of the voxel grid, low resolutions are faster, high resolutions use more memory", 
        "ms_diffusion": "Diffusion factor, the strength of the blurring effect", 
        "ms_intensity": "Multiplier for multiple scattered light energy", 
        "reflection": "Multiplier to make out-scattered light brighter or darker (non-physically correct)", 
        "asymmetry": "Back scattering (-1.0) to Forward scattering (1.0) and the range in between", 
        "density": "The base density of the volume", 
        "light_method": "Method of shading, attenuating, and scattering light through the volume", 
        "emission": "Amount of light that gets emitted by the volume", 
        "scattering": "Amount of light that gets scattered out by the volume - the more out-scattering, the shallower the light will penetrate", 
        "emission_color": "Color of emitted light", 
        "step_method": "Method of calculating the steps through the volume", 
        "reflection_color": "Color of light scattered out of the volume (does not affect transmission)", 
        "density_scale": "Multiplier for the material's density", 
        "step_size": "Distance between subsequent volume depth samples", 
        "ms_spread": "Proportional distance over which the light is diffused", 
        "use_light_cache": "Pre-calculate the shading information into a voxel grid, speeds up shading at slightly less accuracy", 
        "depth_threshold": "Stop ray marching early if transmission drops below this luminance - higher values give speedups in dense volumes at the expense of accuracy", 
        "use_external_shadows": "Receive shadows from sources outside the volume (temporary)", 
        "transmission_color": "Result color of the volume, after other light has been scattered/absorbed"
      }
    }, 
    "FCurveSample": {
      "fields": {
        "co": "Point coordinates", 
        "select": "Selection status"
      }
    }, 
    "CompositorNodeBlur": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_gamma_correction": "Apply filter on gamma corrected values", 
        "use_bokeh": "Use circular filter (slower)", 
        "aspect_correction": "Type of aspect correction to use", 
        "use_variable_size": "Support variable blur per-pixel when using an image for size input", 
        "use_relative": "Use relative (percent) values to define blur radius"
      }
    }, 
    "Curve": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "cycles": "(read-only)    Cycles mesh settings", 
        "use_map_taper": "Map effect of taper object on actually beveled curve", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "show_handles": "Display Bezier handles in editmode", 
        "use_path_follow": "Make curve path children to rotate along the path", 
        "texspace_location": "Texture space location", 
        "splines": "(read-only)    Collection of splines in this curve data object", 
        "taper_object": "Curve object name that defines the taper (width)", 
        "render_resolution_v": "Surface resolution in V direction used while rendering (zero skips this property)", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "render_resolution_u": "Surface resolution in U direction used while rendering (zero skips this property)", 
        "texspace_size": "Texture space size", 
        "extrude": "Amount of curve extrusion when not using a bevel object", 
        "use_stretch": "Option for curve-deform: make deformed child to stretch along entire path", 
        "use_path": "Enable the curve to become a translation path", 
        "materials": "(read-only)", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "dimensions": "Select 2D or 3D curve type", 
        "offset": "Offset the curve to adjust the width of a text", 
        "eval_time": "Parametric position along the length of the curve that Objects 'following' it should be at (position is evaluated by dividing by the 'Path Length' value)", 
        "shape_keys": "(read-only)", 
        "bevel_object": "Curve object name that defines the bevel shape", 
        "show_normal_face": "Display 3D curve normals in editmode", 
        "use_fill_caps": "Fill caps for beveled curves", 
        "resolution_u": "Surface resolution in U direction", 
        "use_deform_bounds": "Option for curve-deform: Use the mesh bounds to clamp the deformation", 
        "fill_mode": "Mode of filling curve", 
        "bevel_resolution": "Bevel resolution when depth is non-zero and no specific bevel object has been defined", 
        "resolution_v": "Surface resolution in V direction", 
        "twist_mode": "The type of tilt calculation for 3D Curves", 
        "use_fill_deform": "Fill curve after applying shape keys and all modifiers", 
        "use_radius": "Option for paths and curve-deform: apply the curve radius with path following it and deforming", 
        "twist_smooth": "Smoothing iteration for tangents", 
        "bevel_depth": "Bevel depth when not using a bevel object", 
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates", 
        "use_time_offset": "Children will use TimeOffs value as path distance offset", 
        "bevel_factor_start": "Factor that defines from where beveling of spline happens (0=from the very beginning, 1=from the very end)", 
        "bevel_factor_end": "Factor that defines to where beveling of spline happens (0=to the very beginning, 1=to the very end)", 
        "path_duration": "The number of frames that are needed to traverse the path, defining the maximum value for the 'Evaluation Time' setting"
      }
    }, 
    "MovieTrackingStabilization": {
      "fields": {
        "influence_rotation": "Influence of stabilization algorithm on footage rotation", 
        "rotation_track": "Track used to compensate rotation", 
        "scale_max": "Limit the amount of automatic scaling", 
        "influence_location": "Influence of stabilization algorithm on footage location", 
        "active_track_index": "Index of active track in stabilization tracks list", 
        "use_2d_stabilization": "Use 2D stabilization for footage", 
        "influence_scale": "Influence of stabilization algorithm on footage scale", 
        "use_autoscale": "Automatically scale footage to cover unfilled areas when stabilizing", 
        "tracks": "(read-only)    Collection of tracks used for stabilization", 
        "filter_type": "Method to use to filter stabilization", 
        "use_stabilize_rotation": "Stabilize horizon line on the shot"
      }
    }, 
    "NodeSocketVectorVelocity": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "MeshSkinVertex": {
      "fields": {
        "use_root": "Vertex is a root for rotation calculations and armature generation", 
        "radius": "Radius of the skin", 
        "use_loose": "If vertex has multiple adjacent edges, it is hulled to them directly"
      }
    }, 
    "MaskSequence": {
      "inherits": [
        "Sequence"
      ], 
      "fields": {
        "use_flip_y": "Flip on the Y axis", 
        "use_flip_x": "Flip on the X axis", 
        "use_crop": "Crop image before processing", 
        "transform": "(read-only)", 
        "use_float": "Convert input to float data", 
        "use_deinterlace": "For video movies to remove fields", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "use_translation": "Translate image before processing", 
        "mask": "Mask that this sequence uses", 
        "use_reverse_frames": "Reverse frame order", 
        "crop": "(read-only)", 
        "strobe": "Only display every nth frame"
      }
    }, 
    "MaterialHalo": {
      "fields": {
        "use_ring": "Render rings over halo", 
        "use_vertex_normal": "Use the vertex normal to specify the dimension of the halo", 
        "use_texture": "Give halo a texture", 
        "seed": "Randomize ring dimension and line location", 
        "use_star": "Render halo as a star", 
        "flare_boost": "Give the flare extra strength", 
        "flare_subflare_size": "Dimension of the sub-flares, dots and circles", 
        "use_extreme_alpha": "Use extreme alpha", 
        "add": "Strength of the add effect", 
        "flare_subflare_count": "Number of sub-flares", 
        "size": "Dimension of the halo", 
        "use_lines": "Render star shaped lines over halo", 
        "star_tip_count": "Number of points on the star shaped halo", 
        "flare_seed": "Offset in the flare seed table", 
        "line_count": "Number of star shaped lines rendered over the halo", 
        "use_flare_mode": "Render halo as a lens flare", 
        "flare_size": "Factor by which the flare is larger than the halo", 
        "use_shaded": "Let halo receive light and shadows from external objects", 
        "ring_count": "Number of rings rendered over the halo", 
        "use_soft": "Soften the edges of halos at intersections with other geometry", 
        "hardness": "Hardness of the halo"
      }
    }, 
    "SpaceOutliner": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_restrict_columns": "Show column", 
        "display_mode": "Type of information to display", 
        "use_filter_case_sensitive": "Only use case sensitive matches of search string", 
        "use_filter_complete": "Only use complete matches of search string", 
        "filter_text": "Live search filtering string"
      }
    }, 
    "Linesets": {
      "fields": {
        "active_index": "Index of active line set slot", 
        "active": "(read-only)    Active line set being displayed"
      }
    }, 
    "CompositorNodeDiffMatte": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "falloff": "Color distances below this additional threshold are partially keyed", 
        "tolerance": "Color distances below this threshold are keyed"
      }
    }, 
    "OutflowFluidSettings": {
      "inherits": [
        "FluidSettings"
      ], 
      "fields": {
        "volume_initialization": "Volume initialization type", 
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)"
      }
    }, 
    "FCurve": {
      "fields": {
        "keyframe_points": "(read-only)    User-editable keyframes", 
        "select": "F-Curve is selected for editing", 
        "lock": "F-Curve's settings cannot be edited", 
        "sampled_points": "(read-only)    Sampled animation data", 
        "is_valid": "False when F-Curve could not be evaluated in past, so should be skipped when evaluating", 
        "hide": "F-Curve and its keyframes are hidden in the Graph Editor graphs", 
        "color": "Color of the F-Curve in the Graph Editor", 
        "color_mode": "Method used to determine color of F-Curve in Graph Editor", 
        "data_path": "RNA Path to property affected by F-Curve", 
        "driver": "(read-only)    Channel Driver (only set for Driver F-Curves)", 
        "group": "Action Group that this F-Curve belongs to", 
        "modifiers": "(read-only)    Modifiers affecting the shape of the F-Curve", 
        "array_index": "Index to the specific property affected by F-Curve if applicable", 
        "mute": "F-Curve is not evaluated"
      }
    }, 
    "OverDropSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "input_2": "Second input for the effect strip", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)"
      }
    }, 
    "BlendDataGroups": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "RenderResult": {
      "fields": {
        "layers": "(read-only)", 
        "resolution_x": "(read-only)", 
        "resolution_y": "(read-only)"
      }
    }, 
    "MaskModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "armature": "Armature to use as source of bones to mask", 
        "invert_vertex_group": "Use vertices that are not part of region defined", 
        "vertex_group": "Vertex group name"
      }
    }, 
    "PivotConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "rotation_range": "Rotation range on which pivoting should occur", 
        "target": "Target Object, defining the position of the pivot when defined", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "use_relative_location": "Offset will be an absolute point in space instead of relative to the target", 
        "offset": "Offset of pivot from target (when set), or from owner's location (when Fixed Position is off), or the absolute pivot point"
      }
    }, 
    "Particle": {
      "fields": {
        "is_visible": "(read-only)", 
        "is_exist": "(read-only)", 
        "hair_keys": "(read-only)", 
        "particle_keys": "(read-only)"
      }
    }, 
    "KinematicConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "lock_rotation_x": "Constraint rotation along X axis", 
        "weight": "For Tree-IK: Weight of position control for this target", 
        "iterations": "Maximum number of solving iterations", 
        "lock_rotation_y": "Constraint rotation along Y axis", 
        "lock_rotation_z": "Constraint rotation along Z axis", 
        "use_rotation": "Chain follows rotation of target", 
        "chain_count": "How many bones are included in the IK effect - 0 uses all bones", 
        "use_tail": "Include bone's tail as last element in chain", 
        "pole_target": "Object for pole rotation", 
        "pole_angle": "Pole rotation offset", 
        "use_location": "Chain follows position of target", 
        "use_stretch": "Enable IK Stretching", 
        "orient_weight": "For Tree-IK: Weight of orientation control for this target", 
        "distance": "Radius of limiting sphere", 
        "limit_mode": "Distances in relation to sphere of influence to allow", 
        "target": "Target Object", 
        "lock_location_z": "Constraint position along Z axis", 
        "reference_axis": "Constraint axis Lock options relative to Bone or Target reference", 
        "lock_location_y": "Constraint position along Y axis", 
        "lock_location_x": "Constraint position along X axis"
      }
    }, 
    "MaskLayer": {
      "fields": {
        "invert": "Invert the mask black/white", 
        "hide_select": "Restrict selection in the viewport", 
        "hide": "Restrict visibility in the viewport", 
        "select": "Layer is selected for editing in the Dope Sheet", 
        "name": "Unique name of layer", 
        "falloff": "Falloff type the feather", 
        "blend": "Method of blending mask layers", 
        "alpha": "Render Opacity", 
        "splines": "(read-only)    Collection of splines which defines this layer", 
        "hide_render": "Restrict renderability"
      }
    }, 
    "VertexColors": {
      "fields": {
        "active_index": "Active vertex color index", 
        "active": "(read-only)    Active vertex color layer"
      }
    }, 
    "SpaceTimeline": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_only_selected": "Show keyframes for active Object and/or its selected bones only", 
        "show_seconds": "Show timing in seconds not frames", 
        "cache_softbody": "Show the active object's softbody point cache", 
        "cache_rigidbody": "Show the active object's Rigid Body cache", 
        "cache_dynamicpaint": "Show the active object's Dynamic Paint cache", 
        "cache_cloth": "Show the active object's cloth point cache", 
        "show_cache": "Show the status of cached frames in the timeline", 
        "cache_smoke": "Show the active object's smoke cache", 
        "cache_particles": "Show the active object's particle point cache", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line"
      }
    }, 
    "CompositorNodeScale": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "space": "Coordinate space to scale relative to", 
        "offset_y": "Offset image vertically (factor of image size)", 
        "frame_method": "How the image fits in the camera frame", 
        "offset_x": "Offset image horizontally (factor of image size)"
      }
    }, 
    "Macro": {
      "fields": {
        "bl_options": "Options for this operator type", 
        "name": "(read-only)", 
        "properties": "(read-only)"
      }
    }, 
    "CompositorNodeGroup": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }
    }, 
    "ConstraintActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "fh_damping": "Damping factor of the force field spring", 
        "fh_force": "Spring force within the force field area", 
        "direction_axis_pos": "Select the axis to be aligned along the reference direction", 
        "range": "Maximum length of ray", 
        "direction": "Direction of the ray", 
        "use_normal": "Set object axis along (local axis) or parallel (global axis) to the normal at hit position", 
        "property": "Ray detects only Objects with this property", 
        "damping": "Damping factor: time constant (in frame) of low pass filter", 
        "use_force_distance": "Force distance of object to point of impact of ray", 
        "use_material_detect": "Detect material instead of property", 
        "material": "Ray detects only Objects with this material", 
        "mode": "The type of the constraint", 
        "angle_min": "Minimum angle (in degree) to maintain with target direction (no correction is done if angle with target direction is between min and max)", 
        "angle_max": "Maximum angle (in degree) allowed with target direction (no correction is done if angle with target direction is between min and max)", 
        "time": "Maximum activation time in frame, 0 for unlimited", 
        "distance": "Keep this distance to target", 
        "use_fh_normal": "Add a horizontal spring force on slopes", 
        "rotation_max": "Reference Direction", 
        "fh_height": "Height of the force field area", 
        "use_persistent": "Persistent actuator: stays active even if ray does not reach target", 
        "use_local": "Set ray along object's axis or global axis", 
        "use_fh_paralel_axis": "Keep object axis parallel to normal", 
        "damping_rotation": "Use a different damping for orientation", 
        "direction_axis": "Select the axis to be aligned along the reference direction"
      }
    }, 
    "NodeGroup": {
      "inherits": [
        "Node", 
        "NodeInternal"
      ], 
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }
    }, 
    "Image": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "field_order": "Order of video fields (select which lines are displayed first)", 
        "filepath": "Image/Movie file name", 
        "has_data": "(read-only)    True if this image has data", 
        "frame_start": "Start frame of an animated texture", 
        "generated_type": "Generated image type", 
        "use_generated_float": "Generate floating point buffer", 
        "use_tiles": "Use of tilemode for faces (default shift-LMB to pick the tile for selected faces)", 
        "filepath_raw": "Image/Movie file name (without data refreshing)", 
        "display_aspect": "Display Aspect for this image, does not affect rendering", 
        "mapping": "Mapping type to use for this image in the game engine", 
        "resolution": "X/Y pixels per meter", 
        "type": "(read-only)    How to generate the image", 
        "file_format": "Format used for re-saving this file", 
        "use_alpha": "Use the alpha channel information from the image or make image fully opaque", 
        "generated_height": "Generated image height", 
        "packed_file": "(read-only)", 
        "bindcode": "(read-only)    OpenGL bindcode", 
        "use_clamp_x": "Disable texture repeating horizontally", 
        "use_clamp_y": "Disable texture repeating vertically", 
        "tiles_y": "Degree of repetition in the Y direction", 
        "tiles_x": "Degree of repetition in the X direction", 
        "is_float": "(read-only)    True if this image is stored in float buffer", 
        "render_slot": "The current render slot displayed, only for viewer type images", 
        "fps": "Speed of the animation in frames per second", 
        "generated_width": "Generated image width", 
        "use_fields": "Use fields of the image", 
        "channels": "(read-only)    Number of channels in pixels buffer", 
        "pixels": "Image pixels in floating point values", 
        "depth": "(read-only)    Image bit depth", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "size": "(read-only)    Width and height in pixels, zero when image data cant be loaded", 
        "frame_end": "End frame of an animated texture", 
        "source": "Where the image comes from", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "use_view_as_render": "Apply render part of display transformation when displaying this image on the screen", 
        "frame_duration": "(read-only)    Duration (in frames) of the image (1 when not a video/sequence)", 
        "is_dirty": "(read-only)    Image has changed and is not saved", 
        "use_animation": "Use as animated texture in the game engine"
      }
    }, 
    "BezierSplinePoint": {
      "fields": {
        "handle_right_type": "Handle types", 
        "co": "Coordinates of the control point", 
        "select_right_handle": "Handle 2 selection status", 
        "hide": "Visibility status", 
        "handle_left_type": "Handle types", 
        "tilt": "Tilt in 3D View", 
        "weight_softbody": "Softbody goal weight", 
        "handle_left": "Coordinates of the first handle", 
        "select_control_point": "Control point selection status", 
        "radius": "Radius for beveling", 
        "select_left_handle": "Handle 1 selection status", 
        "handle_right": "Coordinates of the second handle"
      }
    }, 
    "NodeSocketIntFactor": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "World": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "cycles": "(read-only)    Cycles world settings", 
        "exposure": "Amount of exponential color correction for light", 
        "use_sky_paper": "Flatten blend or texture coordinates", 
        "mist_settings": "(read-only)    World mist settings", 
        "light_settings": "(read-only)    World lighting settings", 
        "cycles_visibility": "(read-only)    Cycles visibility settings", 
        "horizon_color": "Color at the horizon", 
        "zenith_color": "Color at the zenith", 
        "use_sky_blend": "Render background with natural progression from horizon to zenith", 
        "star_settings": "(read-only)    World stars settings", 
        "active_texture": "Active texture slot being displayed", 
        "active_texture_index": "Index of active texture slot", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "ambient_color": "Ambient color of the world", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "use_nodes": "Use shader nodes to render the world", 
        "use_sky_real": "Render background with a real horizon, relative to the camera angle", 
        "color_range": "The color range that will be mapped to 0-1", 
        "node_tree": "(read-only)    Node tree for node based worlds"
      }
    }, 
    "MovieTracking": {
      "fields": {
        "stabilization": "(read-only)", 
        "active_object_index": "Index of active object", 
        "settings": "(read-only)", 
        "camera": "(read-only)", 
        "tracks": "(read-only)    Collection of tracks in this tracking data object", 
        "reconstruction": "(read-only)", 
        "plane_tracks": "(read-only)    Collection of plane tracks in this tracking data object", 
        "objects": "(read-only)    Collection of objects in this tracking data object", 
        "dopesheet": "(read-only)"
      }
    }, 
    "MaskSplines": {
      "fields": {
        "active_point": "Active spline of masking layer", 
        "active": "Active spline of masking layer"
      }
    }, 
    "NearSensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "reset_distance": "The distance where the sensor forgets the actor", 
        "distance": "Trigger distance", 
        "property": "Only look for objects with this property (blank = all objects)"
      }
    }, 
    "CompositorNodeEllipseMask": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "height": "Height of the box", 
        "rotation": "Rotation angle of the box", 
        "width": "Width of the box", 
        "y": "Y position of the middle of the box", 
        "x": "X position of the middle of the box"
      }
    }, 
    "Function": {
      "fields": {
        "is_registered": "(read-only)    Function is registered as callback as part of type registration", 
        "description": "(read-only)    Description of the Function's purpose", 
        "parameters": "(read-only)    Parameters for the function", 
        "is_registered_optional": "(read-only)    Function is optionally registered as callback part of type registration", 
        "use_self_type": "(read-only)    Function passes its self type as an argument (becomes a class method in python if use_self is false)", 
        "identifier": "(read-only)    Unique name used in the code and scripting", 
        "use_self": "(read-only)    Function does not pass its self as an argument (becomes a static method in python)"
      }
    }, 
    "NlaStrip": {
      "fields": {
        "use_animated_influence": "Influence setting is controlled by an F-Curve rather than automatically determined", 
        "scale": "Scaling factor for action", 
        "blend_type": "Method used for combining strip's result with accumulated result", 
        "extrapolation": "Action to take for gaps past the strip extents", 
        "fcurves": "(read-only)    F-Curves for controlling the strip's influence and timing", 
        "select": "NLA Strip is selected", 
        "use_reverse": "NLA Strip is played back in reverse order (only when timing is automatically determined)", 
        "strip_time": "Frame of referenced Action to evaluate", 
        "influence": "Amount the strip contributes to the current result", 
        "use_auto_blend": "Number of frames for Blending In/Out is automatically determined from overlapping strips", 
        "repeat": "Number of times to repeat the action range", 
        "type": "(read-only)    Type of NLA Strip", 
        "action_frame_end": "Last frame from action to use", 
        "use_sync_length": "Update range of frames referenced from action after tweaking strip and its keyframes", 
        "action_frame_start": "First frame from action to use", 
        "blend_in": "Number of frames at start of strip to fade in influence", 
        "use_animated_time_cyclic": "Cycle the animated time within the action start & end", 
        "use_animated_time": "Strip time is controlled by an F-Curve rather than automatically determined", 
        "action": "Action referenced by this strip", 
        "strips": "(read-only)    NLA Strips that this strip acts as a container for (if it is of type Meta)", 
        "active": "(read-only)    NLA Strip is active", 
        "modifiers": "(read-only)    Modifiers affecting all the F-Curves in the referenced Action", 
        "mute": "NLA Strip is not evaluated"
      }
    }, 
    "LineStyleThicknessModifier_DistanceFromObject": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ], 
      "fields": {
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping", 
        "name": "Name of the modifier", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "target": "Target object from which the distance is measured", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "mapping": "Select the mapping type", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "range_max": "Upper bound of the input range the mapping is applied"
      }
    }, 
    "ParticleKey": {
      "fields": {
        "angular_velocity": "Key angular velocity", 
        "time": "Time of key over the simulation", 
        "location": "Key location", 
        "rotation": "Key rotation quaternion", 
        "velocity": "Key velocity"
      }
    }, 
    "BlendDataScreens": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "UILayout": {
      "fields": {
        "enabled": "When false, this (sub)layout is grayed out", 
        "scale_y": "Scale factor along the Y for items in this (sub)layout", 
        "scale_x": "Scale factor along the X for items in this (sub)layout"
      }
    }, 
    "SceneSequence": {
      "inherits": [
        "Sequence"
      ], 
      "fields": {
        "scene_camera": "Override the scenes active camera", 
        "use_deinterlace": "For video movies to remove fields", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "crop": "(read-only)", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_flip_y": "Flip on the Y axis", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_flip_x": "Flip on the X axis", 
        "use_float": "Convert input to float data", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "proxy": "(read-only)", 
        "use_translation": "Translate image before processing", 
        "scene": "Scene that this sequence uses", 
        "use_reverse_frames": "Reverse frame order", 
        "strobe": "Only display every nth frame"
      }
    }, 
    "BlendDataLamps": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "KeyingSet": {
      "fields": {
        "bl_options": "Keying set options", 
        "bl_idname": "If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is \"BUILTIN_KSI_location\", and bl_idname is not set by the script, then bl_idname = \"BUILTIN_KSI_location\")", 
        "type_info": "(read-only)    Callback function defines for built-in Keying Sets", 
        "paths": "(read-only)    Keying Set Paths to define settings that get keyframed together", 
        "bl_description": "A short description of the keying set", 
        "is_path_absolute": "(read-only)    Keying Set defines specific paths/settings to be keyframed (i.e. is not reliant on context info)"
      }
    }, 
    "CompositorNodeLumaMatte": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "limit_max": "Values higher than this setting are 100% opaque", 
        "limit_min": "Values lower than this setting are 100% keyed"
      }
    }, 
    "SmokeDomainSettings": {
      "fields": {
        "start_point": "(read-only)    Start point", 
        "density": "(read-only)    Smoke density", 
        "flame_ignition": "Minimum temperature of flames", 
        "noise_type": "Noise method which is used for creating the high resolution", 
        "flame_max_temp": "Maximum temperature of flames", 
        "flame_vorticity": "Additional vorticity for the flames", 
        "collision_group": "Limit collisions to this group", 
        "use_adaptive_domain": "Adapt simulation resolution and size to fluid", 
        "beta": "How much heat affects smoke motion (higher value results in faster rising smoke)", 
        "fluid_group": "Limit fluid objects to this group", 
        "highres_sampling": "Method for sampling the high resolution flow", 
        "use_dissolve_smoke_log": "Using 1/x", 
        "cell_size": "(read-only)    Cell Size", 
        "additional_res": "Maximum number of additional cells", 
        "alpha": "How much density affects smoke motion (higher value results in faster rising smoke)", 
        "adapt_margin": "Margin added around fluid to minimize boundary interference", 
        "use_dissolve_smoke": "Enable smoke to disappear over time", 
        "time_scale": "Adjust simulation speed", 
        "effector_group": "Limit effectors to this group", 
        "flame_smoke": "Amount of smoke created by burning fuel", 
        "use_high_resolution": "Enable high resolution (using amplification)", 
        "adapt_threshold": "Maximum amount of fluid cell can contain before it is considered empty", 
        "flame_smoke_color": "Color of smoke emitted from burning fuel", 
        "point_cache_compress_type": "Compression method to be used", 
        "strength": "Strength of noise", 
        "vorticity": "Amount of turbulence/rotation in fluid", 
        "show_high_resolution": "Show high resolution (using amplification)", 
        "amplify": "Enhance the resolution of smoke by this factor using noise", 
        "dissolve_speed": "Dissolve Speed", 
        "resolution_max": "Maximal resolution used in the fluid domain", 
        "domain_resolution": "(read-only)    Smoke Grid Resolution", 
        "burning_rate": "Speed of the burning reaction (use larger values for smaller flame)", 
        "effector_weights": "(read-only)", 
        "collision_extents": "Select which domain border will be treated as collision object", 
        "point_cache": "(read-only)"
      }
    }, 
    "ShaderNodeTexMusgrave": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }
    }, 
    "ShaderNodeWireframe": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "use_pixel_size": "Use screen pixel size instead of world units"
      }
    }, 
    "MeshStringPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "CompositorNodeBoxMask": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "height": "Height of the box", 
        "rotation": "Rotation angle of the box", 
        "width": "Width of the box", 
        "y": "Y position of the middle of the box", 
        "x": "X position of the middle of the box"
      }
    }, 
    "MovieTrackingObjectTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "CompositorNodeIDMask": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "index": "Pass index number to convert to alpha", 
        "use_antialiasing": "Apply an anti-aliasing filter to the mask"
      }
    }, 
    "NodeOutputFileSlotLayer": {
      "fields": {
        "name": "OpenEXR layer name used for this slot"
      }
    }, 
    "LineStyleGeometryModifier_GuidingLines": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "type": "(read-only)    Type of the modifier", 
        "offset": "Displacement that is applied to the main direction line along its normal", 
        "expanded": "True if the modifier tab is expanded"
      }
    }, 
    "TextureNodeValToRGB": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ], 
      "fields": {
        "color_ramp": "(read-only)"
      }
    }, 
    "CompositorNodeChannelMatte": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "limit_max": "Values higher than this setting are 100% opaque", 
        "limit_channel": "Limit by this channel's value", 
        "matte_channel": "Channel used to determine matte", 
        "limit_min": "Values lower than this setting are 100% keyed", 
        "limit_method": "Algorithm to use to limit channel"
      }
    }, 
    "LineStyleGeometryModifier_SinusDisplacement": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "wavelength": "Wavelength of the sinus displacement", 
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "phase": "Phase of the sinus displacement", 
        "amplitude": "Amplitude of the sinus displacement"
      }
    }, 
    "MovieTrackingObjects": {
      "fields": {
        "active": "Active object in this tracking data object"
      }
    }, 
    "CollisionSettings": {
      "fields": {
        "absorption": "How much of effector force gets lost during collision with this object (in percent)", 
        "use_particle_kill": "Kill collided particles", 
        "damping_factor": "Amount of damping during particle collision", 
        "friction_factor": "Amount of friction during particle collision", 
        "use": "Enable this objects as a collider for physics systems", 
        "damping_random": "Random variation of damping", 
        "thickness_outer": "Outer face thickness", 
        "damping": "Amount of damping during collision", 
        "friction_random": "Random variation of friction", 
        "thickness_inner": "Inner face thickness", 
        "stickiness": "Amount of stickiness to surface collision", 
        "permeability": "Chance that the particle will pass through the mesh"
      }
    }, 
    "LineStyleGeometryModifier_2DOffset": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "start": "Displacement that is applied from the beginning of the stroke", 
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "y": "Displacement that is applied to the Y coordinates of stroke vertices", 
        "end": "Displacement that is applied from the end of the stroke", 
        "x": "Displacement that is applied to the X coordinates of stroke vertices"
      }
    }, 
    "Menu": {
      "fields": {
        "bl_idname": "If this is set, the menu gets a custom ID, otherwise it takes the name of the class used to define the menu (for example, if the class name is \"OBJECT_MT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_MT_hello\")", 
        "layout": "(read-only)    Defines the structure of the menu in the UI", 
        "bl_label": "The menu label"
      }
    }, 
    "MovieTrackingReconstruction": {
      "fields": {
        "average_error": "(read-only)    Average error of reconstruction", 
        "is_valid": "(read-only)    Is tracking data contains valid reconstruction information", 
        "cameras": "(read-only)    Collection of solved cameras"
      }
    }, 
    "BlendDataTextures": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "Sound": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "filepath": "Sound sample file used by this Sound datablock", 
        "use_mono": "If the file contains multiple audio channels they are rendered to a single one", 
        "packed_file": "(read-only)", 
        "use_memory_cache": "The sound file is decoded and loaded into RAM"
      }
    }, 
    "CopyScaleConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "use_offset": "Add original scale into copied scale", 
        "target": "Target Object", 
        "use_y": "Copy the target's Y scale", 
        "use_x": "Copy the target's X scale", 
        "use_z": "Copy the target's Z scale"
      }
    }, 
    "KeyingSetPaths": {
      "fields": {
        "active_index": "Current Keying Set index", 
        "active": "Active Keying Set used to insert/delete keyframes"
      }
    }, 
    "ActuatorSensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "actuator": "Actuator name, actuator active state modifications will be detected"
      }
    }, 
    "MaskSpline": {
      "fields": {
        "use_self_intersection_check": "Prevent feather from self-intersections", 
        "weight_interpolation": "The type of weight interpolation for spline", 
        "use_cyclic": "Make this spline a closed loop", 
        "points": "(read-only)    Collection of points", 
        "use_fill": "Make this spline filled", 
        "offset_mode": "The method used for calculating the feather offset"
      }
    }, 
    "ShaderNodeMixRGB": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range", 
        "use_alpha": "Include alpha of second input in this operation"
      }
    }, 
    "FieldSettings": {
      "fields": {
        "guide_clump_shape": "Shape of clumping", 
        "texture_nabla": "Defines size of derivative offset used for calculating gradient and curl", 
        "guide_clump_amount": "Amount of clumping", 
        "use_absorption": "Force gets absorbed by collision objects", 
        "use_max_distance": "Use a maximum distance for the field to work", 
        "flow": "Convert effector force into air flow velocity", 
        "guide_kink_type": "Type of periodic offset on the curve", 
        "type": "Type of field", 
        "guide_kink_amplitude": "The amplitude of the offset", 
        "use_smoke_density": "Adjust force strength based on smoke density", 
        "use_guide_path_weight": "Use curve weights to influence the particle influence along the curve", 
        "rest_length": "Rest length of the harmonic force", 
        "guide_kink_shape": "Adjust the offset to the beginning/end", 
        "guide_minimum": "The distance from which particles are affected fully", 
        "inflow": "Inwards component of the vortex force", 
        "use_global_coords": "Use effector/global coordinates for turbulence", 
        "use_multiple_springs": "Every point is effected by multiple springs", 
        "use_object_coords": "Use object/global coordinates for texture", 
        "distance_max": "Maximum distance for the field to work", 
        "distance_min": "Minimum distance for the field's fall-off", 
        "z_direction": "Effect in full or only positive/negative Z direction", 
        "use_2d_force": "Apply force only in 2D", 
        "use_guide_path_add": "Based on distance/falloff it adds a portion of the entire path", 
        "texture": "Texture to use as force", 
        "strength": "Strength of force field", 
        "seed": "Seed of the noise", 
        "use_min_distance": "Use a minimum distance for the field's fall-off", 
        "guide_kink_axis": "Which axis to use for offset", 
        "harmonic_damping": "Damping of the harmonic force", 
        "radial_falloff": "Radial falloff power (real gravitational falloff = 2)", 
        "shape": "Which direction is used to calculate the effector force", 
        "linear_drag": "Drag component proportional to velocity", 
        "falloff_power": "Falloff power (real gravitational falloff = 2)", 
        "radial_max": "Maximum radial distance for the field to work", 
        "size": "Size of the turbulence", 
        "noise": "Amount of noise for the force strength", 
        "use_root_coords": "Texture coordinates from root particle locations", 
        "apply_to_rotation": "Effect particles' dynamic rotation", 
        "apply_to_location": "Effect particles' location", 
        "quadratic_drag": "Drag component proportional to the square of velocity", 
        "radial_min": "Minimum radial distance for the field's fall-off", 
        "guide_free": "Guide-free time from particle life's end", 
        "texture_mode": "How the texture effect is calculated (RGB & Curl need a RGB texture, else Gradient will be used instead)", 
        "guide_kink_frequency": "The frequency of the offset (1/total length)", 
        "use_radial_min": "Use a minimum radial distance for the field's fall-off", 
        "use_radial_max": "Use a maximum radial distance for the field to work", 
        "source_object": "Select domain object of the smoke simulation"
      }
    }, 
    "TrackToConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "up_axis": "Axis that points upward", 
        "track_axis": "Axis that points to the target object", 
        "use_target_z": "Target's Z axis, not World Z axis, will constraint the Up direction", 
        "target": "Target Object", 
        "head_tail": "Target along length of bone: Head=0, Tail=1"
      }
    }, 
    "StretchToConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "rest_length": "Length at rest position", 
        "volume": "Maintain the object's volume as it stretches", 
        "target": "Target Object", 
        "keep_axis": "Axis to maintain during stretch", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "bulge": "Factor between volume variation and stretching"
      }
    }, 
    "Scene": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "cycles": "(read-only)    Cycles render settings", 
        "frame_start": "First frame of the playback/rendering range", 
        "game_settings": "(read-only)", 
        "cycles_curves": "(read-only)    Cycles hair rendering settings", 
        "layers": "Visible layers - Shift-Click to select multiple layers", 
        "active_clip": "Active movie clip used for constraints and viewport drawing", 
        "udk_option_triangulate": "Convert Quads to Triangles", 
        "use_audio_sync": "Play back and sync with audio clock, dropping frames if frame display is too slow", 
        "grease_pencil": "Grease Pencil datablock", 
        "sequencer_colorspace_settings": "(read-only)    Settings of color space sequencer is working in", 
        "udk_option_filename_src": "Sets the name for the files", 
        "display_settings": "(read-only)    Settings of device saved image would be displayed on", 
        "object_bases": "(read-only)", 
        "use_preview_range": "Use an alternative start/end frame for UI playback, rather than the scene start/end frame", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "udk_option_rebuildobjects": "In case of deform skeleton mesh and animations data. This will rebuild objects from raw format on export when checked.", 
        "use_stamp_note": "User defined note for the render stamping", 
        "use_nodes": "Enable the compositing node tree", 
        "active_layer": "(read-only)    Active scene layer index", 
        "objects": "(read-only)", 
        "timeline_markers": "(read-only)    Markers used in all timelines for the current scene", 
        "use_audio_scrub": "Play audio from Sequence Editor while scrubbing", 
        "udkobj_list": "(read-only)", 
        "unit_settings": "(read-only)    Unit editing settings", 
        "udk_option_ignoreactiongroupnames": "This will Ignore Action Set Group Names Check With Armature Bones. It will override armature to set action set.", 
        "background_set": "Background set scene", 
        "frame_preview_start": "Alternative start frame for UI playback", 
        "audio_doppler_factor": "Pitch factor for Doppler effect calculation", 
        "sync_mode": "How to sync playback", 
        "render": "(read-only)", 
        "udkArm_list": "(read-only)", 
        "udk_option_export": "What to export", 
        "udk_option_scale": "In case you don't want to scale objects manually. This will just scale position when on export for the skeleton mesh and animation data.", 
        "udk_copy_merge": "This will copy the mesh(s) and merge the object together and unlink the mesh to be remove while exporting the object.", 
        "udk_option_smoothing_groups": "Activate hard edges as smooth groups", 
        "use_audio": "Play back of audio from Sequence Editor will be muted", 
        "node_tree": "(read-only)    Compositing node tree", 
        "gravity": "Constant acceleration in a given direction", 
        "frame_preview_end": "Alternative end frame for UI playback", 
        "orientations": "(read-only)", 
        "sequence_editor": "(read-only)", 
        "tool_settings": "(read-only)", 
        "use_gravity": "Use global gravity for all dynamics", 
        "udk_option_verbose": "Verbose console output", 
        "rigidbody_world": "(read-only)", 
        "udk_option_clamp_uv": "True is to limit Clamp UV co-ordinates to [0-1]. False is unrestricted (x,y).", 
        "frame_step": "Number of frames to skip forward while rendering/playing back each frame", 
        "keying_sets_all": "(read-only)    All Keying Sets available for use (Builtins and Absolute Keying Sets for this Scene)", 
        "udkmesh_list": "(read-only)", 
        "frame_subframe": "(read-only)", 
        "audio_distance_model": "Distance model for distance attenuation calculation", 
        "view_settings": "(read-only)    Color management settings applied on image before saving", 
        "keying_sets": "(read-only)    Absolute Keying Sets for this Scene", 
        "udk_option_selectobjects": "Select Armature and Mesh(s). Just make sure mesh(s) is parent to armature.", 
        "udk_option_selectanimations": "Select animation(s) for export to psa file.", 
        "frame_current": "Current Frame, to update animation data from python frame_set() instead", 
        "camera": "Active camera, used for rendering the scene", 
        "cursor_location": "3D cursor location", 
        "use_frame_drop": "Play back dropping frames if frame display is too slow", 
        "is_nla_tweakmode": "(read-only)    Whether there is any action referenced by NLA being edited (strictly read-only)", 
        "frame_end": "Final frame of the playback/rendering range", 
        "audio_doppler_speed": "Speed of sound for Doppler effect calculation", 
        "udk_option_export_psa": "Boolean for exporting psa format (Animation Data)", 
        "audio_volume": "Audio volume", 
        "udk_option_export_psk": "Boolean for exporting psk format (Skeleton Mesh)", 
        "udkas_list": "(read-only)", 
        "frame_current_final": "(read-only)    Current frame with subframe and time remapping applied", 
        "world": "World used for rendering the scene"
      }
    }, 
    "MovieClipSequence": {
      "inherits": [
        "Sequence"
      ], 
      "fields": {
        "use_flip_y": "Flip on the Y axis", 
        "use_flip_x": "Flip on the X axis", 
        "use_crop": "Crop image before processing", 
        "transform": "(read-only)", 
        "use_float": "Convert input to float data", 
        "use_deinterlace": "For video movies to remove fields", 
        "undistort": "Use the undistorted version of the clip", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "use_translation": "Translate image before processing", 
        "use_reverse_frames": "Reverse frame order", 
        "crop": "(read-only)", 
        "strobe": "Only display every nth frame", 
        "stabilize2d": "Use the 2D stabilized version of the clip"
      }
    }, 
    "LineStyleAlphaModifier_Material": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleAlphaModifier"
      ], 
      "fields": {
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "name": "Name of the modifier", 
        "material_attribute": "Specify which material attribute is used", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "mapping": "Select the mapping type", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded"
      }
    }, 
    "MaterialSubsurfaceScattering": {
      "fields": {
        "scale": "Object scale factor", 
        "error_threshold": "Error tolerance (low values are slower and higher quality)", 
        "ior": "Index of refraction (higher values are denser)", 
        "color": "Scattering color", 
        "use": "Enable diffuse subsurface scatting effects in a material", 
        "back": "Back scattering weight", 
        "radius": "Mean red/green/blue scattering path length", 
        "front": "Front scattering weight", 
        "color_factor": "Blend factor for SSS colors", 
        "texture_factor": "Texture scattering blend factor"
      }
    }, 
    "FFmpegSettings": {
      "fields": {
        "muxrate": "Mux rate (bits/s(!))", 
        "minrate": "Rate control: min rate (kb/s)", 
        "buffersize": "Rate control: buffer size (kb)", 
        "audio_bitrate": "Audio bitrate (kb/s)", 
        "audio_mixrate": "Audio samplerate(samples/s)", 
        "audio_channels": "Audio channel count", 
        "codec": "FFmpeg codec to use", 
        "format": "Output file format", 
        "gopsize": "Distance between key frames", 
        "audio_codec": "FFmpeg audio codec to use", 
        "use_autosplit": "Autosplit output at 2GB boundary", 
        "use_lossless_output": "Use lossless output for video streams", 
        "video_bitrate": "Video bitrate (kb/s)", 
        "audio_volume": "Audio volume", 
        "packetsize": "Mux packet size (byte)", 
        "maxrate": "Rate control: max rate (kb/s)"
      }
    }, 
    "MovieTrackingSettings": {
      "fields": {
        "use_tripod_solver": "Use special solver to track a stable camera position, such as a tripod", 
        "use_default_normalization": "Normalize light intensities while tracking (slower)", 
        "use_fallback_reconstruction": "Use fallback reconstruction algorithm in cases main reconstruction algorithm failed (could give better solution with bad tracks)", 
        "speed": "Limit speed of tracking to make visual feedback easier (this does not affect the tracking quality)", 
        "default_correlation_min": "Default minimum value of correlation between matched pattern and reference that is still treated as successful tracking", 
        "use_keyframe_selection": "Automatically select keyframes when solving camera/object motion", 
        "use_default_red_channel": "Use red channel from footage for tracking", 
        "reconstruction_success_threshold": "Threshold value of reconstruction error which is still considered successful", 
        "default_margin": "Default distance from image boundary at which marker stops tracking", 
        "default_motion_model": "Default motion model to use for tracking", 
        "use_default_mask": "Use a grease pencil datablock as a mask to use only specified areas of pattern when tracking", 
        "clean_frames": "Effect on tracks which are tracked less than the specified amount of frames", 
        "show_default_expanded": "Show the expanded in the user interface", 
        "use_default_blue_channel": "Use blue channel from footage for tracking", 
        "clean_action": "Cleanup action to execute", 
        "default_pattern_size": "Size of pattern area for newly created tracks", 
        "default_search_size": "Size of search area for newly created tracks", 
        "refine_intrinsics": "Refine intrinsics during camera solving", 
        "distance": "Distance between two bundles used for scene scaling", 
        "use_default_green_channel": "Use green channel from footage for tracking", 
        "object_distance": "Distance between two bundles used for object scaling", 
        "clean_error": "Effect on tracks which have a larger re-projection error", 
        "default_pattern_match": "Track pattern from given frame when tracking marker to next frame", 
        "use_default_brute": "Use a brute-force translation-only initialization when tracking", 
        "default_frames_limit": "Every tracking cycle, this number of frames are tracked"
      }
    }, 
    "LatticePoint": {
      "fields": {
        "co": "(read-only)", 
        "select": "Selection status", 
        "weight_softbody": "Softbody goal weight", 
        "groups": "(read-only)    Weights for the vertex groups this point is member of"
      }
    }, 
    "ClampToConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "main_axis": "Main axis of movement", 
        "use_cyclic": "Treat curve as cyclic curve (no clamping to curve bounding box)", 
        "target": "Target Object (Curves only)"
      }
    }, 
    "BlendData": {
      "fields": {
        "lattices": "(read-only)    Lattice datablocks", 
        "libraries": "(read-only)    Library datablocks", 
        "movieclips": "(read-only)    Movie Clip datablocks", 
        "filepath": "(read-only)    Path to the .blend file", 
        "masks": "(read-only)    Masks datablocks", 
        "metaballs": "(read-only)    Metaball datablocks", 
        "linestyles": "(read-only)    Line Style datablocks", 
        "worlds": "(read-only)    World datablocks", 
        "window_managers": "(read-only)    Window manager datablocks", 
        "grease_pencil": "(read-only)    Grease Pencil datablocks", 
        "curves": "(read-only)    Curve datablocks", 
        "lamps": "(read-only)    Lamp datablocks", 
        "scripts": "(read-only)    Script datablocks (DEPRECATED)", 
        "materials": "(read-only)    Material datablocks", 
        "scenes": "(read-only)    Scene datablocks", 
        "objects": "(read-only)    Object datablocks", 
        "groups": "(read-only)    Group datablocks", 
        "sounds": "(read-only)    Sound datablocks", 
        "cameras": "(read-only)    Camera datablocks", 
        "texts": "(read-only)    Text datablocks", 
        "node_groups": "(read-only)    Node group datablocks", 
        "shape_keys": "(read-only)    Shape Key datablocks", 
        "meshes": "(read-only)    Mesh datablocks", 
        "textures": "(read-only)    Texture datablocks", 
        "armatures": "(read-only)    Armature datablocks", 
        "speakers": "(read-only)    Speaker datablocks", 
        "is_dirty": "(read-only)    Have recent edits been saved to disk", 
        "screens": "(read-only)    Screen datablocks", 
        "is_saved": "(read-only)    Has the current session been saved to disk as a .blend file", 
        "images": "(read-only)    Image datablocks", 
        "brushes": "(read-only)    Brush datablocks", 
        "fonts": "(read-only)    Vector font datablocks", 
        "actions": "(read-only)    Action datablocks", 
        "particles": "(read-only)    Particle datablocks"
      }
    }, 
    "Bone": {
      "fields": {
        "show_wire": "Bone is always drawn as Wireframe regardless of viewport draw mode (useful for non-obstructive custom bone shapes)", 
        "use_inherit_rotation": "Bone inherits rotation or scale from parent bone", 
        "envelope_weight": "Bone deformation weight (for Envelope deform only)", 
        "layers": "Layers bone exists in", 
        "children": "(read-only)    Bones which are children of this bone", 
        "bbone_in": "Length of first Bezier Handle (for B-Bones only)", 
        "envelope_distance": "Bone deformation distance (for Envelope deform only)", 
        "tail_radius": "Radius of tail of bone (for Envelope deform only)", 
        "hide_select": "Bone is able to be selected", 
        "tail_local": "Location of tail end of the bone relative to armature", 
        "use_inherit_scale": "Bone inherits scaling from parent bone", 
        "hide": "Bone is not visible when it is not in Edit Mode (i.e. in Object or Pose Modes)", 
        "use_connect": "(read-only)    When bone has a parent, bone's head is stuck to the parent's tail", 
        "bbone_x": "B-Bone X size", 
        "use_cyclic_offset": "When bone doesn't have a parent, it receives cyclic offset effects (Deprecated)", 
        "use_local_location": "Bone location is set in local space", 
        "head": "Location of head end of the bone relative to its parent", 
        "matrix_local": "4x4 bone matrix relative to armature", 
        "head_radius": "Radius of head of bone (for Envelope deform only)", 
        "use_envelope_multiply": "When deforming bone, multiply effects of Vertex Group weights with Envelope influence", 
        "bbone_z": "B-Bone Z size", 
        "matrix": "3x3 bone matrix", 
        "use_deform": "Enable Bone to deform geometry", 
        "parent": "(read-only)    Parent bone (in same Armature)", 
        "head_local": "Location of head end of the bone relative to armature", 
        "tail": "Location of tail end of the bone", 
        "use_relative_parent": "Object children will use relative transform, like deform", 
        "bbone_out": "Length of second Bezier Handle (for B-Bones only)", 
        "bbone_segments": "Number of subdivisions of bone (for B-Bones only)"
      }
    }, 
    "RaySensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "axis": "Along which axis the ray is cast", 
        "range": "Sense objects no farther than this distance", 
        "ray_type": "Toggle collision on material or property", 
        "property": "Only look for objects with this property (blank = all objects)", 
        "use_x_ray": "Toggle X-Ray option (see through objects that don't have the property)", 
        "material": "Only look for objects with this material (blank = all objects)"
      }
    }, 
    "CyclesMeshSettings": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "displacement_method": "Method to use for the displacement", 
        "use_subdivision": "Subdivide mesh for rendering"
      }
    }, 
    "TextureNodeMixRGB": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ], 
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range", 
        "use_alpha": "Include alpha of second input in this operation"
      }
    }, 
    "TransformSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "use_uniform_scale": "Scale uniformly, preserving aspect ratio", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)"
      }
    }, 
    "MaterialPhysics": {
      "fields": {
        "fh_damping": "Damping of the spring force, when inside the physics distance area", 
        "fh_force": "Upward spring force, when inside the physics distance area", 
        "elasticity": "Elasticity of collisions", 
        "use_fh_normal": "Align dynamic game objects along the surface normal, when inside the physics distance area", 
        "fh_distance": "Distance of the physics area", 
        "friction": "Coulomb friction coefficient, when inside the physics distance area"
      }
    }, 
    "NodeTree": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "inputs": "(read-only)    Node tree inputs", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "nodes": "(read-only)", 
        "bl_label": "The node tree label", 
        "active_input": "Index of the active input", 
        "links": "(read-only)", 
        "bl_icon": "The node tree icon", 
        "type": "(read-only)    Node Tree type (deprecated, bl_idname is the actual node tree type identifier)", 
        "outputs": "(read-only)    Node tree outputs", 
        "active_output": "Index of the active output", 
        "grease_pencil": "Grease Pencil datablock", 
        "view_center": "(read-only)"
      }
    }, 
    "SpaceDopeSheetEditor": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_seconds": "Show timing in seconds not frames", 
        "show_group_colors": "Draw groups and channels with colors matching their corresponding groups", 
        "auto_snap": "Automatic time snapping settings for transformations", 
        "use_auto_merge_keyframes": "Automatically merge nearby keyframes", 
        "show_sliders": "Show sliders beside F-Curve channels", 
        "action": "Action displayed and edited in this space", 
        "use_realtime_update": "When transforming keyframes, changes to the animation data are flushed to other views", 
        "show_pose_markers": "Show markers belonging to the active action instead of Scene markers (Action and Shape Key Editors only)", 
        "use_marker_sync": "Sync Markers with keyframe edits", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "dopesheet": "(read-only)    Settings for filtering animation data", 
        "mode": "Editing context being displayed"
      }
    }, 
    "ColorRamp": {
      "fields": {
        "elements": "(read-only)"
      }
    }, 
    "NodeSocketColor": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "NodeSocketInterfaceFloatAngle": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "ParticleSystemModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "particle_system": "(read-only)    Particle System that this modifier controls"
      }
    }, 
    "ConsoleLine": {
      "fields": {
        "body": "Text in the line", 
        "type": "Console line type when used in scrollback"
      }
    }, 
    "BooleanModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "object": "Mesh object to use for Boolean operation"
      }
    }, 
    "Material": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "cycles": "(read-only)    Cycles material settings", 
        "diffuse_ramp": "(read-only)    Color ramp used to affect diffuse shading", 
        "invert_z": "Render material's faces with an inverted Z buffer (scanline only)", 
        "diffuse_intensity": "Amount of diffuse reflection", 
        "use_cast_approximate": "Allow this material to cast shadows when using approximate ambient occlusion", 
        "halo": "(read-only)    Halo settings for the material", 
        "game_settings": "(read-only)    Game material settings", 
        "strand": "(read-only)    Strand settings for the material", 
        "specular_ramp_factor": "Blending factor (also uses alpha in Colorband)", 
        "diffuse_ramp_factor": "Blending factor (also uses alpha in Colorband)", 
        "type": "Material type defining how the object is rendered", 
        "ambient": "Amount of global ambient color the material receives", 
        "transparency_method": "Method to use for rendering transparency", 
        "use_diffuse_ramp": "Toggle diffuse ramp operations", 
        "use_vertex_color_light": "Add vertex colors as additional lighting", 
        "pass_index": "Index number for the IndexMA render pass", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "diffuse_color": "Diffuse color of the material", 
        "diffuse_fresnel_factor": "Blending factor of Fresnel", 
        "specular_ramp": "(read-only)    Color ramp used to affect specular shading", 
        "use_light_group_local": "When linked in, material uses local light group with the same name", 
        "light_group": "Limit lighting to lamps in this Group", 
        "use_raytrace": "Include this material and geometry that uses it in raytracing calculations", 
        "use_nodes": "Use shader nodes to render the material", 
        "use_transparent_shadows": "Allow this object to receive transparent shadows cast through other objects", 
        "darkness": "Minnaert darkness", 
        "translucency": "Amount of diffuse shading on the back side", 
        "specular_color": "Specular color of the material", 
        "shadow_only_type": "How to draw shadows", 
        "shadow_cast_alpha": "Shadow casting alpha, in use for Irregular and Deep shadow buffer", 
        "use_face_texture_alpha": "Replace the object's base alpha value with alpha from UV map image textures", 
        "use_tangent_shading": "Use the material's tangent vector instead of the normal for shading - for anisotropic shading effects", 
        "use_only_shadow": "Render shadows as the material's alpha value, making the material transparent except for shadowed areas", 
        "use_shadows": "Allow this material to receive shadows", 
        "use_full_oversampling": "Force this material to render full shading/textures for all anti-aliasing samples", 
        "use_face_texture": "Replace the object's base color with color from UV map image textures", 
        "preview_render_type": "Type of preview render", 
        "shadow_ray_bias": "Shadow raytracing bias to prevent terminator problems on shadow boundary", 
        "specular_ior": "Specular index of refraction", 
        "use_ray_shadow_bias": "Prevent raytraced shadow errors on surfaces with smooth shaded normals (terminator problem)", 
        "use_transparency": "Render material as transparent", 
        "use_vertex_color_paint": "Replace object base color with vertex colors (multiply with 'texture face' face assigned textures)", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "specular_ramp_input": "How the ramp maps on the surface", 
        "active_node_material": "Active node material", 
        "use_mist": "Use mist with this material (in world settings)", 
        "node_tree": "(read-only)    Node tree for node based materials", 
        "raytrace_transparency": "(read-only)    Raytraced transparency settings for the material", 
        "diffuse_toon_size": "Size of diffuse toon area", 
        "shadow_buffer_bias": "Factor to multiply shadow buffer bias with (0 is ignore)", 
        "use_sky": "Render this material with zero alpha, with sky background in place (scanline only)", 
        "physics": "(read-only)    Game physics settings", 
        "use_cast_buffer_shadows": "Allow this material to cast shadows from shadow buffer lamps", 
        "specular_toon_smooth": "Smoothness of specular toon area", 
        "use_cast_shadows_only": "Make objects with this material appear invisible (not rendered), only casting shadows", 
        "specular_alpha": "Alpha transparency for specular areas", 
        "diffuse_ramp_input": "How the ramp maps on the surface", 
        "specular_slope": "The standard deviation of surface slope", 
        "active_texture": "Active texture slot being displayed", 
        "active_texture_index": "Index of active texture slot", 
        "alpha": "Alpha transparency of the material", 
        "use_cubic": "Use cubic interpolation for diffuse values, for smoother transitions", 
        "diffuse_ramp_blend": "Blending method of the ramp and the diffuse color", 
        "use_uv_project": "Use to ensure UV interpolation is correct for camera projections (use with UV project modifier)", 
        "specular_hardness": "How hard (sharp) the specular reflection is", 
        "use_light_group_exclusive": "Material uses the light group exclusively - these lamps are excluded from other scene lighting", 
        "offset_z": "Give faces an artificial offset in the Z buffer for Z transparency", 
        "use_specular_ramp": "Toggle specular ramp operations", 
        "diffuse_fresnel": "Power of Fresnel", 
        "emit": "Amount of light to emit", 
        "diffuse_toon_smooth": "Smoothness of diffuse toon area", 
        "specular_intensity": "How intense (bright) the specular reflection is", 
        "raytrace_mirror": "(read-only)    Raytraced reflection settings for the material", 
        "roughness": "Oren-Nayar Roughness", 
        "use_object_color": "Modulate the result with a per-object color", 
        "mirror_color": "Mirror color of the material", 
        "subsurface_scattering": "(read-only)    Subsurface scattering settings for the material", 
        "specular_ramp_blend": "Blending method of the ramp and the specular color", 
        "volume": "(read-only)    Volume settings for the material", 
        "use_textures": "Enable/Disable each texture", 
        "use_shadeless": "Make this material insensitive to light or shadow", 
        "specular_toon_size": "Size of specular toon area"
      }
    }, 
    "DriverVariable": {
      "fields": {
        "name": "Name to use in scripted expressions/functions (no spaces or dots are allowed, and must start with a letter)", 
        "type": "Driver variable type", 
        "targets": "(read-only)    Sources of input data for evaluating this variable"
      }
    }, 
    "VertexGroupElement": {
      "fields": {
        "weight": "Vertex Weight", 
        "group": "(read-only)"
      }
    }, 
    "ThemeFontStyle": {
      "fields": {
        "shadow": "Shadow size in pixels (0, 3 and 5 supported)", 
        "shadow_value": "Shadow color in gray value", 
        "shadow_offset_x": "Shadow offset in pixels", 
        "font_kerning_style": "Which style to use for font kerning", 
        "shadow_offset_y": "Shadow offset in pixels"
      }
    }, 
    "ThemeTimeline": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "MovieTrackingCamera": {
      "fields": {
        "k3": "Third coefficient of third order polynomial radial distortion", 
        "focal_length": "Camera's focal length", 
        "principal": "Optical center of lens", 
        "sensor_width": "Width of CCD sensor in millimeters", 
        "pixel_aspect": "Pixel aspect ratio", 
        "focal_length_pixels": "Camera's focal length", 
        "units": "Units used for camera focal length", 
        "k1": "First coefficient of third order polynomial radial distortion", 
        "k2": "Second coefficient of third order polynomial radial distortion"
      }
    }, 
    "NodeSocketFloatAngle": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "CompositorNodeZcombine": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_antialias_z": "Anti-alias the z-buffer to try to avoid artifacts, mostly useful for Blender renders", 
        "use_alpha": "Take Alpha channel into account when doing the Z operation"
      }
    }, 
    "AnimVizOnionSkinning": {
      "fields": {
        "show_only_selected": "For Pose-Mode drawing, only draw ghosts for selected bones", 
        "frame_after": "Number of frames to show after the current frame (only for 'Around Current Frame' Onion-skinning method)", 
        "frame_start": "Starting frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "frame_step": "Number of frames between ghosts shown (not for 'On Keyframes' Onion-skinning method)", 
        "type": "Method used for determining what ghosts get drawn", 
        "frame_end": "End frame of range of Ghosts to display (not for 'Around Current Frame' Onion-skinning method)", 
        "frame_before": "Number of frames to show before the current frame (only for 'Around Current Frame' Onion-skinning method)"
      }
    }, 
    "KeyConfigurations": {
      "fields": {
        "default": "(read-only)    Default builtin key configuration", 
        "addon": "(read-only)    Key configuration that can be extended by addons, and is added to the active configuration when handling events", 
        "active": "Active key configuration (preset)", 
        "user": "(read-only)    Final key configuration that combines keymaps from the active and addon configurations, and can be edited by the user"
      }
    }, 
    "ThemeBoneColorSet": {
      "fields": {
        "show_colored_constraints": "Allow the use of colors indicating constraints/keyed status", 
        "select": "Color used for selected bones", 
        "normal": "Color used for the surface of bones", 
        "active": "Color used for active bones"
      }
    }, 
    "CompositorNodeColorCorrection": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "midtones_lift": "Midtones lift", 
        "shadows_gain": "Shadows gain", 
        "midtones_gain": "Midtones gain", 
        "midtones_start": "Start of midtones", 
        "master_contrast": "Master contrast", 
        "master_saturation": "Master saturation", 
        "highlights_gain": "Highlights gain", 
        "midtones_gamma": "Midtones gamma", 
        "highlights_gamma": "Highlights gamma", 
        "midtones_contrast": "Midtones contrast", 
        "highlights_lift": "Highlights lift", 
        "shadows_contrast": "Shadows contrast", 
        "green": "Green channel active", 
        "master_gain": "Master gain", 
        "highlights_saturation": "Highlights saturation", 
        "shadows_lift": "Shadows lift", 
        "shadows_gamma": "Shadows gamma", 
        "midtones_saturation": "Midtones saturation", 
        "master_gamma": "Master gamma", 
        "red": "Red channel active", 
        "shadows_saturation": "Shadows saturation", 
        "highlights_contrast": "Highlights contrast", 
        "blue": "Blue channel active", 
        "master_lift": "Master lift", 
        "midtones_end": "End of midtones"
      }
    }, 
    "CompositorNodeInpaint": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "distance": "Distance to inpaint (number of iterations)"
      }
    }, 
    "SceneObjects": {
      "fields": {
        "active": "Active object for this scene"
      }
    }, 
    "MouseSensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "mouse_event": "Type of event this mouse sensor should trigger on", 
        "use_pulse": "Moving the mouse over a different object generates a pulse"
      }
    }, 
    "AdjustmentSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "input_count": "(read-only)"
      }
    }, 
    "NodeSocketVectorTranslation": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "CompositorNodeValToRGB": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "color_ramp": "(read-only)"
      }
    }, 
    "ActionPoseMarkers": {
      "fields": {
        "active_index": "Index of active pose marker", 
        "active": "Active pose marker for this action"
      }
    }, 
    "LineStyleThicknessModifier_Calligraphy": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ], 
      "fields": {
        "orientation": "Angle of the main direction", 
        "thickness_max": "Maximum thickness in the main direction", 
        "name": "Name of the modifier", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "thickness_min": "Minimum thickness in the direction perpendicular to the main direction"
      }
    }, 
    "LineStyleGeometryModifier_PerlinNoise2D": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "seed": "Seed for random number generation (if negative, time is used as a seed instead)", 
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "octaves": "Number of octaves (i.e., the amount of detail of the Perlin noise)", 
        "frequency": "Frequency of the Perlin noise", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "angle": "Displacement direction", 
        "amplitude": "Amplitude of the Perlin noise"
      }
    }, 
    "NodeSocketInterfaceFloatFactor": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "NodeSocketVectorAcceleration": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "GameBooleanProperty": {
      "inherits": [
        "GameProperty"
      ], 
      "fields": {
        "value": "Property value"
      }
    }, 
    "MaterialGameSettings": {
      "fields": {
        "alpha_blend": "Blend Mode for Transparent Faces", 
        "text": "Use material as text in Game Engine", 
        "physics": "Use physics properties of materials", 
        "invisible": "Make face invisible", 
        "use_backface_culling": "Hide Back of the face in Game Engine", 
        "face_orientation": "Especial face orientation options"
      }
    }, 
    "AreaLamp": {
      "inherits": [
        "ID", 
        "Lamp"
      ], 
      "fields": {
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "size_y": "Size of the area of the area Lamp in the Y direction for Rectangle shapes", 
        "use_umbra": "Emphasize parts that are fully shadowed (Constant Jittered sampling)", 
        "use_jitter": "Use noise for sampling  (Constant Jittered sampling)", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "use_dither": "Use 2x2 dithering for sampling  (Constant Jittered sampling)", 
        "gamma": "Light gamma correction value", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "compression_threshold": "Deep shadow map compression threshold", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "shadow_ray_samples_y": "Number of samples taken extra (samples x samples)", 
        "shadow_ray_samples_x": "Number of samples taken extra (samples x samples)", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "shape": "Shape of the area lamp", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "size": "Size of the area of the area Lamp, X direction size for Rectangle shapes", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows"
      }
    }, 
    "SequenceColorBalanceData": {
      "fields": {
        "gamma": "Color balance gamma (midtones)", 
        "lift": "Color balance lift (shadows)", 
        "gain": "Color balance gain (highlights)"
      }
    }, 
    "NodeTreePath": {
      "fields": {
        "node_tree": "(read-only)    Base node tree from context"
      }
    }, 
    "BlendDataSpeakers": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "MovieTrackingPlaneMarker": {
      "fields": {
        "frame": "Frame number marker is keyframed on", 
        "corners": "Array of coordinates which represents UI rectangle corners in frame normalized coordinates", 
        "mute": "Is marker muted for current frame"
      }
    }, 
    "DecimateModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "delimit": "Limit merging geometry", 
        "face_count": "(read-only)    The current number of faces in the decimated mesh", 
        "angle_limit": "Only dissolve angles below this (planar only)", 
        "ratio": "Ratio of triangles to reduce to (collapse only)", 
        "iterations": "Number of times reduce the geometry (unsubdivide only)", 
        "invert_vertex_group": "Invert vertex group influence (collapse only)", 
        "use_dissolve_boundaries": "Dissolve all vertices inbetween face boundaries (planar only)", 
        "vertex_group": "Vertex group name (collapse only)", 
        "use_collapse_triangulate": "Keep triangulated faces resulting from decimation (collapse only)"
      }
    }, 
    "CompositorNodeKeying": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "edge_kernel_tolerance": "Tolerance to pixels inside kernel which are treating as belonging to the same plane", 
        "clip_white": "Value of non-scaled matte pixel which considers as fully foreground pixel", 
        "clip_black": "Value of non-scaled matte pixel which considers as fully background pixel", 
        "screen_balance": "Balance between two non-primary channels primary channel is comparing against", 
        "despill_factor": "Factor of despilling screen color from image", 
        "despill_balance": "Balance between non-key colors used to detect amount of key color to be removed", 
        "feather_falloff": "Falloff type the feather", 
        "edge_kernel_radius": "Radius of kernel used to detect whether pixel belongs to edge", 
        "blur_pre": "Chroma pre-blur size which applies before running keyer", 
        "dilate_distance": "Matte dilate/erode side", 
        "blur_post": "Matte blur size which applies after clipping and dilate/eroding", 
        "feather_distance": "Distance to grow/shrink the feather"
      }
    }, 
    "MovieTrackingObject": {
      "fields": {
        "scale": "Scale of object solution in camera space", 
        "keyframe_b": "Second keyframe used for reconstruction initialization", 
        "name": "Unique name of object", 
        "keyframe_a": "First keyframe used for reconstruction initialization", 
        "is_camera": "(read-only)    Object is used for camera tracking", 
        "tracks": "(read-only)    Collection of tracks in this tracking data object", 
        "reconstruction": "(read-only)", 
        "plane_tracks": "(read-only)    Collection of plane tracks in this tracking data object"
      }
    }, 
    "CompositorNodeColorBalance": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "gamma": "Correction for Midtones", 
        "slope": "Correction for Highlights", 
        "lift": "Correction for Shadows", 
        "power": "Correction for Midtones", 
        "offset": "Correction for Shadows", 
        "gain": "Correction for Highlights"
      }
    }, 
    "ThemeSequenceEditor": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeDopeSheet": {
      "fields": {
        "summary": "Color of summary channel", 
        "space_list": "(read-only)    Settings for space list", 
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeUserPreferences": {
      "fields": {
        "space": "(read-only)    Settings for space"
      }
    }, 
    "ThemeGradientColors": {
      "fields": {
        "show_grad": "Do a gradient for the background of the viewport working area"
      }
    }, 
    "CastModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "use_transform": "Use object transform to control projection shape", 
        "cast_type": "Target object shape", 
        "radius": "Only deform vertices within this distance from the center of the effect (leave as 0 for infinite.)", 
        "object": "Control object: if available, its location determines the center of the effect", 
        "vertex_group": "Vertex group name", 
        "use_radius_as_size": "Use radius as size of projection shape (0 = auto)", 
        "size": "Size of projection shape (leave as 0 for auto)"
      }
    }, 
    "CopyLocationConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "invert_y": "Invert the Y location", 
        "invert_z": "Invert the Z location", 
        "use_offset": "Add original location into copied location", 
        "target": "Target Object", 
        "head_tail": "Target along length of bone: Head=0, Tail=1", 
        "use_y": "Copy the target's Y location", 
        "invert_x": "Invert the X location", 
        "use_x": "Copy the target's X location", 
        "use_z": "Copy the target's Z location"
      }
    }, 
    "VertexPaint": {
      "inherits": [
        "Paint"
      ], 
      "fields": {
        "use_group_restrict": "Restrict painting to vertices in the group", 
        "use_all_faces": "Paint on all faces inside brush", 
        "use_spray": "Keep applying paint effect while holding mouse", 
        "use_normal": "Apply the vertex normal before painting"
      }
    }, 
    "MaterialSlot": {
      "fields": {
        "name": "(read-only)    Material slot name", 
        "link": "Link material to object or the object's data", 
        "material": "Material datablock used by this material slot"
      }
    }, 
    "NlaTrack": {
      "fields": {
        "is_solo": "NLA Track is evaluated itself (i.e. active Action and all other NLA Tracks in the same AnimData block are disabled)", 
        "select": "NLA Track is selected", 
        "lock": "NLA Track is locked", 
        "strips": "(read-only)    NLA Strips on this NLA-track", 
        "active": "(read-only)    NLA Track is active", 
        "mute": "NLA Track is not evaluated"
      }
    }, 
    "LineStyleGeometryModifier_PerlinNoise1D": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "seed": "Seed for random number generation (if negative, time is used as a seed instead)", 
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "octaves": "Number of octaves (i.e., the amount of detail of the Perlin noise)", 
        "frequency": "Frequency of the Perlin noise", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "angle": "Displacement direction", 
        "amplitude": "Amplitude of the Perlin noise"
      }
    }, 
    "CompositorNodeTransform": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "filter_type": "Method to use to filter transform"
      }
    }, 
    "ShaderNodeSubsurfaceScattering": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "falloff": "Function to determine how much light nearby points contribute based on their distance to the shading point"
      }
    }, 
    "CompositorNodeComposite": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_alpha": "Colors are treated alpha premultiplied, or colors output straight (alpha gets set to 1)"
      }
    }, 
    "ShaderNodeTexWave": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "color_mapping": "(read-only)    Color mapping settings"
      }
    }, 
    "BoneGroups": {
      "fields": {
        "active_index": "Active index in bone groups array", 
        "active": "Active bone group for this pose"
      }
    }, 
    "CameraSolverConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "clip": "Movie Clip to get tracking data from", 
        "use_active_clip": "Use active clip defined in scene"
      }
    }, 
    "Sculpt": {
      "inherits": [
        "Paint"
      ], 
      "fields": {
        "lock_y": "Disallow changes to the Y axis of vertices", 
        "radial_symmetry": "Number of times to copy strokes across the surface", 
        "lock_x": "Disallow changes to the X axis of vertices", 
        "use_symmetry_x": "Mirror brush across the X axis", 
        "use_symmetry_y": "Mirror brush across the Y axis", 
        "show_diffuse_color": "Show diffuse color of object and overlay sculpt mask on top of it", 
        "use_smooth_shading": "Show faces in dynamic-topology mode with smooth shading rather than flat shaded", 
        "use_symmetry_z": "Mirror brush across the Z axis", 
        "lock_z": "Disallow changes to the Z axis of vertices", 
        "use_edge_collapse": "In dynamic-topology mode, collapse short edges in addition to subdividing long ones", 
        "use_deform_only": "Use only deformation modifiers (temporary disable all constructive modifiers except multi-resolution)", 
        "use_symmetry_feather": "Reduce the strength of the brush where it overlaps symmetrical daubs", 
        "detail_size": "Maximum edge length for dynamic topology sculpting (in pixels)", 
        "use_threaded": "Take advantage of multiple CPU cores to improve sculpting performance", 
        "symmetrize_direction": "Source and destination for symmetrize operator"
      }
    }, 
    "RandomSensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "seed": "Initial seed of the generator (choose 0 for not random)"
      }
    }, 
    "ParticleHairKey": {
      "fields": {
        "time": "Relative time of key over hair length", 
        "co": "Location of the hair key in object space", 
        "weight": "Weight for cloth simulation", 
        "co_local": "Location of the hair key in its local coordinate system, relative to the emitting face"
      }
    }, 
    "FluidMeshVertex": {
      "fields": {
        "velocity": "(read-only)"
      }
    }, 
    "CopyTransformsConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "target": "Target Object", 
        "head_tail": "Target along length of bone: Head=0, Tail=1"
      }
    }, 
    "Modifier": {
      "fields": {
        "show_render": "Use modifier during rendering", 
        "show_on_cage": "Enable direct editing of modifier control cage", 
        "show_viewport": "Display modifier in realtime", 
        "show_expanded": "Set modifier expanded in the user interface", 
        "name": "Modifier name", 
        "use_apply_on_spline": "Apply this and all preceding deformation modifiers on splines' points rather than on filled curve/surface", 
        "show_in_editmode": "Use modifier while in the Edit mode", 
        "type": "(read-only)"
      }
    }, 
    "CompositorNodeBokehImage": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "flaps": "Number of flaps", 
        "rounding": "Level of rounding of the bokeh", 
        "catadioptric": "Level of catadioptric of the bokeh", 
        "shift": "Shift of the lens components", 
        "angle": "Angle of the bokeh"
      }
    }, 
    "ShaderNodeVectorTransform": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "convert_to": "Space to convert to", 
        "convert_from": "Space to convert from"
      }
    }, 
    "CompositorNodeDistanceMatte": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "falloff": "Color distances below this additional threshold are partially keyed", 
        "tolerance": "Color distances below this threshold are keyed"
      }
    }, 
    "Group": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "dupli_offset": "Offset from the origin to use when instancing as DupliGroup", 
        "layers": "Layers visible when this group is instanced as a dupli", 
        "objects": "(read-only)    A collection of this groups objects"
      }
    }, 
    "MulticamSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "animation_offset_end": "Animation end offset (trim end)", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "input_count": "(read-only)"
      }
    }, 
    "RemeshModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "sharpness": "Tolerance for outliers; lower values filter noise while higher values will reproduce edges closer to the input", 
        "scale": "The ratio of the largest dimension of the model over the size of the grid", 
        "octree_depth": "Resolution of the octree; higher values give finer details", 
        "use_smooth_shade": "Output faces with smooth shading rather than flat shaded", 
        "threshold": "If removing disconnected pieces, minimum size of components to preserve as a ratio of the number of polygons in the largest component"
      }
    }, 
    "VertexWeightMixModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "vertex_group_a": "First vertex group name", 
        "vertex_group_b": "Second vertex group name", 
        "mask_vertex_group": "Masking vertex group name", 
        "mix_set": "Which vertices should be affected", 
        "mask_constant": "Global influence of current modifications on vgroup", 
        "default_weight_b": "Default weight a vertex will have if it is not in the second B vgroup", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "default_weight_a": "Default weight a vertex will have if it is not in the first A vgroup", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "mix_mode": "How weights from vgroup B affect weights of vgroup A", 
        "mask_texture": "Masking texture", 
        "mask_tex_uv_layer": "UV map name", 
        "mask_tex_map_object": "Which object to take texture coordinates from"
      }
    }, 
    "FreestyleModuleSettings": {
      "fields": {
        "use": "Enable or disable this style module during stroke rendering", 
        "script": "Python script to define a style module"
      }
    }, 
    "ShapeKey": {
      "fields": {
        "frame": "(read-only)    Frame for absolute keys", 
        "slider_min": "Minimum for slider", 
        "name": "Name of Shape Key", 
        "value": "Value of shape key at the current frame", 
        "slider_max": "Maximum for slider", 
        "data": "(read-only)", 
        "relative_key": "Shape used as a relative key", 
        "interpolation": "Interpolation type for absolute shape keys", 
        "vertex_group": "Vertex weight group, to blend with basis shape", 
        "mute": "Mute this shape key"
      }
    }, 
    "ObjectBase": {
      "fields": {
        "select": "Object base selection state", 
        "layers": "Layers the object base is on", 
        "object": "(read-only)    Object this base links to", 
        "layers_local_view": "(read-only)    3D local view layers the object base is on"
      }
    }, 
    "NodeSocketFloatTime": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "VertexWeightProximityModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "mask_constant": "Global influence of current modifications on vgroup", 
        "max_dist": "Distance mapping to weight 1.0", 
        "mask_texture": "Masking texture", 
        "min_dist": "Distance mapping to weight 0.0", 
        "vertex_group": "Vertex group name", 
        "proximity_geometry": "Use the shortest computed distance to target object's geometry as weight", 
        "mask_vertex_group": "Masking vertex group name", 
        "mask_tex_use_channel": "Which texture channel to use for masking", 
        "mask_tex_mapping": "Which texture coordinates to use for mapping", 
        "target": "Object to calculate vertices distances from", 
        "mask_tex_uv_layer": "UV map name", 
        "proximity_mode": "Which distances to target object to use", 
        "falloff_type": "How weights are mapped to their new values", 
        "mask_tex_map_object": "Which object to take texture coordinates from"
      }
    }, 
    "DupliObject": {
      "fields": {
        "particle_system": "(read-only)    Particle system that this dupli object was instanced from", 
        "persistent_id": "(read-only)    Persistent identifier for inter-frame matching of objects with motion blur", 
        "index": "(read-only)    Index in the lowest-level dupli list", 
        "hide": "(read-only)    Don't show dupli object in viewport or render", 
        "uv": "(read-only)    UV coordinates in parent object space", 
        "matrix_original": "(read-only)    The original matrix of this object before it was duplicated", 
        "matrix": "(read-only)    Object duplicate transformation matrix", 
        "object": "(read-only)    Object being duplicated", 
        "type": "(read-only)    Duplicator type that generated this dupli object", 
        "orco": "(read-only)    Generated coordinates in parent object space"
      }
    }, 
    "LineStyleThicknessModifier_DistanceFromCamera": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ], 
      "fields": {
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "range_min": "Lower bound of the input range the mapping is applied", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping", 
        "name": "Name of the modifier", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "mapping": "Select the mapping type", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "range_max": "Upper bound of the input range the mapping is applied"
      }
    }, 
    "UnitSettings": {
      "fields": {
        "system_rotation": "Unit to use for displaying/editing rotation values", 
        "system": "The unit system to use for button display", 
        "use_separate": "Display units in pairs (e.g. 1m 0cm)", 
        "scale_length": "Scale to use when converting between blender units and dimensions"
      }
    }, 
    "VoxelData": {
      "fields": {
        "extension": "How the texture is extrapolated past its original bounds", 
        "smoke_data_type": "Simulation value to be used as a texture", 
        "filepath": "The external source data file to use", 
        "still_frame": "The frame number to always use", 
        "use_still_frame": "Always render a still frame from the voxel data sequence", 
        "intensity": "Multiplier for intensity values", 
        "domain_object": "Object used as the smoke simulation domain", 
        "interpolation": "Method to interpolate/smooth values between voxel cells", 
        "resolution": "Resolution of the voxel grid", 
        "file_format": "Format of the source data set to render"
      }
    }, 
    "AlphaUnderSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "input_2": "Second input for the effect strip", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)"
      }
    }, 
    "NodeInternalSocketTemplate": {
      "fields": {
        "name": "(read-only)    Name of the socket", 
        "type": "(read-only)    Data type of the socket", 
        "identifier": "(read-only)    Identifier of the socket"
      }
    }, 
    "FloatProperty": {
      "inherits": [
        "Property"
      ], 
      "fields": {
        "soft_min": "(read-only)    Minimum value used by buttons", 
        "array_length": "(read-only)    Maximum length of the array, 0 means unlimited", 
        "precision": "(read-only)    Number of digits after the dot used by buttons", 
        "default": "(read-only)    Default value for this number", 
        "hard_min": "(read-only)    Minimum value used by buttons", 
        "soft_max": "(read-only)    Maximum value used by buttons", 
        "hard_max": "(read-only)    Maximum value used by buttons", 
        "default_array": "(read-only)    Default value for this array", 
        "step": "(read-only)    Step size used by number buttons, for floats 1/100th of the step size"
      }
    }, 
    "NodeSocketInterfaceInt": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "NodeGroupOutput": {
      "inherits": [
        "Node", 
        "NodeInternal"
      ], 
      "fields": {
        "is_active_output": "True if this node is used as the active group output", 
        "interface": "(read-only)    Interface socket data"
      }
    }, 
    "SpaceConsole": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "history": "(read-only)    Command history", 
        "font_size": "Font size to use for displaying the text", 
        "prompt": "Command line prompt", 
        "language": "Command line prompt language", 
        "scrollback": "(read-only)    Command output"
      }
    }, 
    "Screen": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "scene": "Active scene to be edited in the screen", 
        "areas": "(read-only)    Areas the screen is subdivided into", 
        "is_animation_playing": "(read-only)    Animation playback is active", 
        "show_fullscreen": "(read-only)    An area is maximized, filling this screen"
      }
    }, 
    "ShaderNodeMaterial": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "use_diffuse": "Material Node outputs Diffuse", 
        "use_specular": "Material Node outputs Specular", 
        "invert_normal": "Material Node uses inverted normal"
      }
    }, 
    "ShaderNodeGroup": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "interface": "(read-only)    Interface socket data"
      }
    }, 
    "Camera": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "cycles": "(read-only)    Cycles camera settings", 
        "angle_x": "Camera lens horizontal field of view", 
        "angle_y": "Camera lens vertical field of view", 
        "sensor_width": "Horizontal size of the image sensor area in millimeters", 
        "show_mist": "Draw a line from the Camera to indicate the mist area", 
        "draw_size": "Apparent size of the Camera object in the 3D View", 
        "dof_object": "Use this object to define the depth of field focal point", 
        "type": "Camera types", 
        "show_guide": "Draw overlay", 
        "show_passepartout": "Show a darkened overlay outside the image area in Camera view", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "show_limits": "Draw the clipping range and focus point on the camera", 
        "ortho_scale": "Orthographic Camera scale (similar to zoom)", 
        "clip_end": "Camera far clipping distance", 
        "lens_unit": "Unit to edit lens in for the user interface", 
        "show_sensor": "Show sensor size (film gate) in Camera view", 
        "sensor_fit": "Method to fit image and field of view angle inside the sensor", 
        "shift_x": "Perspective Camera horizontal shift", 
        "clip_start": "Camera near clipping distance", 
        "shift_y": "Perspective Camera vertical shift", 
        "passepartout_alpha": "Opacity (alpha) of the darkened overlay in Camera view", 
        "show_title_safe": "Show TV title safe and action safe zones in Camera view", 
        "lens": "Perspective Camera lens value in millimeters", 
        "angle": "Camera lens field of view", 
        "dof_distance": "Distance to the focus point for depth of field", 
        "show_name": "Show the active Camera's name in Camera view", 
        "sensor_height": "Vertical size of the image sensor area in millimeters"
      }
    }, 
    "MeshSkinVertexLayer": {
      "fields": {
        "name": "Name of skin layer", 
        "data": "(read-only)"
      }
    }, 
    "UserPreferencesView": {
      "fields": {
        "mini_axis_size": "The axes icon's size", 
        "use_global_scene": "Force the current Scene to be displayed in all Screens", 
        "show_tooltips": "Display tooltips", 
        "show_tooltips_python": "Show Python references in tooltips", 
        "manipulator_size": "Diameter of widget, in 10 pixel units", 
        "show_playback_fps": "Show the frames per second screen refresh rate, while animation is played back", 
        "open_left_mouse_delay": "Time in 1/10 seconds to hold the Left Mouse Button before opening the toolbox", 
        "object_origin_size": "Diameter in Pixels for Object/Lamp origin display", 
        "manipulator_handle_size": "Size of widget handles as percentage of widget radius", 
        "rotation_angle": "Rotation step for numerical pad keys (2 4 6 8)", 
        "mini_axis_brightness": "Brightness of the icon", 
        "show_splash": "Display splash screen on startup", 
        "manipulator_hotspot": "Pixel distance around the handles to accept mouse clicks", 
        "smooth_view": "Time to animate the view in milliseconds, zero to disable", 
        "use_mouse_depth_cursor": "Use the depth under the mouse when placing the cursor", 
        "use_mouse_over_open": "Open menu buttons and pulldowns automatically when the mouse is hovering", 
        "show_mini_axis": "Show a small rotating 3D axes in the bottom left corner of the 3D View", 
        "view2d_grid_spacing_min": "Minimum number of pixels between each gridline in 2D Viewports", 
        "use_auto_perspective": "Automatically switch between orthographic and perspective when changing from top/front/side views", 
        "use_directional_menus": "Otherwise menus, etc will always be top to bottom, left to right, no matter opening direction", 
        "open_sublevel_delay": "Time delay in 1/10 seconds before automatically opening sub level menus", 
        "open_right_mouse_delay": "Time in 1/10 seconds to hold the Right Mouse Button before opening the toolbox", 
        "use_zoom_to_mouse": "Zoom in towards the mouse pointer's position in the 3D view, rather than the 2D window center", 
        "use_quit_dialog": "Asks for confirmation when quitting through the window close button", 
        "use_mouse_depth_navigate": "Use the depth under the mouse to improve view pan/rotate/zoom functionality", 
        "show_view_name": "Show the name of the view's direction in each 3D View", 
        "use_camera_lock_parent": "When the camera is locked to the view and in fly mode, transform the parent rather than the camera", 
        "timecode_style": "Format of Time Codes displayed when not displaying timing in terms of frames", 
        "use_global_pivot": "Lock the same rotation/scaling pivot in all 3D Views", 
        "show_large_cursors": "Use large mouse cursors when available", 
        "show_column_layout": "Use a column layout for toolbox", 
        "show_manipulator": "Use 3D transform manipulator", 
        "open_toplevel_delay": "Time delay in 1/10 seconds before automatically opening top level menus", 
        "use_rotate_around_active": "Use selection as the pivot point", 
        "show_object_info": "Display objects name and frame number in 3D view"
      }
    }, 
    "CompositorNodeMapRange": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }
    }, 
    "StucciTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "noise_scale": "Scaling for noise input", 
        "noise_basis": "Noise basis used for turbulence", 
        "turbulence": "Turbulence of the noise"
      }
    }, 
    "ImageUser": {
      "fields": {
        "frame_start": "Global starting frame of the movie/sequence, assuming first picture has a #1", 
        "frame_current": "Current frame number in image sequence or movie", 
        "use_auto_refresh": "Always refresh image on frame changes", 
        "frame_duration": "Number of images of a movie to use", 
        "use_cyclic": "Cycle the images in the movie", 
        "multilayer_layer": "(read-only)    Layer in multilayer image", 
        "frame_offset": "Offset the number of the frame to use in the animation", 
        "multilayer_pass": "(read-only)    Pass in multilayer image", 
        "fields_per_frame": "Number of fields per rendered frame (2 fields is 1 image)"
      }
    }, 
    "ColorBalanceModifier": {
      "inherits": [
        "SequenceModifier"
      ], 
      "fields": {
        "color_balance": "(read-only)"
      }
    }, 
    "FloorConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "floor_location": "Location of target that object will not pass through", 
        "target": "Target Object", 
        "use_sticky": "Immobilize object while constrained", 
        "use_rotation": "Use the target's rotation to determine floor", 
        "offset": "Offset of floor from object origin"
      }
    }, 
    "Controller": {
      "fields": {
        "use_priority": "Mark controller for execution before all non-marked controllers (good for startup scripts)", 
        "show_expanded": "Set controller expanded in the user interface", 
        "states": "Set Controller state index (1 to 30)", 
        "actuators": "(read-only)    The list containing the actuators connected to the controller"
      }
    }, 
    "BlendDataBrushes": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "NodeSocketInterfaceFloatPercentage": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "SplineIKConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "use_chain_offset": "Offset the entire chain relative to the root joint", 
        "use_curve_radius": "Average radius of the endpoints is used to tweak the X and Z Scaling of the bones, on top of XZ Scale mode", 
        "target": "Curve that controls this relationship", 
        "joint_bindings": "(EXPERIENCED USERS ONLY) The relative positions of the joints along the chain, as percentages", 
        "use_y_stretch": "Stretch the Y axis of the bones to fit the curve", 
        "chain_count": "How many bones are included in the chain", 
        "xz_scale_mode": "Method used for determining the scaling of the X and Z axes of the bones", 
        "use_even_divisions": "Ignore the relative lengths of the bones when fitting to the curve"
      }
    }, 
    "BlendDataLattices": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "NodeSocketVector": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "SpaceClipEditor": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_seconds": "Show timing in seconds not frames", 
        "show_graph_frames": "Show curve for per-frame average error (camera motion should be solved first)", 
        "show_graph_hidden": "Include channels from objects/bone that aren't visible", 
        "use_mute_footage": "Mute footage and show black background instead", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "mask": "Mask displayed and edited in this space", 
        "clip_user": "(read-only)    Parameters defining which frame of the movie clip is displayed", 
        "show_marker_pattern": "Show pattern boundbox for markers", 
        "grease_pencil_source": "Where the grease pencil comes from", 
        "show_disabled": "Show disabled tracks from the footage", 
        "show_red_channel": "Show red channel in the frame", 
        "use_grayscale_preview": "Display frame in grayscale mode", 
        "mode": "Editing context being displayed", 
        "show_marker_search": "Show search boundbox for markers", 
        "scopes": "(read-only)    Scopes to visualize movie clip statistics", 
        "show_bundles": "Show projection of 3D markers into footage", 
        "show_grid": "Show grid showing lens distortion", 
        "lock_time_cursor": "Lock curves view to time cursor during playback and tracking", 
        "clip": "Movie clip displayed and edited in this space", 
        "show_stable": "Show stable footage in editor (if stabilization is enabled)", 
        "show_blue_channel": "Show blue channel in the frame", 
        "show_tiny_markers": "Show markers in a more compact manner", 
        "mask_draw_type": "Draw type for mask splines", 
        "path_length": "Length of displaying path, in frames", 
        "lock_selection": "Lock viewport to selected markers during playback", 
        "show_graph_only_selected": "Only include channels relating to selected objects and data", 
        "pivot_point": "Pivot center for rotation/scaling", 
        "show_graph_tracks": "Display the speed curves (in \"x\" direction red, in \"y\" direction green) for the selected tracks", 
        "show_track_path": "Show path of how track moves", 
        "use_manual_calibration": "Use manual calibration helpers", 
        "show_filters": "Show filters for graph editor", 
        "view": "Type of the clip editor view", 
        "show_green_channel": "Show green channel in the frame", 
        "show_names": "Show track names and status"
      }
    }, 
    "SpaceNodeEditor": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "shader_type": "Type of data to take shader from", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "cursor_location": "Location for adding new nodes", 
        "tree_type": "Node tree type to display and edit", 
        "backdrop_x": "Backdrop X offset", 
        "edit_tree": "(read-only)    Node tree being displayed and edited", 
        "id": "(read-only)    Datablock whose nodes are being edited", 
        "show_backdrop": "Use active Viewer Node output as backdrop for compositing nodes", 
        "show_highlight": "Highlight nodes that are being calculated", 
        "id_from": "(read-only)    Datablock from which the edited datablock is linked", 
        "backdrop_y": "Backdrop Y offset", 
        "pin": "Use the pinned node tree", 
        "backdrop_channels": "Channels of the image to draw", 
        "path": "(read-only)    Path from the data block to the currently edited node tree", 
        "texture_type": "Type of data to take texture from", 
        "backdrop_zoom": "Backdrop zoom factor", 
        "use_auto_render": "Re-render and composite changed layers on 3D edits", 
        "use_hidden_preview": "Hide preview for newly creating nodes", 
        "node_tree": "Base node tree from context"
      }
    }, 
    "BlendDataLibraries": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "MeshPolygons": {
      "fields": {
        "active": "The active polygon for this mesh"
      }
    }, 
    "ParticleSettings": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "reactor_factor": "Let the vector away from the target particle's location give the particle a starting speed", 
        "cycles": "(read-only)    Cycles hair settings", 
        "child_nbr": "Number of children/parent", 
        "roughness_endpoint": "Amount of end point rough", 
        "child_length_threshold": "Amount of particles left untouched by child path length", 
        "factor_random": "Give the starting speed a random variation", 
        "kink_frequency": "The frequency of the offset (1/total length)", 
        "adaptive_pixel": "How many pixels path has to cover to make another render segment", 
        "lock_boids_to_surface": "Constrain boids to a surface", 
        "child_radius": "Radius of children around parent", 
        "normal_factor": "Let the surface normal give the particle a starting speed", 
        "particle_factor": "Let the target particle give the particle a starting speed", 
        "child_parting_max": "Maximum root to tip angle (tip distance/root distance for long hair)", 
        "boids": "(read-only)", 
        "effector_amount": "How many particles are effectors (0 is all particles)", 
        "color_maximum": "Maximum length of the particle color vector", 
        "roughness_2_threshold": "Amount of particles left untouched by random rough", 
        "length_random": "Give path length a random variation", 
        "fluid": "(read-only)", 
        "clump_shape": "Shape of clumping", 
        "active_dupliweight": "(read-only)", 
        "roughness_1": "Amount of location dependent rough", 
        "roughness_2": "Amount of random rough", 
        "angular_velocity_factor": "Angular velocity amount (in radians per second)", 
        "path_end": "End time of drawn path", 
        "draw_percentage": "Percentage of particles to display in 3D view", 
        "child_size": "A multiplier for the child particle size", 
        "billboard_object": "Billboards face this object (default is active camera)", 
        "use_dead": "Show particles after they have died", 
        "damping": "Amount of damping", 
        "grid_random": "Add random offset to the grid locations", 
        "hexagonal_grid": "Create the grid in a hexagonal pattern", 
        "distribution": "How to distribute particles on selected element", 
        "hair_length": "Length of the hair", 
        "use_rotation_dupli": "Use object's rotation for duplication (global x-axis is aligned particle rotation axis)", 
        "kink_amplitude": "The amplitude of the offset", 
        "virtual_parents": "Relative amount of virtual parents", 
        "use_global_dupli": "Use object's global coordinates for duplication", 
        "child_size_random": "Random variation to the size of the child particles", 
        "draw_color": "Draw additional particle data as a color", 
        "use_group_pick_random": "Pick objects from group randomly", 
        "use_dynamic_rotation": "Particle rotations are effected by collisions and effectors", 
        "line_length_tail": "Length of the line's tail", 
        "invert_grid": "Invert what is considered object and what is not", 
        "use_parent_particles": "Render parent particles", 
        "kink": "Type of periodic offset on the path", 
        "show_velocity": "Show particle velocity", 
        "billboard_velocity_head": "Scale billboards by velocity", 
        "draw_method": "How particles are drawn in viewport", 
        "child_roundness": "Roundness of children around parent", 
        "use_self_effect": "Particle effectors effect themselves", 
        "use_even_distribution": "Use even distribution from faces based on face areas or edge lengths", 
        "roughness_2_size": "Size of random rough", 
        "timestep": "The simulation timestep per frame (seconds per frame)", 
        "show_health": "Draw boid health", 
        "child_parting_factor": "Create parting in the children based on parent strands", 
        "use_strand_primitive": "Use the strand primitive for rendering", 
        "active_texture": "Active texture slot being displayed", 
        "courant_target": "The relative distance a particle can move before requiring more subframes (target Courant number); 0.01-0.3 is the recommended range", 
        "billboard_velocity_tail": "Scale billboards by velocity", 
        "object_factor": "Let the object give the particle a starting speed", 
        "is_fluid": "(read-only)    Particles were created by a fluid simulation", 
        "use_emit_random": "Emit in random order of elements", 
        "billboard_uv_split": "Number of rows/columns to split UV coordinates for billboards", 
        "show_unborn": "Show particles before they are emitted", 
        "billboard_animation": "How to animate billboard textures", 
        "tangent_factor": "Let the surface tangent give the particle a starting speed", 
        "billboard_offset_split": "How to offset billboard textures", 
        "lifetime": "Life span of the particles", 
        "hair_step": "Number of hair segments", 
        "simplify_transition": "Transition period for fading out strands", 
        "branch_threshold": "Threshold of branching", 
        "jitter_factor": "Amount of jitter applied to the sampling", 
        "use_advanced_hair": "Use full physics calculations for growing hair", 
        "roughness_end_shape": "Shape of end point rough", 
        "dupli_object": "Show this Object in place of particles", 
        "material": "Material used for the particles", 
        "use_absolute_path_time": "Path timing is in absolute frames", 
        "frame_end": "Frame number to stop emitting particles", 
        "use_render_emitter": "Render emitter Object also", 
        "use_group_count": "Use object multiple times in the same group", 
        "kink_shape": "Adjust the offset to the beginning/end", 
        "use_whole_group": "Use whole group at once", 
        "create_long_hair_children": "Calculate children that suit long hair well", 
        "use_render_adaptive": "Draw steps of the particle path", 
        "time_tweak": "A multiplier for physics timestep (1.0 means one frame = 1/25 seconds)", 
        "use_simplify": "Remove child strands as the object becomes smaller on the screen", 
        "billboard_tilt": "Tilt of the billboards", 
        "child_length": "Length of child paths", 
        "simplify_viewport": "Speed of Simplification", 
        "frame_start": "Frame number to start emitting particles", 
        "count": "Total number of particles", 
        "billboard_align": "In respect to what the billboards are aligned", 
        "tangent_phase": "Rotate the surface tangent", 
        "draw_step": "How many steps paths are drawn with (power of 2)", 
        "draw_size": "Size of particles on viewport in pixels (0=default)", 
        "type": "Particle Type", 
        "lock_billboard": "Lock the billboards align axis", 
        "use_hair_bspline": "Interpolate hair using B-Splines", 
        "integrator": "Algorithm used to calculate physics, from the fastest to the most stable/accurate: Midpoint, Euler, Verlet, RK4 (Old)", 
        "show_number": "Show particle number", 
        "mass": "Mass of the particles", 
        "show_size": "Show particle size", 
        "adaptive_angle": "How many degrees path has to curve to make another render segment", 
        "rendered_child_count": "Number of children/parent for rendering", 
        "billboard_tilt_random": "Random tilt of the billboards", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "path_start": "Starting time of drawn path", 
        "child_type": "Create child particles", 
        "kink_flat": "How flat the hairs are", 
        "simplify_rate": "Speed of simplification", 
        "emit_from": "Where to emit particles from", 
        "use_rotations": "Calculate particle rotations", 
        "regrow_hair": "Regrow hair for each frame", 
        "rotation_mode": "Particle orientation axis (does not affect Explode modifier's results)", 
        "roughness_1_size": "Size of location dependent rough", 
        "keyed_loops": "Number of times the keys are looped", 
        "angular_velocity_mode": "What axis is used to change particle rotation with time", 
        "grid_resolution": "The resolution of the particle grid", 
        "line_length_head": "Length of the line's head", 
        "render_type": "How particles are rendered", 
        "lifetime_random": "Give the particle life a random variation", 
        "object_align_factor": "Let the emitter object orientation give the particle a starting speed", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "use_modifier_stack": "Emit particles from mesh with modifiers applied (must use same subsurf level for viewport and render for correct results)", 
        "brownian_factor": "Amount of Brownian motion", 
        "use_multiply_size_mass": "Multiply mass by particle size", 
        "use_size_deflect": "Use particle's size in deflection", 
        "billboard_size": "Scale billboards relative to particle size", 
        "userjit": "Emission locations / face (0 = automatic)", 
        "use_velocity_length": "Multiply line length by particle speed", 
        "simplify_refsize": "Reference size in pixels, after which simplification begins", 
        "phase_factor": "Rotation around the chosen orientation axis", 
        "use_react_start_end": "Give birth to unreacted particles eventually", 
        "use_scale_dupli": "Use object's scale for duplication", 
        "drag_factor": "Amount of air-drag", 
        "size_random": "Give the particle size a random variation", 
        "react_event": "The event of target particles to react on", 
        "dupli_group": "Show Objects in this Group in place of particles", 
        "active_texture_index": "Index of active texture slot", 
        "use_adaptive_subframes": "Automatically set the number of subframes", 
        "phase_factor_random": "Randomize rotation around the chosen orientation axis", 
        "child_parting_min": "Minimum root to tip angle (tip distance/root distance for long hair)", 
        "trail_count": "Number of trail particles", 
        "subframes": "Subframes to simulate for improved stability and finer granularity simulations (dt = timestep / (subframes + 1))", 
        "apply_effector_to_children": "Apply effectors to children", 
        "dupli_weights": "(read-only)    Weights for all of the objects in the dupli group", 
        "use_die_on_collision": "Particles die when they collide with a deflector object", 
        "render_step": "How many steps paths are rendered with (power of 2)", 
        "physics_type": "Particle physics type", 
        "force_field_2": "(read-only)", 
        "rotation_factor_random": "Randomize particle orientation", 
        "force_field_1": "(read-only)", 
        "kink_amplitude_clump": "How much clump affects kink amplitude", 
        "use_react_multiple": "React multiple times", 
        "clump_factor": "Amount of clumping", 
        "effector_weights": "(read-only)", 
        "effect_hair": "Hair stiffness for effectors", 
        "kink_axis": "Which axis to use for offset", 
        "particle_size": "The size of the particles"
      }
    }, 
    "LaplacianSmoothModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "use_normalized": "Improve and stabilize the enhanced shape", 
        "use_volume_preserve": "Apply volume preservation after smooth", 
        "use_y": "Smooth object along Y axis", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point", 
        "use_x": "Smooth object along X axis", 
        "lambda_factor": "Smooth factor effect", 
        "use_z": "Smooth object along Z axis", 
        "lambda_border": "Lambda factor in border"
      }
    }, 
    "CompositorNodeCrop": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_crop_size": "Whether to crop the size of the input image", 
        "relative": "Use relative values to crop image"
      }
    }, 
    "UserPreferencesFilePaths": {
      "fields": {
        "render_output_directory": "The default directory for rendering output, for new scenes", 
        "temporary_directory": "The directory for storing temporary save files", 
        "save_version": "The number of old versions to maintain in the current directory, when manually saving", 
        "animation_player_preset": "Preset configs for external animation players", 
        "use_save_preview_images": "Enables automatic saving of preview images in the .blend file", 
        "script_directory": "Alternate script path, matching the default layout with subdirs: startup, addons & modules (requires restart)", 
        "font_directory": "The default directory to search for loading fonts", 
        "show_thumbnails": "Open in thumbnail view for images and movies", 
        "show_hidden_files_datablocks": "Hide files/datablocks that start with a dot (.*)", 
        "recent_files": "Maximum number of recently opened files to remember", 
        "use_keep_session": "Always load session recovery and save it after quitting Blender", 
        "use_load_ui": "Load user interface setup when loading .blend files", 
        "use_auto_save_temporary_files": "Automatic saving of temporary files in temp directory, uses process ID", 
        "i18n_branches_directory": "The path to the '/branches' directory of your local svn-translation copy, to allow translating from the UI", 
        "sound_directory": "The default directory to search for sounds", 
        "animation_player": "Path to a custom animation/frame sequence player", 
        "auto_save_time": "The time (in minutes) to wait between automatic temporary saves", 
        "use_filter_files": "Display only files with extensions in the image select window", 
        "hide_system_bookmarks": "Hide system bookmarks in the file selector", 
        "image_editor": "Path to an image editor", 
        "use_relative_paths": "Default relative path option for the file selector", 
        "hide_recent_locations": "Hide recent locations in the file selector", 
        "texture_directory": "The default directory to search for textures", 
        "use_file_compression": "Enable file compression when saving .blend files"
      }
    }, 
    "Addon": {
      "fields": {
        "module": "Module name", 
        "preferences": "(read-only)"
      }
    }, 
    "TriangulateModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "use_beauty": "Subdivide across shortest diagonal"
      }
    }, 
    "NodeSocketFloatUnsigned": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "CloudsTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "cloud_type": "Determine whether Noise returns grayscale or RGB values", 
        "noise_scale": "Scaling for noise input", 
        "noise_basis": "Noise basis used for turbulence", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "noise_depth": "Depth of the cloud calculation"
      }
    }, 
    "UDKMeshListPG": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "bselect": "Make sure you have Mesh is parent to Armature.", 
        "otype": "This will be ignore when exported", 
        "bexport": "This object will be export when true."
      }
    }, 
    "WorldLighting": {
      "fields": {
        "use_falloff": "Distance will be used to attenuate shadows", 
        "adapt_to_speed": "Use the speed vector pass to reduce AO samples in fast moving pixels - higher values result in more aggressive sample reduction (requires Vec pass enabled, for Raytrace Adaptive QMC)", 
        "indirect_factor": "Factor for how much surrounding objects contribute to light", 
        "use_cache": "Cache AO results in pixels and interpolate over neighboring pixels for speedup", 
        "correction": "Ad-hoc correction for over-occlusion due to the approximation", 
        "passes": "Number of preprocessing passes to reduce over-occlusion", 
        "use_environment_light": "Add light coming from the environment", 
        "ao_blend_type": "Defines how AO mixes with material shading", 
        "samples": "Amount of ray samples. Higher values give smoother results and longer rendering times", 
        "threshold": "Samples below this threshold will be considered fully shadowed/unshadowed and skipped (for Raytrace Adaptive QMC)", 
        "use_ambient_occlusion": "Use Ambient Occlusion to add shadowing based on distance between objects", 
        "distance": "Length of rays, defines how far away other faces give occlusion effect", 
        "error_threshold": "Low values are slower and higher quality", 
        "use_indirect_light": "Add indirect light bouncing of surrounding objects", 
        "environment_color": "Defines where the color of the environment light comes from", 
        "environment_energy": "Defines the strength of environment light", 
        "ao_factor": "Factor for ambient occlusion blending", 
        "falloff_strength": "Attenuation falloff strength, the higher, the less influence distant objects have", 
        "indirect_bounces": "Number of indirect diffuse light bounces", 
        "bias": "Bias (in radians) to prevent smoothed faces from showing banding (for Raytrace Constant Jittered)", 
        "sample_method": "Method for generating shadow samples (for Raytrace)"
      }
    }, 
    "Panel": {
      "fields": {
        "bl_options": "Options for this panel type", 
        "bl_idname": "If this is set, the panel gets a custom ID, otherwise it takes the name of the class used to define the panel. For example, if the class name is \"OBJECT_PT_hello\", and bl_idname is not set by the script, then bl_idname = \"OBJECT_PT_hello\"", 
        "bl_context": "The context in which the panel belongs to. (TODO: explain the possible combinations bl_context/bl_region_type/bl_space_type)", 
        "text": "XXX todo", 
        "bl_space_type": "The space where the panel is going to be used in", 
        "layout": "(read-only)    Defines the structure of the panel in the UI", 
        "bl_label": "The panel label, shows up in the panel header at the right of the triangle used to collapse the panel", 
        "bl_region_type": "The region where the panel is going to be used in"
      }
    }, 
    "ColorRampElement": {
      "fields": {
        "position": "Set position of selected color stop", 
        "color": "Set color of selected color stop"
      }
    }, 
    "EnvironmentMapTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "use_filter_size_min": "Use Filter Size as a minimal filter value in pixels", 
        "filter_eccentricity": "Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)", 
        "environment_map": "(read-only)    Get the environment map associated with this texture", 
        "image": "Source image file to read the environment map from", 
        "filter_probes": "Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)", 
        "use_mipmap_gauss": "Use Gauss filter to sample down MIP maps", 
        "use_mipmap": "Use auto-generated MIP maps for the image", 
        "filter_size": "Multiply the filter size used by MIP Map and Interpolation", 
        "filter_type": "Texture filter to use for sampling image"
      }
    }, 
    "LatticeModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "strength": "Strength of modifier effect", 
        "object": "Lattice object to deform with", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point"
      }
    }, 
    "FreestyleLineSet": {
      "fields": {
        "edge_type_combination": "Set the combination operation for conditions on feature edge types", 
        "visibility": "Determine how to use visibility for feature edge selection", 
        "select_external_contour": "Select external contours", 
        "exclude_edge_mark": "Exclude edge marks", 
        "face_mark_negation": "Set the negation operation for the condition on face marks", 
        "select_material_boundary": "Select edges at material boundaries", 
        "select_crease": "Select crease edges", 
        "select_silhouette": "Select silhouette edges", 
        "select_contour": "Select contours", 
        "exclude_ridge_valley": "Exclude ridges and valleys", 
        "select_suggestive_contour": "Select suggestive contours", 
        "name": "Line set name", 
        "select_by_face_marks": "Select feature edges by face marks", 
        "exclude_contour": "Exclude contours", 
        "qi_start": "First QI value of the QI range", 
        "exclude_silhouette": "Exclude silhouette edges", 
        "exclude_material_boundary": "Exclude edges at material boundaries", 
        "exclude_crease": "Exclude crease edges", 
        "exclude_border": "Exclude border edges", 
        "face_mark_condition": "Set a feature edge selection condition on face marks", 
        "select_by_group": "Select feature edges based on a group of objects", 
        "group_negation": "Set the negation operation for conditions on feature edge types", 
        "show_render": "Enable or disable this line set during stroke rendering", 
        "edge_type_negation": "Set the negation operation for conditions on feature edge types", 
        "qi_end": "Last QI value of the QI range", 
        "select_by_visibility": "Select feature edges based on visibility", 
        "select_ridge_valley": "Select ridges and valleys", 
        "exclude_suggestive_contour": "Exclude suggestive contours", 
        "exclude_external_contour": "Exclude external contours", 
        "select_border": "Select border edges", 
        "select_by_edge_types": "Select feature edges based on edge types", 
        "group": "A group of objects based on which feature edges are selected", 
        "select_by_image_border": "Select feature edges by image border (less memory consumption)", 
        "select_edge_mark": "Select edge marks", 
        "linestyle": "Line style settings"
      }
    }, 
    "AlphaOverSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "input_2": "Second input for the effect strip", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)"
      }
    }, 
    "TexMapping": {
      "fields": {
        "min": "Minimum value for clipping", 
        "use_max": "Whether to use maximum clipping value", 
        "max": "Maximum value for clipping", 
        "use_min": "Whether to use minimum clipping value", 
        "vector_type": "Type of vector that the mapping transforms"
      }
    }, 
    "CurveSplines": {
      "fields": {
        "active": "Active curve spline"
      }
    }, 
    "CompositorNodeCurveRGB": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "mapping": "(read-only)"
      }
    }, 
    "UVTextures": {
      "fields": {
        "active_index": "Active UV Map index", 
        "active": "Active UV Map"
      }
    }, 
    "Object": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "use_dupli_vertices_rotation": "Rotate dupli according to vertex normal", 
        "dupli_type": "If not None, object duplication method to use", 
        "location": "Location of the object", 
        "layers": "Layers the object is on", 
        "show_all_edges": "Display all edges for mesh objects", 
        "particle_systems": "(read-only)    Particle systems emitted from the object", 
        "type": "(read-only)    Type of Object", 
        "grease_pencil": "Grease Pencil datablock", 
        "rotation_quaternion": "Rotation in Quaternions", 
        "empty_image_offset": "Origin offset distance", 
        "use_extra_recalc_data": "Refresh this object's data again on frame changes, dependency graph hack", 
        "active_shape_key": "(read-only)    Current shape key", 
        "empty_draw_size": "Size of display for empties in the viewport", 
        "up_axis": "Axis that points in the upward direction (applies to DupliFrame when parent 'Follow' is enabled)", 
        "pass_index": "Index number for the IndexOB render pass", 
        "hide": "Restrict visibility in the viewport", 
        "vertex_groups": "(read-only)    Vertex groups of the object", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "active_material_index": "Index of active material slot", 
        "bound_box": "(read-only)    Object's bounding box in object-space coordinates, all values are -1.0 when not available", 
        "delta_rotation_euler": "Extra rotation added to the rotation of the object (when using Euler rotations)", 
        "matrix_local": "Parent relative transformation matrix", 
        "collision": "(read-only)    Settings for using the object as a collider in physics simulation", 
        "delta_scale": "Extra scaling added to the scale of the object", 
        "show_transparent": "Display material transparency in the object (unsupported for duplicator drawing)", 
        "dupli_faces_scale": "Scale the DupliFace objects", 
        "select": "Object selection state", 
        "proxy_group": "(read-only)    Library group duplicator object this proxy object controls", 
        "constraints": "(read-only)    Constraints affecting the transformation of the object", 
        "use_slow_parent": "Create a delay in the parent relationship (beware: this isn't renderfarm safe and may be invalid after jumping around the timeline)", 
        "parent": "Parent Object", 
        "delta_location": "Extra translation added to the location of the object", 
        "pose_library": "Action used as a pose library for armatures", 
        "dupli_frames_off": "Recurring frames to exclude from the Dupliframes", 
        "dupli_frames_end": "End frame for DupliFrames", 
        "lock_scale": "Lock editing of scale in the interface", 
        "show_only_shape_key": "Always show the current Shape for this Object", 
        "rigid_body": "(read-only)    Settings for rigid body simulation", 
        "show_name": "Display the object's name", 
        "dupli_list": "(read-only)    Object duplis", 
        "show_wire": "Add the object's wireframe over solid drawing", 
        "scale": "Scaling of the object", 
        "use_dupli_faces_scale": "Scale dupli based on face size", 
        "parent_bone": "Name of parent bone in case of a bone parenting relation", 
        "matrix_basis": "Matrix access to location, rotation and scale (including deltas), before constraints and parenting are applied", 
        "use_dynamic_topology_sculpting": "(read-only)", 
        "data": "Object data", 
        "rotation_euler": "Rotation in Eulers", 
        "mode": "(read-only)    Object interaction mode", 
        "hide_select": "Restrict selection in the viewport", 
        "pose": "(read-only)    Current pose for armatures", 
        "dupli_group": "Instance an existing group", 
        "show_texture_space": "Display the object's texture space", 
        "soft_body": "(read-only)    Settings for soft body simulation", 
        "proxy": "(read-only)    Library object this proxy object controls", 
        "parent_type": "Type of parent relation", 
        "use_shape_key_edit_mode": "Apply shape keys in edit mode (for Meshes only)", 
        "use_dupli_frames_speed": "Set dupliframes to use the current frame instead of parent curve's evaluation time", 
        "slow_parent_offset": "Delay in the parent relationship", 
        "dimensions": "Absolute bounding box dimensions of the object", 
        "hide_render": "Restrict renderability", 
        "rigid_body_constraint": "(read-only)    Constraint constraining rigid bodies", 
        "motion_path": "(read-only)    Motion Path for this element", 
        "active_material": "Active material being displayed", 
        "modifiers": "(read-only)    Modifiers affecting the geometric data of the object", 
        "matrix_parent_inverse": "Inverse of object's parent matrix at time of parenting", 
        "dupli_frames_on": "Number of frames to use between DupOff frames", 
        "draw_type": "Maximum draw type to display object with in viewport", 
        "show_axis": "Display the object's origin and axes", 
        "is_duplicator": "(read-only)", 
        "lock_rotation": "Lock editing of rotation in the interface", 
        "delta_rotation_quaternion": "Extra rotation added to the rotation of the object (when using Quaternion rotations)", 
        "lock_rotation_w": "Lock editing of 'angle' component of four-component rotations in the interface", 
        "use_extra_recalc_object": "Refresh this object again on frame changes, dependency graph hack", 
        "show_x_ray": "Make the object draw in front of others (unsupported for duplicator drawing)", 
        "parent_vertices": "Indices of vertices in case of a vertex parenting relation", 
        "animation_visualization": "(read-only)    Animation data for this datablock", 
        "lock_location": "Lock editing of location in the interface", 
        "rotation_axis_angle": "Angle of Rotation for Axis-Angle rotation representation", 
        "show_bounds": "Display the object's bounds", 
        "cycles_visibility": "(read-only)    Cycles visibility settings", 
        "game": "(read-only)    Game engine related settings for the object", 
        "layers_local_view": "(read-only)    3D local view layers the object is on", 
        "active_shape_key_index": "Current shape key index", 
        "field": "(read-only)    Settings for using the object as a field in physics simulation", 
        "track_axis": "Axis that points in 'forward' direction (applies to DupliFrame when parent 'Follow' is enabled)", 
        "matrix_world": "Worldspace transformation matrix", 
        "color": "Object color and alpha, used when faces have the ObColor mode enabled", 
        "lock_rotations_4d": "Lock editing of four component rotations by components (instead of as Eulers)", 
        "material_slots": "(read-only)    Material slots in the object", 
        "draw_bounds_type": "Object boundary display type", 
        "dupli_frames_start": "Start frame for DupliFrames", 
        "empty_draw_type": "Viewport display style for empties"
      }
    }, 
    "ControlFluidSettings": {
      "inherits": [
        "FluidSettings"
      ], 
      "fields": {
        "velocity_strength": "Force strength of how much of the control object's velocity is influencing the fluid velocity", 
        "end_time": "Time when the control particles are deactivated", 
        "velocity_radius": "Force field radius around the control object", 
        "quality": "Quality which is used for object sampling (higher = better but slower)", 
        "use": "Object contributes to the fluid simulation", 
        "start_time": "Time when the control particles are activated", 
        "use_reverse_frames": "Reverse control object movement", 
        "attraction_radius": "Force field radius around the control object", 
        "attraction_strength": "Force strength for directional attraction towards the control object"
      }
    }, 
    "MovieClipProxy": {
      "fields": {
        "build_25": "Build proxy resolution 25% of the original footage dimension", 
        "build_undistorted_25": "Build proxy resolution 25% of the original undistorted footage dimension", 
        "build_75": "Build proxy resolution 75% of the original footage dimension", 
        "build_50": "Build proxy resolution 50% of the original footage dimension", 
        "build_record_run": "Build record run time code index", 
        "build_undistorted_50": "Build proxy resolution 50% of the original undistorted footage dimension", 
        "directory": "Location to store the proxy files", 
        "build_free_run_rec_date": "Build free run time code index using Record Date/Time", 
        "build_undistorted_100": "Build proxy resolution 100% of the original undistorted footage dimension", 
        "build_undistorted_75": "Build proxy resolution 75% of the original undistorted footage dimension", 
        "quality": "JPEG quality of proxy images", 
        "build_free_run": "Build free run time code index", 
        "build_100": "Build proxy resolution 100% of the original footage dimension"
      }
    }, 
    "ShaderNodeTexSky": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "ground_albedo": "Ground color that is subtly reflected in the sky", 
        "texture_mapping": "(read-only)    Texture coordinate mapping settings", 
        "turbidity": "Atmospheric turbidity", 
        "sun_direction": "Direction from where the sun is shining", 
        "color_mapping": "(read-only)    Color mapping settings"
      }
    }, 
    "SpaceImageEditor": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "zoom": "(read-only)    Zoom factor", 
        "use_image_pin": "Display current image regardless of object selection", 
        "draw_channels": "Channels of the image to draw", 
        "mask_draw_type": "Draw type for mask splines", 
        "sample_histogram": "(read-only)    Sampled colors along line", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "cursor_location": "2D cursor location for this view", 
        "image": "Image displayed and edited in this space", 
        "mask": "Mask displayed and edited in this space", 
        "use_realtime_update": "Update other affected window spaces automatically to reflect changes during interactive operations such as transform", 
        "grease_pencil": "Grease pencil data for this space", 
        "show_repeat": "Draw the image repeated outside of the main view", 
        "mode": "Editing context being displayed", 
        "show_render": "(read-only)    Show render related properties", 
        "pivot_point": "Rotation/Scaling Pivot", 
        "scopes": "(read-only)    Scopes to visualize image statistics", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "show_paint": "(read-only)    Show paint related properties", 
        "show_uvedit": "(read-only)    Show UV editing related properties", 
        "show_maskedit": "(read-only)    Show Mask editing related properties", 
        "uv_editor": "(read-only)    UV editor settings"
      }
    }, 
    "LineStyleGeometryModifier_BackboneStretcher": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "backbone_length": "Amount of backbone stretching", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded"
      }
    }, 
    "CompositorNodeDefocus": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_gamma_correction": "Enable gamma correction before and after main process", 
        "z_scale": "Scale the Z input when not using a z-buffer, controls maximum blur designated by the color white or input value 1", 
        "blur_max": "Blur limit, maximum CoC radius", 
        "f_stop": "Amount of focal blur, 128=infinity=perfect focus, half the value doubles the blur radius", 
        "use_zbuffer": "Disable when using an image as input instead of actual z-buffer (auto enabled if node not image based, eg. time node)", 
        "use_preview": "Enable low quality mode, useful for preview", 
        "angle": "Bokeh shape rotation offset", 
        "threshold": "CoC radius threshold, prevents background bleed on in-focus midground, 0=off"
      }
    }, 
    "KeyboardSensor": {
      "inherits": [
        "Sensor"
      ], 
      "fields": {
        "modifier_key_1": "Modifier key code", 
        "use_all_keys": "Trigger this sensor on any keystroke", 
        "modifier_key_2": "Modifier key code", 
        "target": "Property that receives the keystrokes in case a string is logged", 
        "log": "Property that indicates whether to log keystrokes as a string"
      }
    }, 
    "NodeSocketInterfaceFloat": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "LimitLocationConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "use_transform_limit": "Transforms are affected by this constraint as well", 
        "use_max_z": "Use the maximum Z value", 
        "use_max_y": "Use the maximum Y value", 
        "use_max_x": "Use the maximum X value", 
        "use_min_x": "Use the minimum X value", 
        "min_x": "Lowest X value to allow", 
        "max_z": "Highest Z value to allow", 
        "max_y": "Highest Y value to allow", 
        "max_x": "Highest X value to allow", 
        "use_min_z": "Use the minimum Z value", 
        "min_z": "Lowest Z value to allow", 
        "use_min_y": "Use the minimum Y value", 
        "min_y": "Lowest Y value to allow"
      }
    }, 
    "Keyframe": {
      "fields": {
        "handle_right_type": "Handle types", 
        "co": "Coordinates of the control point", 
        "select_right_handle": "Right handle selection status", 
        "handle_left_type": "Handle types", 
        "handle_left": "Coordinates of the left handle (before the control point)", 
        "select_control_point": "Control point selection status", 
        "interpolation": "Interpolation method to use for segment of the F-Curve from this Keyframe until the next Keyframe", 
        "select_left_handle": "Left handle selection status", 
        "type": "Type of keyframe (for visual purposes only)", 
        "handle_right": "Coordinates of the right handle (after the control point)"
      }
    }, 
    "PointLamp": {
      "inherits": [
        "ID", 
        "Lamp"
      ], 
      "fields": {
        "use_auto_clip_start": "Automatic calculation of clipping-start, based on visible vertices", 
        "shadow_buffer_bleed_bias": "Bias for reducing light-bleed on variance shadow maps", 
        "shadow_buffer_bias": "Shadow buffer sampling bias", 
        "use_sphere": "Set light intensity to zero beyond lamp distance", 
        "linear_attenuation": "Linear distance attenuation", 
        "shadow_ray_sample_method": "Method for generating shadow samples: Adaptive QMC is fastest, Constant QMC is less noisy but slower", 
        "shadow_adaptive_threshold": "Threshold for Adaptive Sampling (Raytraced shadows)", 
        "shadow_ray_samples": "Number of samples taken extra (samples x samples)", 
        "ge_shadow_buffer_type": "The shadow mapping algorithm used", 
        "shadow_filter_type": "Type of shadow filter (Buffer Shadows)", 
        "compression_threshold": "Deep shadow map compression threshold", 
        "shadow_sample_buffers": "Number of shadow buffers to render for better AA, this increases memory usage", 
        "quadratic_attenuation": "Quadratic distance attenuation", 
        "shadow_buffer_clip_end": "Shadow map clip end, beyond which objects will not generate shadows", 
        "falloff_curve": "(read-only)    Custom Lamp Falloff Curve", 
        "shadow_buffer_size": "Resolution of the shadow buffer, higher values give crisper shadows but use more memory", 
        "use_only_shadow": "Cast shadows only, without illuminating objects", 
        "shadow_soft_size": "Light size for ray shadow sampling (Raytraced shadows)", 
        "use_auto_clip_end": "Automatic calculation of clipping-end, based on visible vertices", 
        "shadow_color": "Color of shadows cast by the lamp", 
        "use_shadow_layer": "Objects on the same layers only cast shadows", 
        "shadow_buffer_type": "Type of shadow buffer", 
        "shadow_buffer_samples": "Number of shadow buffer samples", 
        "shadow_buffer_soft": "Size of shadow buffer sampling area", 
        "shadow_buffer_clip_start": "Shadow map clip start, below which objects will not generate shadows", 
        "falloff_type": "Intensity Decay with distance"
      }
    }, 
    "WaveModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "texture_coords_object": "Object to set the texture coordinates", 
        "lifetime": "Lifetime of the wave in frames, zero means infinite", 
        "use_normal_y": "Enable displacement along the Y normal", 
        "use_normal_x": "Enable displacement along the X normal", 
        "speed": "Speed of the wave, towards the starting point when negative", 
        "width": "Distance between the waves", 
        "use_normal_z": "Enable displacement along the Z normal", 
        "use_cyclic": "Cyclic wave effect", 
        "uv_layer": "UV map name", 
        "use_normal": "Displace along normals", 
        "damping_time": "Number of frames in which the wave damps out after it dies", 
        "vertex_group": "Vertex group name for modulating the wave", 
        "start_position_y": "Y coordinate of the start position", 
        "start_position_x": "X coordinate of the start position", 
        "height": "Height of the wave", 
        "time_offset": "Either the starting frame (for positive speed) or ending frame (for negative speed.)", 
        "start_position_object": "Object which defines the wave center", 
        "narrowness": "Distance between the top and the base of a wave, the higher the value, the more narrow the wave", 
        "falloff_radius": "Distance after which it fades out", 
        "use_y": "Y axis motion", 
        "use_x": "X axis motion"
      }
    }, 
    "BoneGroup": {
      "fields": {
        "colors": "(read-only)    Copy of the colors associated with the group's color set", 
        "color_set": "Custom color set to use"
      }
    }, 
    "LineStyleGeometryModifier_SpatialNoise": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "scale": "Scale of the spatial noise", 
        "smooth": "If true, the spatial noise is smooth", 
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "octaves": "Number of octaves (i.e., the amount of detail of the spatial noise)", 
        "use_pure_random": "If true, the spatial noise does not show any coherence", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded", 
        "amplitude": "Amplitude of the spatial noise"
      }
    }, 
    "ParticleEdit": {
      "fields": {
        "default_key_count": "How many keys to make new particles with", 
        "draw_step": "How many steps to draw the path with", 
        "select_mode": "Particle select and display mode", 
        "object": "(read-only)    The edited object", 
        "show_particles": "Draw actual particles", 
        "fade_frames": "How many frames to fade", 
        "use_emitter_deflect": "Keep paths from intersecting the emitter", 
        "emitter_distance": "Distance to keep particles away from the emitter", 
        "use_default_interpolate": "Interpolate new particles from the existing ones", 
        "use_fade_time": "Fade paths and keys further away from current frame", 
        "is_hair": "(read-only)    Editing hair", 
        "use_preserve_length": "Keep path lengths constant", 
        "is_editable": "(read-only)    A valid edit mode exists", 
        "use_auto_velocity": "Calculate point velocities automatically", 
        "use_preserve_root": "Keep root keys unmodified", 
        "brush": "(read-only)"
      }
    }, 
    "SpaceSequenceEditor": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_seconds": "Show timing in seconds not frames", 
        "overlay_type": "Overlay draw type", 
        "show_grease_pencil": "Show grease pencil for this view", 
        "show_separate_color": "Separate color channels in preview", 
        "grease_pencil": "Grease pencil data for this space", 
        "show_frame_indicator": "Show frame number beside the current frame indicator line", 
        "preview_channels": "Channels of the preview to draw", 
        "display_channel": "The channel number shown in the image preview. 0 is the result of all strips combined", 
        "display_mode": "View mode to use for displaying sequencer output", 
        "show_frames": "Draw frames rather than seconds", 
        "view_type": "Type of the Sequencer view (sequencer, preview or both)", 
        "proxy_render_size": "Draw preview using full resolution or different proxy resolutions", 
        "show_safe_margin": "Draw title safe margins in preview", 
        "use_marker_sync": "Transform markers as well as strips", 
        "draw_overexposed": "Show overexposed areas with zebra stripes"
      }
    }, 
    "DynamicPaintSurfaces": {
      "fields": {
        "active": "(read-only)    Active Dynamic Paint surface being displayed"
      }
    }, 
    "PointDensityTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "point_density": "(read-only)    The point density settings associated with this texture"
      }
    }, 
    "LineStyleThicknessModifier_Material": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleThicknessModifier"
      ], 
      "fields": {
        "invert": "Invert the fade-out direction of the linear mapping", 
        "curve": "(read-only)    Curve used for the curve mapping", 
        "value_max": "Maximum output value of the mapping", 
        "value_min": "Minimum output value of the mapping", 
        "name": "Name of the modifier", 
        "material_attribute": "Specify which material attribute is used", 
        "blend": "Specify how the modifier value is blended into the base value", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "influence": "Influence factor by which the modifier changes the property", 
        "mapping": "Select the mapping type", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded"
      }
    }, 
    "OperatorMousePath": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "time": "Time of mouse location", 
        "loc": "Mouse location"
      }
    }, 
    "CompositorNodeImage": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "frame_start": "Global starting frame of the movie/sequence, assuming first picture has a #1", 
        "use_auto_refresh": "Always refresh image on frame changes", 
        "frame_duration": "Number of images of a movie to use", 
        "use_cyclic": "Cycle the images in the movie", 
        "frame_offset": "Offset the number of the frame to use in the animation", 
        "use_straight_alpha_output": "Put Node output buffer to straight alpha instead of premultiplied"
      }
    }, 
    "SequenceProxy": {
      "fields": {
        "build_25": "Build 25% proxy resolution", 
        "filepath": "Location of custom proxy file", 
        "build_75": "Build 75% proxy resolution", 
        "build_50": "Build 50% proxy resolution", 
        "directory": "Location to store the proxy files", 
        "build_free_run_rec_date": "Build free run time code index using Record Date/Time", 
        "quality": "JPEG Quality of proxies to build", 
        "build_record_run": "Build record run time code index", 
        "build_free_run": "Build free run time code index", 
        "build_100": "Build 100% proxy resolution"
      }
    }, 
    "CurveModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "object": "Curve object to deform with", 
        "vertex_group": "Name of Vertex Group which determines influence of modifier per point", 
        "deform_axis": "The axis that the curve deforms along"
      }
    }, 
    "MultiplySequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "input_2": "Second input for the effect strip", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)"
      }
    }, 
    "CollisionModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "settings": "(read-only)"
      }
    }, 
    "SpaceUVEditor": {
      "fields": {
        "use_snap_to_pixels": "Snap UVs to pixel locations while editing", 
        "sticky_select_mode": "Automatically select also UVs sharing the same vertex as the ones being selected", 
        "show_faces": "Draw faces over the image", 
        "use_live_unwrap": "Continuously unwrap the selected UV island while transforming pinned vertices", 
        "show_stretch": "Draw faces colored according to the difference in shape between UVs and their 3D coordinates (blue for low distortion, red for high distortion)", 
        "show_normalized_coords": "Display UV coordinates from 0.0 to 1.0 rather than in pixels", 
        "show_modified_edges": "Draw edges after modifiers are applied", 
        "draw_stretch_type": "Type of stretch to draw", 
        "show_other_objects": "Draw other selected objects that share the same image", 
        "edge_draw_type": "Draw type for drawing UV edges", 
        "lock_bounds": "Constraint to stay within the image bounds while editing", 
        "show_smooth_edges": "Draw UV edges anti-aliased"
      }
    }, 
    "Area": {
      "fields": {
        "spaces": "(read-only)    Spaces contained in this area, the first being the active space (NOTE: Useful for example to restore a previously used 3D view space in a certain area to get the old view orientation)", 
        "show_menus": "Show menus in the header", 
        "height": "(read-only)    Area height", 
        "width": "(read-only)    Area width", 
        "type": "Current editor type for this area", 
        "regions": "(read-only)    Regions this area is subdivided in", 
        "y": "(read-only)    The window relative horizontal location of the area", 
        "x": "(read-only)    The window relative vertical location of the area"
      }
    }, 
    "ChildOfConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "use_rotation_z": "Use Z Rotation of Parent", 
        "use_rotation_y": "Use Y Rotation of Parent", 
        "use_scale_x": "Use X Scale of Parent", 
        "use_scale_y": "Use Y Scale of Parent", 
        "use_location_y": "Use Y Location of Parent", 
        "use_scale_z": "Use Z Scale of Parent", 
        "use_location_x": "Use X Location of Parent", 
        "inverse_matrix": "Transformation matrix to apply before", 
        "target": "Target Object", 
        "use_location_z": "Use Z Location of Parent", 
        "use_rotation_x": "Use X Rotation of Parent"
      }
    }, 
    "WipeSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "direction": "Wipe direction", 
        "blur_width": "Width of the blur edge, in percentage relative to the image size", 
        "input_1": "First input for the effect strip", 
        "angle": "Edge angle", 
        "input_count": "(read-only)"
      }
    }, 
    "LineStyleGeometryModifier_BezierCurve": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "error": "Maximum distance allowed between the new Bezier curve and the original backbone geometry", 
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded"
      }
    }, 
    "MeshTessFaces": {
      "fields": {
        "active": "The active face for this mesh"
      }
    }, 
    "NodeSocketInterfaceVectorVelocity": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "RigidBodyConstraint": {
      "fields": {
        "limit_ang_y_upper": "Upper limit of Y axis rotation", 
        "use_limit_lin_x": "Limit translation on X axis", 
        "use_limit_lin_y": "Limit translation on Y axis", 
        "limit_lin_z_lower": "Lower limit of Z axis translation", 
        "object1": "First Rigid Body Object to be constrained", 
        "use_motor_ang": "Enable angular motor", 
        "object2": "Second Rigid Body Object to be constrained", 
        "spring_stiffness_z": "Stiffness on the Z axis", 
        "spring_stiffness_y": "Stiffness on the Y axis", 
        "spring_stiffness_x": "Stiffness on the X axis", 
        "limit_lin_y_lower": "Lower limit of Y axis translation", 
        "type": "Type of Rigid Body Constraint", 
        "use_spring_z": "Enable spring on Z axis", 
        "limit_ang_x_lower": "Lower limit of X axis rotation", 
        "motor_lin_target_velocity": "Target linear motor velocity", 
        "disable_collisions": "Disable collisions between constrained rigid bodies", 
        "use_breaking": "Constraint can be broken if it receives an impulse above the threshold", 
        "solver_iterations": "Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)", 
        "use_motor_lin": "Enable linear motor", 
        "motor_ang_max_impulse": "Maximum angular motor impulse", 
        "spring_damping_y": "Damping on the Y axis", 
        "use_limit_lin_z": "Limit translation on Z axis", 
        "spring_damping_z": "Damping on the Z axis", 
        "motor_lin_max_impulse": "Maximum linear motor impulse", 
        "spring_damping_x": "Damping on the X axis", 
        "limit_lin_z_upper": "Upper limit of Z axis translation", 
        "enabled": "Enable this constraint", 
        "limit_lin_y_upper": "Upper limit of Y axis translation", 
        "limit_lin_x_lower": "Lower limit of X axis translation", 
        "use_limit_ang_y": "Limit rotation around Y axis", 
        "use_limit_ang_z": "Limit rotation around Z axis", 
        "limit_lin_x_upper": "Upper limit of X axis translation", 
        "motor_ang_target_velocity": "Target angular motor velocity", 
        "use_limit_ang_x": "Limit rotation around X axis", 
        "limit_ang_x_upper": "Upper limit of X axis rotation", 
        "limit_ang_z_upper": "Upper limit of Z axis rotation", 
        "limit_ang_y_lower": "Lower limit of Y axis rotation", 
        "limit_ang_z_lower": "Lower limit of Z axis rotation", 
        "breaking_threshold": "Impulse threshold that must be reached for the constraint to break", 
        "use_spring_y": "Enable spring on Y axis", 
        "use_override_solver_iterations": "Override the number of solver iterations for this constraint", 
        "use_spring_x": "Enable spring on X axis"
      }
    }, 
    "PointCache": {
      "fields": {
        "point_caches": "(read-only)    Point cache list", 
        "filepath": "Cache file path", 
        "is_outdated": "(read-only)", 
        "frame_start": "Frame on which the simulation starts", 
        "index": "Index number of cache files", 
        "is_baked": "(read-only)", 
        "frame_step": "Number of frames between cached frames", 
        "frame_end": "Frame on which the simulation stops", 
        "info": "(read-only)    Info on current cache status", 
        "frames_skipped": "(read-only)", 
        "use_disk_cache": "Save cache files to disk (.blend file must be saved first)", 
        "name": "Cache name", 
        "use_external": "Read cache from an external location", 
        "use_library_path": "Use this file's path for the disk cache when library linked into another file (for local bakes per scene file, disable this option)", 
        "compression": "Compression method to be used", 
        "is_baking": "(read-only)"
      }
    }, 
    "VectorFont": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "packed_file": "(read-only)"
      }
    }, 
    "ParentActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "use_ghost": "Make this object ghost while parented", 
        "object": "Set this object as parent", 
        "use_compound": "Add this object shape to the parent shape (only if the parent shape is already compound)"
      }
    }, 
    "MetaBall": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "cycles": "(read-only)    Cycles mesh settings", 
        "is_editmode": "(read-only)    True when used in editmode", 
        "materials": "(read-only)", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "texspace_location": "Texture space location", 
        "resolution": "Polygonization resolution in the 3D viewport", 
        "update_method": "Metaball edit update behavior", 
        "use_auto_texspace": "Adjust active object's texture space automatically when transforming object", 
        "render_resolution": "Polygonization resolution in rendering", 
        "elements": "(read-only)    Meta elements", 
        "threshold": "Influence of meta elements", 
        "texspace_size": "Texture space size"
      }
    }, 
    "TextureNodeMath": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ], 
      "fields": {
        "use_clamp": "Clamp result of the node to 0..1 range"
      }
    }, 
    "RigidBodyWorld": {
      "fields": {
        "enabled": "Simulation will be evaluated", 
        "steps_per_second": "Number of simulation steps taken per second (higher values are more accurate but slower)", 
        "use_split_impulse": "Reduce extra velocity that can build up when objects collide (lowers simulation stability a little so use only when necessary)", 
        "solver_iterations": "Number of constraint solver iterations made per simulation step (higher values are more accurate but slower)", 
        "constraints": "Group containing rigid body constraint objects", 
        "group": "Group containing objects participating in this simulation", 
        "time_scale": "Change the speed of the simulation", 
        "effector_weights": "(read-only)", 
        "point_cache": "(read-only)"
      }
    }, 
    "CompositorNodePremulKey": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "mapping": "Conversion between premultiplied alpha and key alpha"
      }
    }, 
    "CompositorNodeColorSpill": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "unspill_blue": "Blue spillmap scale", 
        "ratio": "Scale limit by value", 
        "unspill_green": "Green spillmap scale", 
        "use_unspill": "Compensate all channels (differently) by hand", 
        "unspill_red": "Red spillmap scale"
      }
    }, 
    "BoidState": {
      "fields": {
        "active_boid_rule": "(read-only)", 
        "name": "Boid state name", 
        "ruleset_type": "How the rules in the list are evaluated", 
        "rules": "(read-only)"
      }
    }, 
    "ImageSequence": {
      "inherits": [
        "Sequence"
      ], 
      "fields": {
        "use_deinterlace": "For video movies to remove fields", 
        "animation_offset_end": "Animation end offset (trim end)", 
        "use_proxy_custom_directory": "Use a custom directory to store data", 
        "colorspace_settings": "(read-only)    Input color space settings", 
        "crop": "(read-only)", 
        "use_proxy": "Use a preview proxy and/or timecode index for this strip", 
        "use_flip_y": "Flip on the Y axis", 
        "use_proxy_custom_file": "Use a custom file to read proxy data from", 
        "transform": "(read-only)", 
        "use_crop": "Crop image before processing", 
        "use_flip_x": "Flip on the X axis", 
        "use_float": "Convert input to float data", 
        "alpha_mode": "Representation of alpha information in the RGBA pixels", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "proxy": "(read-only)", 
        "use_translation": "Translate image before processing", 
        "use_reverse_frames": "Reverse frame order", 
        "elements": "(read-only)", 
        "strobe": "Only display every nth frame"
      }
    }, 
    "UIPopupMenu": {
      "fields": {
        "layout": "(read-only)"
      }
    }, 
    "OperatorStrokeElement": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "pressure": "Tablet pressure"
      }
    }, 
    "FModifierStepped": {
      "inherits": [
        "FModifier"
      ], 
      "fields": {
        "use_frame_start": "Restrict modifier to only act after its 'start' frame", 
        "frame_start": "Frame that modifier's influence starts (if applicable)", 
        "use_frame_end": "Restrict modifier to only act before its 'end' frame", 
        "frame_offset": "Reference number of frames before frames get held (use to get hold for '1-3' vs '5-7' holding patterns)", 
        "frame_step": "Number of frames to hold each value", 
        "frame_end": "Frame that modifier's influence ends (if applicable)"
      }
    }, 
    "CollectionProperty": {
      "inherits": [
        "Property"
      ], 
      "fields": {
        "fixed_type": "(read-only)    Fixed pointer type, empty if variable type"
      }
    }, 
    "BlendDataCameras": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "SolidifyModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "edge_crease_inner": "Assign a crease to inner edges", 
        "thickness_clamp": "Offset clamp based on geometry scale", 
        "thickness_vertex_group": "Thickness factor to use for zero vertex group influence", 
        "material_offset_rim": "Offset material index of generated rim faces", 
        "material_offset": "Offset material index of generated faces", 
        "use_even_offset": "Maintain thickness by adjusting for sharp corners (slow, disable when not needed)", 
        "vertex_group": "Vertex group name", 
        "edge_crease_outer": "Assign a crease to outer edges", 
        "use_flip_normals": "Invert the face direction", 
        "invert_vertex_group": "Invert the vertex group influence", 
        "use_rim": "Create edge loops between the inner and outer surfaces on face edges (slow, disable when not needed)", 
        "thickness": "Thickness of the shell", 
        "use_quality_normals": "Calculate normals which result in more even thickness (slow, disable when not needed)", 
        "offset": "Offset the thickness from the center", 
        "edge_crease_rim": "Assign a crease to the edges making up the rim"
      }
    }, 
    "NodeSocketFloatFactor": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "MovieTrackingMarker": {
      "fields": {
        "pattern_bound_box": "(read-only)    Pattern area bounding box in normalized coordinates", 
        "co": "Marker position at frame in normalized coordinates", 
        "frame": "Frame number marker is keyframed on", 
        "search_min": "Left-bottom corner of search area in normalized coordinates relative to marker position", 
        "pattern_corners": "Array of coordinates which represents pattern's corners in normalized coordinates relative to marker position", 
        "search_max": "Right-bottom corner of search area in normalized coordinates relative to marker position", 
        "mute": "Is marker muted for current frame"
      }
    }, 
    "ArmatureBones": {
      "fields": {
        "active": "Armature's active bone"
      }
    }, 
    "PoseBone": {
      "fields": {
        "ik_rotation_weight": "Weight of rotation constraint for IK", 
        "ik_stiffness_x": "IK stiffness around the X axis", 
        "ik_stiffness_z": "IK stiffness around the Z axis", 
        "ik_stiffness_y": "IK stiffness around the Y axis", 
        "use_ik_limit_y": "Limit movement around the Y axis", 
        "matrix_basis": "Alternative access to location/scale/rotation relative to the parent and own rest bone", 
        "use_ik_limit_z": "Limit movement around the Z axis", 
        "custom_shape_transform": "Bone that defines the display transform of this custom shape", 
        "ik_min_x": "Minimum angles for IK Limit", 
        "matrix_channel": "(read-only)    4x4 matrix, before constraints", 
        "ik_min_y": "Minimum angles for IK Limit", 
        "lock_ik_x": "Disallow movement around the X axis", 
        "rotation_euler": "Rotation in Eulers", 
        "rotation_quaternion": "Rotation in Quaternions", 
        "bone_group": "Bone Group this pose channel belongs to", 
        "child": "(read-only)    Child of this pose bone", 
        "lock_ik_z": "Disallow movement around the Z axis", 
        "ik_min_z": "Minimum angles for IK Limit", 
        "lock_ik_y": "Disallow movement around the Y axis", 
        "bone": "(read-only)    Bone associated with this PoseBone", 
        "use_ik_limit_x": "Limit movement around the X axis", 
        "motion_path": "(read-only)    Motion Path for this element", 
        "head": "(read-only)    Location of head of the channel's bone", 
        "lock_rotation": "Lock editing of rotation in the interface", 
        "lock_rotation_w": "Lock editing of 'angle' component of four-component rotations in the interface", 
        "use_ik_linear_control": "Apply channel size as IK constraint if stretching is enabled", 
        "lock_location": "Lock editing of location in the interface", 
        "rotation_axis_angle": "Angle of Rotation for Axis-Angle rotation representation", 
        "matrix": "Final 4x4 matrix after constraints and drivers are applied (object space)", 
        "constraints": "(read-only)    Constraints that act on this PoseChannel", 
        "parent": "(read-only)    Parent of this pose bone", 
        "custom_shape": "Object that defines custom draw type for this bone", 
        "tail": "(read-only)    Location of tail of the channel's bone", 
        "ik_max_z": "Maximum angles for IK Limit", 
        "ik_max_y": "Maximum angles for IK Limit", 
        "ik_max_x": "Maximum angles for IK Limit", 
        "bone_group_index": "Bone Group this pose channel belongs to (0=no group)", 
        "ik_stretch": "Allow scaling of the bone for IK", 
        "use_ik_rotation_control": "Apply channel rotation as IK constraint", 
        "lock_scale": "Lock editing of scale in the interface", 
        "lock_rotations_4d": "Lock editing of four component rotations by components (instead of as Eulers)", 
        "is_in_ik_chain": "(read-only)    Is part of an IK chain", 
        "ik_linear_weight": "Weight of scale constraint for IK"
      }
    }, 
    "BlendDataFonts": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "ToolSettings": {
      "fields": {
        "uv_sculpt_all_islands": "Brush operates on all islands", 
        "mesh_select_mode": "Which mesh elements selection works on", 
        "uv_sculpt_lock_borders": "Disable editing of boundary edges", 
        "etch_subdivision_number": "Number of bones in the subdivided stroke", 
        "use_uv_select_sync": "Keep UV and edit mode mesh selection in sync", 
        "weight_paint": "(read-only)", 
        "use_etch_autoname": "Automatically generate values to replace &N and &S suffix placeholders in template names", 
        "vertex_group_user": "Display unweighted vertices (multi-paint overrides)", 
        "vertex_group_subset": "Filter Vertex groups for Display", 
        "edge_path_mode": "The edge flag to tag when selecting the shortest path", 
        "proportional_edit": "Proportional Editing mode, allows transforms with distance fall-off", 
        "uv_relax_method": "Algorithm used for UV relaxation", 
        "edge_path_live_unwrap": "Changing edges seam re-calculates UV unwrap", 
        "double_threshold": "Limit for removing duplicates and 'Auto Merge'", 
        "snap_node_element": "Type of element to snap to", 
        "use_uv_sculpt": "Enable brush for UV sculpting", 
        "image_paint": "(read-only)", 
        "unified_paint_settings": "(read-only)", 
        "etch_number": "Text to replace &N with (e.g. 'Finger.&N' -> 'Finger.1' or 'Finger.One')", 
        "sculpt": "(read-only)", 
        "etch_side": "Text to replace &S with (e.g. 'Arm.&S' -> 'Arm.R' or 'Arm.Right')", 
        "etch_convert_mode": "Method used to convert stroke to bones", 
        "use_mesh_automerge": "Automatically merge vertices moved to the same location", 
        "vertex_group_weight": "Weight to assign in vertex groups", 
        "uv_sculpt_tool": "Select Tools for the UV sculpt brushes", 
        "auto_keying_mode": "Mode of automatic keyframe insertion for Objects and Bones", 
        "uv_select_mode": "UV selection and display mode", 
        "proportional_edit_falloff": "Falloff type for proportional editing mode", 
        "use_proportional_edit_objects": "Proportional editing object mode", 
        "statvis": "(read-only)", 
        "uv_sculpt": "(read-only)", 
        "proportional_size": "Display size for proportional editing circle", 
        "snap_target": "Which part to snap onto the target", 
        "use_grease_pencil_sessions": "Allow drawing multiple strokes at a time with Grease Pencil", 
        "use_snap_peel_object": "Consider objects as whole when finding volume center", 
        "use_snap": "Snap during transform", 
        "particle_edit": "(read-only)", 
        "use_snap_self": "Snap onto itself (editmode)", 
        "use_snap_project": "Project individual elements on the surface of other objects", 
        "use_keyframe_insert_auto": "Automatic keyframe insertion for Objects and Bones", 
        "etch_roll_mode": "Method used to adjust the roll of bones when retargeting", 
        "vertex_paint": "(read-only)", 
        "etch_length_limit": "Maximum length of the subdivided bones", 
        "use_record_with_nla": "Add a new NLA Track + Strip for every loop/pass made over the animation to allow non-destructive tweaking", 
        "use_multipaint": "Paint across all selected bones while weight painting", 
        "normal_size": "Display size for normals in the 3D view", 
        "etch_adaptive_limit": "Correlation threshold for number of bones in the subdivided stroke", 
        "use_auto_normalize": "Ensure all bone-deforming vertex groups add up to 1.0 while weight painting", 
        "snap_element": "Type of element to snap to", 
        "use_etch_overdraw": "Adjust strokes by drawing near them", 
        "use_snap_align_rotation": "Align rotation with the snapping target", 
        "use_bone_sketching": "Use sketching to create and edit bones", 
        "use_etch_quick": "Automatically convert and delete on stroke end", 
        "snap_uv_element": "Type of element to snap to", 
        "use_proportional_edit_mask": "Proportional editing mask mode", 
        "use_keyframe_insert_keyingset": "Automatic keyframe insertion using active Keying Set only", 
        "etch_template": "Template armature that will be retargeted to the stroke", 
        "show_uv_local_view": "Draw only faces with the currently displayed image assigned"
      }
    }, 
    "GameProperty": {
      "fields": {
        "show_debug": "Print debug information for this property", 
        "name": "Available as GameObject attributes in the game engine's python API"
      }
    }, 
    "MaskSplinePointUW": {
      "fields": {
        "u": "U coordinate of point along spline segment", 
        "weight": "Weight of feather point", 
        "select": "Selection status"
      }
    }, 
    "MovieTrackingTracks": {
      "fields": {
        "active": "Active track in this tracking data object"
      }
    }, 
    "MeshLoop": {
      "fields": {
        "index": "(read-only)    Index of this loop", 
        "vertex_index": "Vertex index", 
        "normal": "(read-only)    Local space unit length split normal vector of this vertex for this polygon (only computed on demand!)", 
        "edge_index": "Edge index"
      }
    }, 
    "ArrayModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "curve": "Curve object to fit array length to", 
        "use_relative_offset": "Add an offset relative to the object's bounding box", 
        "end_cap": "Mesh object to use as an end cap", 
        "constant_offset_displace": "Value for the distance between arrayed items", 
        "count": "Number of duplicates to make", 
        "use_merge_vertices": "Merge vertices in adjacent duplicates", 
        "start_cap": "Mesh object to use as a start cap", 
        "merge_threshold": "Limit below which to merge vertices", 
        "use_merge_vertices_cap": "Merge vertices in first and last duplicates", 
        "fit_length": "Length to fit array within", 
        "relative_offset_displace": "The size of the geometry will determine the distance between arrayed items", 
        "use_constant_offset": "Add a constant offset", 
        "use_object_offset": "Add another object's transformation to the total offset", 
        "fit_type": "Array length calculation method", 
        "offset_object": "Use the location and rotation of another object to determine the distance and rotational change between arrayed items"
      }
    }, 
    "NodeFrame": {
      "inherits": [
        "Node", 
        "NodeInternal"
      ], 
      "fields": {
        "label_size": "Font size to use for displaying the label", 
        "shrink": "Shrink the frame to minimal bounding box"
      }
    }, 
    "MeshIntPropertyLayer": {
      "fields": {
        "data": "(read-only)"
      }
    }, 
    "MeshUVLoopLayer": {
      "fields": {
        "name": "Name of UV map", 
        "data": "(read-only)"
      }
    }, 
    "ThemeSpaceGradient": {
      "fields": {
        "panelcolors": "(read-only)", 
        "gradients": "(read-only)"
      }
    }, 
    "CompositorNodeVecBlur": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "use_curved": "Interpolate between frames in a Bezier curve, rather than linearly", 
        "factor": "Scaling factor for motion vectors (actually, 'shutter speed', in frames)", 
        "speed_max": "Maximum speed, or zero for none", 
        "speed_min": "Minimum speed for a pixel to be blurred (used to separate background from foreground)"
      }
    }, 
    "ThemeUserInterface": {
      "fields": {
        "wcol_list_item": "(read-only)", 
        "wcol_option": "(read-only)", 
        "wcol_scroll": "(read-only)", 
        "wcol_menu": "(read-only)", 
        "wcol_toggle": "(read-only)", 
        "menu_shadow_fac": "Blending factor for menu shadows", 
        "wcol_pulldown": "(read-only)", 
        "wcol_progress": "(read-only)", 
        "wcol_regular": "(read-only)", 
        "wcol_menu_back": "(read-only)", 
        "wcol_tool": "(read-only)", 
        "wcol_radio": "(read-only)", 
        "wcol_state": "(read-only)", 
        "wcol_menu_item": "(read-only)", 
        "wcol_numslider": "(read-only)", 
        "menu_shadow_width": "Width of menu shadows in standard pixels, set to zero to disable it", 
        "icon_alpha": "Transparency of icons in the interface, to reduce contrast", 
        "wcol_tooltip": "(read-only)", 
        "wcol_num": "(read-only)", 
        "wcol_box": "(read-only)", 
        "wcol_text": "(read-only)"
      }
    }, 
    "Paint": {
      "fields": {
        "brush": "Active Brush", 
        "input_samples": "Average multiple input samples together to smooth the brush stroke", 
        "show_low_resolution": "For multires, show low resolution while navigating the view"
      }
    }, 
    "ActionConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "min": "Minimum value for target channel range", 
        "frame_start": "First frame of the Action to use", 
        "max": "Maximum value for target channel range", 
        "transform_channel": "Transformation channel from the target that is used to key the Action", 
        "use_bone_object_action": "Bones only: apply the object's transformation channels of the action to the constrained bone, instead of bone's channels", 
        "target": "Target Object", 
        "action": "The constraining action", 
        "frame_end": "Last frame of the Action to use"
      }
    }, 
    "SpaceTextEditor": {
      "inherits": [
        "Space"
      ], 
      "fields": {
        "show_word_wrap": "Wrap words if there is not enough horizontal space", 
        "text": "Text displayed and edited in this space", 
        "use_match_case": "Search string is sensitive to uppercase and lowercase letters", 
        "show_line_numbers": "Show line numbers next to the text", 
        "use_find_wrap": "Search again from the start of the file when reaching the end", 
        "font_size": "Font size to use for displaying the text", 
        "visible_lines": "(read-only)    Amount of lines that can be visible in current editor", 
        "use_find_all": "Search in all text datablocks, instead of only the active one", 
        "show_line_highlight": "Highlight the current line", 
        "show_margin": "Show right margin", 
        "tab_width": "Number of spaces to display tabs with", 
        "margin_column": "Column number to show right margin at", 
        "replace_text": "Text to replace selected text with using the replace tool", 
        "find_text": "Text to search for with the find tool", 
        "use_overwrite": "Overwrite characters when typing rather than inserting them", 
        "show_syntax_highlight": "Syntax highlight for scripting", 
        "use_live_edit": "Run python while editing", 
        "top": "(read-only)    Top line visible"
      }
    }, 
    "CompositorNodeDespeckle": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "threshold_neighbour": "Threshold for the number of neighbor pixels that must match", 
        "threshold": "Threshold for detecting pixels to despeckle"
      }
    }, 
    "NodeSocketInterfaceVectorDirection": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "MeshPolygon": {
      "fields": {
        "center": "(read-only)    Center of this polygon", 
        "index": "(read-only)    Index of this polygon", 
        "area": "(read-only)    Read only area of this polygon", 
        "loop_start": "Index of the first loop of this polygon", 
        "vertices": "Vertex indices", 
        "normal": "(read-only)    Local space unit length normal vector for this polygon", 
        "loop_total": "Number of loops used by this polygon"
      }
    }, 
    "NodeSocketVectorEuler": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "CyclesRenderSettings": {
      "inherits": [
        "PropertyGroup"
      ], 
      "fields": {
        "max_bounces": "Total maximum number of bounces", 
        "film_exposure": "Image brightness scale", 
        "use_square_samples": "Square sampling values for easier artist control", 
        "aa_samples": "Number of antialiasing samples to render for each pixel", 
        "use_layer_samples": "How to use per render layer sample settings", 
        "diffuse_bounces": "Maximum number of diffuse reflection bounces, bounded by total maximum", 
        "preview_samples": "Number of samples to render in the viewport, unlimited if 0", 
        "no_caustics": "Leave out caustics, resulting in a darker image with less noise", 
        "preview_pause": "Pause all viewport preview renders", 
        "film_transparent": "World background is transparent with premultiplied alpha", 
        "feature_set": "Feature set to use for rendering", 
        "filter_type": "Pixel filter type", 
        "diffuse_samples": "Number of diffuse bounce samples to render for each AA sample", 
        "sampling_pattern": "Random sampling pattern used by the integrator", 
        "preview_start_resolution": "Resolution to start rendering preview at, progressively increasing it to the full viewport size", 
        "ao_samples": "Number of ambient occlusion samples to render for each AA sample", 
        "use_transparent_shadows": "Use transparency of surfaces for rendering shadows", 
        "subsurface_samples": "Number of subsurface scattering samples to render for each AA sample", 
        "use_cache": "Cache last built BVH to disk for faster re-render if no geometry changed", 
        "progressive": "Method to sample lights and materials", 
        "transparent_max_bounces": "Maximum number of transparent bounces", 
        "seed": "Seed value for integrator to get different noise patterns", 
        "transparent_min_bounces": "Minimum number of transparent bounces, setting this lower than the maximum enables probabilistic path termination (faster but noisier)", 
        "preview_active_layer": "Preview active render layer in viewport", 
        "samples": "Number of samples to render for each pixel", 
        "sample_clamp": "If non-zero, the maximum value for a sample, higher values will be scaled down to avoid too much noise and slow convergence at the cost of accuracy", 
        "debug_bvh_type": "Choose between faster updates, or faster render", 
        "glossy_bounces": "Maximum number of glossy reflection bounces, bounded by total maximum", 
        "shading_system": "Use Open Shading Language (CPU rendering only)", 
        "transmission_bounces": "Maximum number of transmission bounces, bounded by total maximum", 
        "use_progressive_refine": "Instead of rendering each tile until it is finished, refine the whole image progressively (this renders somewhat slower, but time can be saved by manually stopping the render when the noise is low enough)", 
        "transmission_samples": "Number of transmission bounce samples to render for each AA sample", 
        "mesh_light_samples": "Number of mesh emission light samples to render for each AA sample", 
        "debug_use_spatial_splits": "Use BVH spatial splits: longer builder time, faster render", 
        "device": "Device to use for rendering", 
        "filter_width": "Pixel filter width", 
        "preview_aa_samples": "Number of antialiasing samples to render in the viewport, unlimited if 0", 
        "glossy_samples": "Number of glossy bounce samples to render for each AA sample", 
        "min_bounces": "Minimum number of bounces, setting this lower than the maximum enables probabilistic path termination (faster but noisier)", 
        "tile_order": "Tile order for rendering", 
        "blur_glossy": "Adaptively blur glossy shaders after blurry bounces, to reduce noise at the cost of accuracy"
      }
    }, 
    "BlendDataGreasePencils": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "ParticleFluidSettings": {
      "inherits": [
        "FluidSettings"
      ], 
      "fields": {
        "use_drops": "Show drop particles", 
        "filepath": "Directory (and/or filename prefix) to store and load particles from", 
        "use_floats": "Show floating foam particles", 
        "alpha_influence": "Amount of particle alpha change, inverse of size influence: 0=off (all same alpha), 1=full (larger particles get lower alphas, smaller ones higher values)", 
        "show_tracer": "Show tracer particles", 
        "particle_influence": "Amount of particle size scaling: 0=off (all same size), 1=full (range 0.2-2.0), >1=stronger"
      }
    }, 
    "FollowPathConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "up_axis": "Axis that points upward", 
        "forward_axis": "Axis that points forward along the path", 
        "use_curve_radius": "Object is scaled by the curve radius", 
        "offset_factor": "Percentage value defining target position along length of curve", 
        "target": "Target Object", 
        "use_curve_follow": "Object will follow the heading and banking of the curve", 
        "use_fixed_location": "Object will stay locked to a single point somewhere along the length of the curve regardless of time", 
        "offset": "Offset from the position corresponding to the time frame"
      }
    }, 
    "ImageTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "checker_distance": "Distance between checker tiles", 
        "use_checker_odd": "Odd checker tiles", 
        "filter_size": "Multiply the filter size used by MIP Map and Interpolation", 
        "use_mipmap": "Use auto-generated MIP maps for the image", 
        "filter_type": "Texture filter to use for sampling image", 
        "crop_min_y": "Minimum Y value to crop the image", 
        "crop_max_x": "Maximum X value to crop the image", 
        "crop_min_x": "Minimum X value to crop the image", 
        "crop_max_y": "Maximum Y value to crop the image", 
        "invert_alpha": "Invert all the alpha values in the image", 
        "use_alpha": "Use the alpha channel information in the image", 
        "image_user": "(read-only)    Parameters defining which layer, pass and frame of the image is displayed", 
        "use_checker_even": "Even checker tiles", 
        "use_normal_map": "Use image RGB values for normal mapping", 
        "repeat_x": "Repetition multiplier in the X direction", 
        "repeat_y": "Repetition multiplier in the Y direction", 
        "filter_probes": "Maximum number of samples (higher gives less blur at distant/oblique angles, but is also slower)", 
        "use_interpolation": "Interpolate pixels using selected filter", 
        "use_mipmap_gauss": "Use Gauss filter to sample down MIP maps", 
        "use_flip_axis": "Flip the texture's X and Y axis", 
        "extension": "How the image is extrapolated past its original bounds", 
        "use_mirror_y": "Mirror the image repetition on the Y direction", 
        "use_mirror_x": "Mirror the image repetition on the X direction", 
        "filter_eccentricity": "Maximum eccentricity (higher gives less blur at distant/oblique angles, but is also slower)", 
        "use_filter_size_min": "Use Filter Size as a minimal filter value in pixels", 
        "use_derivative_map": "Use red and green as derivative values", 
        "use_calculate_alpha": "Calculate an alpha channel based on RGB values in the image"
      }
    }, 
    "BoidRuleFollowLeader": {
      "inherits": [
        "BoidRule"
      ], 
      "fields": {
        "queue_count": "How many boids in a line", 
        "distance": "Distance behind leader to follow", 
        "use_line": "Follow leader in a line", 
        "object": "Follow this object instead of a boid"
      }
    }, 
    "ThemeSpaceGeneric": {
      "fields": {
        "panelcolors": "(read-only)"
      }
    }, 
    "CompositorNodeCurveVec": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "mapping": "(read-only)"
      }
    }, 
    "EffectorWeights": {
      "fields": {
        "curve_guide": "Curve guide effector weight", 
        "wind": "Wind effector weight", 
        "texture": "Texture effector weight", 
        "drag": "Drag effector weight", 
        "apply_to_hair_growing": "Use force fields when growing hair", 
        "turbulence": "Turbulence effector weight", 
        "vortex": "Vortex effector weight", 
        "charge": "Charge effector weight", 
        "boid": "Boid effector weight", 
        "harmonic": "Harmonic effector weight", 
        "force": "Force effector weight", 
        "magnetic": "Magnetic effector weight", 
        "group": "Limit effectors to this Group", 
        "lennardjones": "Lennard-Jones effector weight", 
        "all": "All effector's weight", 
        "smokeflow": "Smoke Flow effector weight", 
        "gravity": "Global gravity weight"
      }
    }, 
    "LoopColors": {
      "fields": {
        "active_index": "Active vertex color index", 
        "active": "Active vertex color layer"
      }
    }, 
    "RenderPass": {
      "fields": {
        "name": "(read-only)", 
        "channels": "(read-only)", 
        "type": "(read-only)", 
        "channel_id": "(read-only)"
      }
    }, 
    "BrushCapabilities": {
      "fields": {
        "has_texture_angle_source": "(read-only)", 
        "has_overlay": "(read-only)", 
        "has_texture_angle": "(read-only)", 
        "has_spacing": "(read-only)", 
        "has_random_texture_angle": "(read-only)"
      }
    }, 
    "ShaderNodeNormalMap": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "ShaderNode"
      ], 
      "fields": {
        "uv_map": "UV Map for tangent space maps", 
        "space": "Space of the input normal"
      }
    }, 
    "TextCurve": {
      "inherits": [
        "ID", 
        "Curve"
      ], 
      "fields": {
        "body": "Content of this text object", 
        "align": "Text align from the object center", 
        "body_format": "(read-only)    Stores the style of each character", 
        "text_boxes": "(read-only)", 
        "small_caps_scale": "Scale of small capitals", 
        "family": "Use Blender Objects as font characters (give font objects a common name followed by the character they represent, eg. family_a, family_b, etc, and turn on Verts Duplication)", 
        "shear": "Italic angle of the characters", 
        "underline_position": "Vertical position of underline", 
        "use_fast_edit": "Don't fill polygons while editing", 
        "edit_format": "(read-only)    Editing settings character formatting", 
        "follow_curve": "Curve deforming text object", 
        "use_uv_as_generated": "Uses the UV values as Generated textured coordinates", 
        "offset_y": "Vertical offset from the object origin", 
        "offset_x": "Horizontal offset from the object origin"
      }
    }, 
    "FollowTrackConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "clip": "Movie Clip to get tracking data from", 
        "depth_object": "Object used to define depth in camera space by projecting onto surface of this object", 
        "camera": "Camera to which motion is parented (if empty active scene camera is used)", 
        "use_active_clip": "Use active clip defined in scene", 
        "track": "Movie tracking track to follow", 
        "object": "Movie tracking object to follow (if empty, camera object is used)", 
        "use_3d_position": "Use 3D position of track to parent to", 
        "frame_method": "How the footage fits in the camera frame"
      }
    }, 
    "AnimData": {
      "fields": {
        "use_nla": "NLA stack is evaluated when evaluating this block", 
        "drivers": "(read-only)    The Drivers/Expressions for this datablock", 
        "nla_tracks": "(read-only)    NLA Tracks (i.e. Animation Layers)", 
        "action_blend_type": "Method used for combining Active Action's result with result of NLA stack", 
        "action_extrapolation": "Action to take for gaps past the Active Action's range (when evaluating with NLA)", 
        "action_influence": "Amount the Active Action contributes to the result of the NLA stack", 
        "action": "Active Action for this datablock"
      }
    }, 
    "PropertyGroupItem": {
      "fields": {
        "idp_array": "(read-only)", 
        "collection": "(read-only)", 
        "group": "(read-only)"
      }
    }, 
    "Lamp": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "cycles": "(read-only)    Cycles lamp settings", 
        "use_diffuse": "Do diffuse shading", 
        "use_specular": "Create specular highlights", 
        "use_own_layer": "Illuminate objects only on the same layers the lamp is on", 
        "type": "Type of Lamp", 
        "active_texture": "Active texture slot being displayed", 
        "distance": "Falloff distance - the light is at half the original intensity at this point", 
        "active_texture_index": "Index of active texture slot", 
        "use_negative": "Cast negative light", 
        "animation_data": "(read-only)    Animation data for this datablock", 
        "color": "Light color", 
        "texture_slots": "(read-only)    Texture slots defining the mapping and influence of textures", 
        "use_nodes": "Use shader nodes to render the lamp", 
        "energy": "Amount of light that the lamp emits", 
        "node_tree": "(read-only)    Node tree for node based lamps"
      }
    }, 
    "LineStyleGeometryModifier_Polygonalization": {
      "inherits": [
        "LineStyleModifier", 
        "LineStyleGeometryModifier"
      ], 
      "fields": {
        "error": "Maximum distance between the original stroke and its polygonal approximation", 
        "name": "Name of the modifier", 
        "use": "Enable or disable this modifier during stroke rendering", 
        "type": "(read-only)    Type of the modifier", 
        "expanded": "True if the modifier tab is expanded"
      }
    }, 
    "KeyingSetInfo": {
      "fields": {
        "bl_options": "Keying set options", 
        "bl_idname": "If this is set, the Keying Set gets a custom ID, otherwise it takes the name of the class used to define the Keying Set (for example, if the class name is \"BUILTIN_KSI_location\", and bl_idname is not set by the script, then bl_idname = \"BUILTIN_KSI_location\")", 
        "bl_description": "A short description of the keying set"
      }
    }, 
    "EdgeSplitModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "use_edge_sharp": "Split edges that are marked as sharp", 
        "use_edge_angle": "Split edges with high angle between faces", 
        "split_angle": "Angle above which to split edges"
      }
    }, 
    "BlendDataMeshes": {
      "fields": {
        "is_updated": "(read-only)"
      }
    }, 
    "MovieClipUser": {
      "fields": {
        "frame_current": "Current frame number in movie or image sequence", 
        "proxy_render_size": "Draw preview using full resolution or different proxy resolutions", 
        "use_render_undistorted": "Render preview using undistorted proxy"
      }
    }, 
    "MovieReconstructedCamera": {
      "fields": {
        "frame": "(read-only)    Frame number marker is keyframed on", 
        "average_error": "(read-only)    Average error of reconstruction", 
        "matrix": "(read-only)    Worldspace transformation matrix"
      }
    }, 
    "GammaCrossSequence": {
      "inherits": [
        "Sequence", 
        "EffectSequence"
      ], 
      "fields": {
        "input_2": "Second input for the effect strip", 
        "input_1": "First input for the effect strip", 
        "input_count": "(read-only)"
      }
    }, 
    "VoronoiTexture": {
      "inherits": [
        "ID", 
        "Texture"
      ], 
      "fields": {
        "noise_intensity": "Scales the intensity of the noise", 
        "noise_scale": "Scaling for noise input", 
        "nabla": "Size of derivative offset used for calculating normal", 
        "minkovsky_exponent": "Minkowski exponent", 
        "weight_4": "Voronoi feature weight 4", 
        "weight_3": "Voronoi feature weight 3", 
        "distance_metric": "Algorithm used to calculate distance of sample points to feature points", 
        "weight_2": "Voronoi feature weight 2", 
        "weight_1": "Voronoi feature weight 1"
      }
    }, 
    "FluidFluidSettings": {
      "inherits": [
        "FluidSettings"
      ], 
      "fields": {
        "volume_initialization": "Volume initialization type", 
        "use": "Object contributes to the fluid simulation", 
        "use_animated_mesh": "Export this mesh as an animated one (slower and enforces No Slip, only use if really necessary [e.g. armatures or parented objects], animated pos/rot/scale F-Curves do not require it)", 
        "initial_velocity": "Initial velocity of fluid"
      }
    }, 
    "RandomActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "float_value": "Always return this number", 
        "seed": "Initial seed of the random generator, use Python for more freedom (choose 0 for not random)", 
        "int_min": "Choose a number from a range: lower boundary of the range", 
        "int_max": "Choose a number from a range: upper boundary of the range", 
        "half_life_time": "Negative exponential dropoff", 
        "property": "Assign the random value to this property", 
        "chance": "Pick a number between 0 and 1, success if it's below this value", 
        "distribution": "Choose the type of distribution", 
        "use_always_true": "Always false or always true", 
        "standard_derivation": "A normal distribution: standard deviation of the distribution", 
        "float_max": "Choose a number from a range: upper boundary of the range", 
        "int_value": "Always return this number", 
        "float_min": "Choose a number from a range: lower boundary of the range", 
        "float_mean": "A normal distribution: mean of the distribution", 
        "int_mean": "Expected mean value of the distribution"
      }
    }, 
    "UVProjectModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "use_image_override": "Override faces' current images with the given image", 
        "uv_layer": "UV map name", 
        "projectors": "(read-only)", 
        "projector_count": "Number of projectors to use"
      }
    }, 
    "FModifierNoise": {
      "inherits": [
        "FModifier"
      ], 
      "fields": {
        "scale": "Scaling (in time) of the noise", 
        "blend_type": "Method of modifying the existing F-Curve", 
        "strength": "Amplitude of the noise - the amount that it modifies the underlying curve", 
        "phase": "A random seed for the noise effect", 
        "depth": "Amount of fine level detail present in the noise"
      }
    }, 
    "SmokeModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "domain_settings": "(read-only)", 
        "coll_settings": "(read-only)", 
        "flow_settings": "(read-only)"
      }
    }, 
    "Histogram": {
      "fields": {
        "show_line": "Display lines rather than filled shapes", 
        "mode": "Channels to display when drawing the histogram"
      }
    }, 
    "EnvironmentMap": {
      "fields": {
        "clip_start": "Objects nearer than this are not visible to map", 
        "layers_ignore": "Hide objects on these layers when generating the Environment Map", 
        "viewpoint_object": "Object to use as the environment map's viewpoint location", 
        "clip_end": "Objects further than this are not visible to map", 
        "resolution": "Pixel resolution of the rendered environment map", 
        "depth": "Number of times a map will be rendered recursively (mirror effects)", 
        "is_valid": "(read-only)    True if this map is ready for use, False if it needs rendering"
      }
    }, 
    "ObjectSolverConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "clip": "Movie Clip to get tracking data from", 
        "camera": "Camera to which motion is parented (if empty active scene camera is used)", 
        "use_active_clip": "Use active clip defined in scene", 
        "object": "Movie tracking object to follow"
      }
    }, 
    "PointDensity": {
      "fields": {
        "falloff_speed_scale": "Multiplier to bring particle speed within an acceptable range", 
        "vertex_cache_space": "Coordinate system to cache vertices in", 
        "noise_basis": "Noise formula used for turbulence", 
        "falloff_curve": "(read-only)", 
        "falloff_soft": "Softness of the 'soft' falloff option", 
        "falloff": "Method of attenuating density by distance from the point", 
        "use_turbulence": "Add directed noise to the density at render-time", 
        "color_source": "Data to derive color results from", 
        "particle_cache_space": "Coordinate system to cache particles in", 
        "object": "Object to take point data from", 
        "turbulence_depth": "Level of detail in the added turbulent noise", 
        "speed_scale": "Multiplier to bring particle speed within an acceptable range", 
        "particle_system": "Particle System to render as points", 
        "point_source": "Point data to use as renderable point density", 
        "turbulence_scale": "Scale of the added turbulent noise", 
        "use_falloff_curve": "Use a custom falloff curve", 
        "turbulence_influence": "Method for driving added turbulent noise", 
        "turbulence_strength": "Strength of the added turbulent noise", 
        "radius": "Radius from the shaded sample to look for points within", 
        "color_ramp": "(read-only)"
      }
    }, 
    "SoundSequence": {
      "inherits": [
        "Sequence"
      ], 
      "fields": {
        "animation_offset_end": "Animation end offset (trim end)", 
        "sound": "(read-only)    Sound datablock used by this sequence", 
        "show_waveform": "Whether to draw the sound's waveform", 
        "animation_offset_start": "Animation start offset (trim start)", 
        "volume": "Playback volume of the sound", 
        "pitch": "Playback pitch of the sound", 
        "pan": "Playback panning of the sound (only for Mono sources)"
      }
    }, 
    "MaskParent": {
      "fields": {
        "id": "ID-block to which masking element would be parented to or to it's property", 
        "sub_parent": "Name of parent sub-object in specified data block to which parenting happens", 
        "id_type": "Type of ID-block that can be used", 
        "parent": "Name of parent object in specified data block to which parenting happens", 
        "type": "Parent Type"
      }
    }, 
    "NodeSocketInterfaceVectorXYZ": {
      "inherits": [
        "NodeSocketInterface", 
        "NodeSocketInterfaceStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket", 
        "max_value": "Maximum value", 
        "min_value": "Minimum value"
      }
    }, 
    "KeyingSetsAll": {
      "fields": {
        "active_index": "Current Keying Set index (negative for 'builtin' and positive for 'absolute')", 
        "active": "Active Keying Set used to insert/delete keyframes"
      }
    }, 
    "ColorManagedViewSettings": {
      "fields": {
        "look": "Additional transform applied before view transform for an artistic needs", 
        "exposure": "Exposure (stops) applied before display transform", 
        "gamma": "Amount of gamma modification applied after display transform", 
        "view_transform": "View used when converting image to a display space", 
        "use_curve_mapping": "Use RGB curved for pre-display transformation", 
        "curve_mapping": "(read-only)    Color curve mapping applied before display transform"
      }
    }, 
    "OceanTexData": {
      "fields": {
        "output": "The data that is output by the texture", 
        "ocean_object": "Object containing the ocean modifier"
      }
    }, 
    "LampSkySettings": {
      "fields": {
        "use_sky": "Apply sun effect on sky", 
        "sky_blend": "Blend factor with sky", 
        "sky_blend_type": "Blend mode for combining sun sky with world sky", 
        "atmosphere_distance_factor": "Multiplier to convert blender units to physical distance", 
        "sun_size": "Sun size", 
        "backscattered_light": "Backscattered light", 
        "use_atmosphere": "Apply sun effect on atmosphere", 
        "sun_intensity": "Sun intensity", 
        "sky_exposure": "Strength of sky shading exponential exposure correction", 
        "sky_color_space": "Color space to use for internal XYZ->RGB color conversion", 
        "sun_brightness": "Sun brightness", 
        "horizon_brightness": "Horizon brightness", 
        "atmosphere_extinction": "Extinction scattering contribution factor", 
        "atmosphere_inscattering": "Scatter contribution factor", 
        "atmosphere_turbidity": "Sky turbidity", 
        "spread": "Horizon Spread"
      }
    }, 
    "CompositorNodeTexture": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "CompositorNode"
      ], 
      "fields": {
        "node_output": "For node-based textures, which output node to use"
      }
    }, 
    "NodeLink": {
      "fields": {
        "is_hidden": "(read-only)    Link is hidden due to invisible sockets", 
        "from_node": "(read-only)", 
        "to_node": "(read-only)", 
        "from_socket": "(read-only)", 
        "to_socket": "(read-only)"
      }
    }, 
    "TextureSlot": {
      "fields": {
        "use_rgb_to_intensity": "Convert texture RGB values to intensity (gray) values", 
        "invert": "Invert the values of the texture to reverse its effect", 
        "scale": "Set scaling for the texture's X, Y and Z sizes", 
        "output_node": "Which output node to use, for node-based textures", 
        "blend_type": "Mode used to apply the texture", 
        "use_stencil": "Use this texture as a blending value on the next texture", 
        "color": "Default color for textures that don't return RGB or when RGB to intensity is enabled", 
        "texture": "Texture datablock used by this texture slot", 
        "default_value": "Value to use for Ref, Spec, Amb, Emit, Alpha, RayMir, TransLu and Hard", 
        "name": "(read-only)    Texture slot name", 
        "offset": "Fine tune of the texture mapping X, Y and Z locations"
      }
    }, 
    "MultiresModifier": {
      "inherits": [
        "Modifier"
      ], 
      "fields": {
        "filepath": "Path to external displacements file", 
        "total_levels": "(read-only)    Number of subdivisions for which displacements are stored", 
        "levels": "Number of subdivisions to use in the viewport", 
        "show_only_control_edges": "Skip drawing/rendering of interior subdivided edges", 
        "subdivision_type": "Select type of subdivision algorithm", 
        "render_levels": "The subdivision level visible at render time", 
        "is_external": "(read-only)    Store multires displacements outside the .blend file, to save memory", 
        "use_subsurf_uv": "Use subsurf to subdivide UVs", 
        "sculpt_levels": "Number of subdivisions to use in sculpt mode"
      }
    }, 
    "CopyRotationConstraint": {
      "inherits": [
        "Constraint"
      ], 
      "fields": {
        "invert_y": "Invert the Y rotation", 
        "invert_z": "Invert the Z rotation", 
        "use_offset": "Add original rotation into copied rotation", 
        "target": "Target Object", 
        "use_y": "Copy the target's Y rotation", 
        "invert_x": "Invert the X rotation", 
        "use_x": "Copy the target's X rotation", 
        "use_z": "Copy the target's Z rotation"
      }
    }, 
    "MotionPath": {
      "fields": {
        "frame_start": "(read-only)    Starting frame of the stored range", 
        "use_bone_head": "(read-only)    For PoseBone paths, use the bone head location when calculating this path", 
        "is_modified": "Path is being edited", 
        "length": "(read-only)    Number of frames cached", 
        "points": "(read-only)    Cached positions per frame", 
        "frame_end": "(read-only)    End frame of the stored range"
      }
    }, 
    "Text": {
      "inherits": [
        "ID"
      ], 
      "fields": {
        "current_line_index": "(read-only)    Index of current TextLine in TextLine collection", 
        "is_in_memory": "(read-only)    Text file is in memory, without a corresponding file on disk", 
        "filepath": "Filename of the text file", 
        "use_module": "Register this text as a module on loading, Text name must end with \".py\"", 
        "select_end_character": "(read-only)    Index of character after end of selection in the selection end line", 
        "current_line": "(read-only)    Current line, and start line of selection if one exists", 
        "is_modified": "(read-only)    Text file on disk is different than the one in memory", 
        "select_end_line": "(read-only)    End line of selection", 
        "is_dirty": "(read-only)    Text file has been edited since last save", 
        "use_tabs_as_spaces": "Automatically converts all new tabs into spaces", 
        "lines": "(read-only)    Lines of text", 
        "current_character": "(read-only)    Index of current character in current line, and also start index of character in selection if one exists"
      }
    }, 
    "NodeSocketIntUnsigned": {
      "inherits": [
        "NodeSocket", 
        "NodeSocketStandard"
      ], 
      "fields": {
        "default_value": "Input value used for unconnected socket"
      }
    }, 
    "PackedFile": {
      "fields": {
        "size": "(read-only)    Size of packed file in bytes"
      }
    }, 
    "EditObjectActuator": {
      "inherits": [
        "Actuator"
      ], 
      "fields": {
        "angular_velocity": "Angular velocity upon creation", 
        "use_local_linear_velocity": "Apply the transformation locally", 
        "object": "Add this Object and all its children (can't be on a visible layer)", 
        "linear_velocity": "Velocity upon creation", 
        "mode": "The mode of the actuator", 
        "mass": "The mass of the object", 
        "use_3d_tracking": "Enable 3D tracking", 
        "use_replace_physics_mesh": "Replace the physics mesh (triangle bounds only - compound shapes not supported)", 
        "time": "Duration the new Object lives or the track takes", 
        "track_object": "Track to this Object", 
        "use_local_angular_velocity": "Apply the rotation locally", 
        "use_replace_display_mesh": "Replace the display mesh", 
        "mesh": "Replace the existing, when left blank 'Phys' will remake the existing physics mesh"
      }
    }, 
    "TextureNodeCurveRGB": {
      "inherits": [
        "Node", 
        "NodeInternal", 
        "TextureNode"
      ], 
      "fields": {
        "mapping": "(read-only)"
      }
    }, 
    "NodeSocket": {
      "fields": {
        "enabled": "Enable the socket", 
        "node": "(read-only)    Node owning this socket", 
        "hide": "Hide the socket", 
        "show_expanded": "Socket links are expanded in the user interface", 
        "name": "Socket name", 
        "link_limit": "Max number of links allowed for this socket", 
        "in_out": "(read-only)    Input or Output type", 
        "type": "Data type", 
        "is_linked": "(read-only)    True if the socket is connected", 
        "identifier": "(read-only)    Unique identifier for mapping sockets", 
        "hide_value": "Hide the socket input value"
      }
    }
  }, 
  "version": "2.69"
}